
LiDAR_VL53L5CX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005984  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000158c8  08005b24  08005b24  00015b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b3ec  0801b3ec  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  0801b3ec  0801b3ec  0002b3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b3f4  0801b3f4  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b3f4  0801b3f4  0002b3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b3f8  0801b3f8  0002b3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0801b3fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  0801b46c  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  0801b46c  00030148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101bd  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226e  00000000  00000000  0004025d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  000424d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  00043000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001762f  00000000  00000000  00043a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e372  00000000  00000000  0005b0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb62  00000000  00000000  00069431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4f93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003690  00000000  00000000  000f4fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b0c 	.word	0x08005b0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005b0c 	.word	0x08005b0c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	f5ad 5db1 	sub.w	sp, sp, #5664	; 0x1620
 800057e:	b087      	sub	sp, #28
 8000580:	af00      	add	r7, sp, #0
  // VL53L5CX parameters
  VL53L5CX_Configuration conf[2];

  // VL53L5CX function(s) set
  VL53L5CX_Platform plat;
  plat.GetTick = (VL53L5CX_get_tick_Func) BSP_GetTick;
 8000582:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8000586:	3b08      	subs	r3, #8
 8000588:	4a7f      	ldr	r2, [pc, #508]	; (8000788 <main+0x210>)
 800058a:	60da      	str	r2, [r3, #12]
  plat.Read = (VL53L5CX_read_Func) CUSTOM_VL53L5CX_I2C_ReadReg ;
 800058c:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8000590:	3b08      	subs	r3, #8
 8000592:	4a7e      	ldr	r2, [pc, #504]	; (800078c <main+0x214>)
 8000594:	609a      	str	r2, [r3, #8]
  plat.Write = (VL53L5CX_write_Func) CUSTOM_VL53L5CX_I2C_WriteReg;
 8000596:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800059a:	3b08      	subs	r3, #8
 800059c:	4a7c      	ldr	r2, [pc, #496]	; (8000790 <main+0x218>)
 800059e:	605a      	str	r2, [r3, #4]

  uint8_t isReady = 0;
 80005a0:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80005a4:	3b09      	subs	r3, #9
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f002 f8bd 	bl	8002728 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_I2C1_Init();
 80005ae:	f000 fb2f 	bl	8000c10 <BSP_I2C1_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f8f7 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f98b 	bl	80008d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 f95f 	bl	800087c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // set platform functions
  conf[0].platform = plat;
 80005be:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80005c2:	3a18      	subs	r2, #24
 80005c4:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80005c8:	3b08      	subs	r3, #8
 80005ca:	4614      	mov	r4, r2
 80005cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  conf[1].platform = plat;
 80005d2:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80005d6:	3b18      	subs	r3, #24
 80005d8:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 80005dc:	3a08      	subs	r2, #8
 80005de:	f603 1428 	addw	r4, r3, #2344	; 0x928
 80005e2:	4613      	mov	r3, r2
 80005e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//  HAL_GPIO_WritePin(VL53L5CX_LPN_2_PORT, VL53L5CX_LPN_2, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(VL53L5CX_LPN_1_PORT, VL53L5CX_LPN_1, GPIO_PIN_RESET);
//  HAL_Delay(20);

  // initialize sensors
  uint8_t status = initSensor(&conf[0], VL53L5CX_LPN_2_PORT, VL53L5CX_LPN_2, 0x20);
 80005ea:	f507 707e 	add.w	r0, r7, #1016	; 0x3f8
 80005ee:	3818      	subs	r0, #24
 80005f0:	2320      	movs	r3, #32
 80005f2:	2200      	movs	r2, #0
 80005f4:	4967      	ldr	r1, [pc, #412]	; (8000794 <main+0x21c>)
 80005f6:	f000 fa0f 	bl	8000a18 <initSensor>
 80005fa:	4603      	mov	r3, r0
 80005fc:	f507 52b1 	add.w	r2, r7, #5664	; 0x1620
 8000600:	f102 0213 	add.w	r2, r2, #19
 8000604:	7013      	strb	r3, [r2, #0]
  status = initSensor(&conf[1], VL53L5CX_LPN_1_PORT, VL53L5CX_LPN_1, 0x53);
 8000606:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800060a:	3b18      	subs	r3, #24
 800060c:	f603 1028 	addw	r0, r3, #2344	; 0x928
 8000610:	2353      	movs	r3, #83	; 0x53
 8000612:	2201      	movs	r2, #1
 8000614:	4960      	ldr	r1, [pc, #384]	; (8000798 <main+0x220>)
 8000616:	f000 f9ff 	bl	8000a18 <initSensor>
 800061a:	4603      	mov	r3, r0
 800061c:	f507 52b1 	add.w	r2, r7, #5664	; 0x1620
 8000620:	f102 0213 	add.w	r2, r2, #19
 8000624:	7013      	strb	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	for (int i=0; i<2; i++) {
 8000626:	2300      	movs	r3, #0
 8000628:	f507 52b1 	add.w	r2, r7, #5664	; 0x1620
 800062c:	f102 0214 	add.w	r2, r2, #20
 8000630:	6013      	str	r3, [r2, #0]
 8000632:	e09f      	b.n	8000774 <main+0x1fc>
		status = vl53l5cx_check_data_ready(&conf[i], &isReady);
 8000634:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000638:	3b18      	subs	r3, #24
 800063a:	f507 52b1 	add.w	r2, r7, #5664	; 0x1620
 800063e:	f102 0214 	add.w	r2, r2, #20
 8000642:	6812      	ldr	r2, [r2, #0]
 8000644:	f640 1128 	movw	r1, #2344	; 0x928
 8000648:	fb01 f202 	mul.w	r2, r1, r2
 800064c:	441a      	add	r2, r3
 800064e:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8000652:	3b09      	subs	r3, #9
 8000654:	4619      	mov	r1, r3
 8000656:	4610      	mov	r0, r2
 8000658:	f001 fc1e 	bl	8001e98 <vl53l5cx_check_data_ready>
 800065c:	4603      	mov	r3, r0
 800065e:	f507 52b1 	add.w	r2, r7, #5664	; 0x1620
 8000662:	f102 0213 	add.w	r2, r2, #19
 8000666:	7013      	strb	r3, [r2, #0]

		if(isReady)
 8000668:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800066c:	3b09      	subs	r3, #9
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d063      	beq.n	800073c <main+0x1c4>
		{
			vl53l5cx_get_ranging_data(&conf[i], &Results);
 8000674:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000678:	3b18      	subs	r3, #24
 800067a:	f507 52b1 	add.w	r2, r7, #5664	; 0x1620
 800067e:	f102 0214 	add.w	r2, r2, #20
 8000682:	6812      	ldr	r2, [r2, #0]
 8000684:	f640 1128 	movw	r1, #2344	; 0x928
 8000688:	fb01 f202 	mul.w	r2, r1, r2
 800068c:	441a      	add	r2, r3
 800068e:	f107 0318 	add.w	r3, r7, #24
 8000692:	3b18      	subs	r3, #24
 8000694:	4619      	mov	r1, r3
 8000696:	4610      	mov	r0, r2
 8000698:	f001 fc46 	bl	8001f28 <vl53l5cx_get_ranging_data>

			/* As the sensor is set in 4x4 mode by default, we have a total
			 * of 16 zones to print. For this example, only the data of first zone are
			 * print */
			printf("Print data no : %3u\n", conf[i].streamcount);
 800069c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80006a0:	3b18      	subs	r3, #24
 80006a2:	f507 52b1 	add.w	r2, r7, #5664	; 0x1620
 80006a6:	f102 0214 	add.w	r2, r2, #20
 80006aa:	6812      	ldr	r2, [r2, #0]
 80006ac:	f640 1128 	movw	r1, #2344	; 0x928
 80006b0:	fb01 f202 	mul.w	r2, r1, r2
 80006b4:	4413      	add	r3, r2
 80006b6:	3310      	adds	r3, #16
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	4619      	mov	r1, r3
 80006bc:	4837      	ldr	r0, [pc, #220]	; (800079c <main+0x224>)
 80006be:	f004 f9fb 	bl	8004ab8 <iprintf>
			for(i = 0; i < 16; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	f507 52b1 	add.w	r2, r7, #5664	; 0x1620
 80006c8:	f102 0214 	add.w	r2, r2, #20
 80006cc:	6013      	str	r3, [r2, #0]
 80006ce:	e02b      	b.n	8000728 <main+0x1b0>
			{
				printf("Zone : %3d, Status : %3u, Distance : %4d mm\n",
					i,
					Results.target_status[VL53L5CX_NB_TARGET_PER_ZONE*i],
 80006d0:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 80006d4:	f103 0314 	add.w	r3, r3, #20
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	3b18      	subs	r3, #24
 80006e0:	4413      	add	r3, r2
 80006e2:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
				printf("Zone : %3d, Status : %3u, Distance : %4d mm\n",
 80006e6:	4619      	mov	r1, r3
					Results.distance_mm[VL53L5CX_NB_TARGET_PER_ZONE*i]);
 80006e8:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 80006ec:	f103 0314 	add.w	r3, r3, #20
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	f107 0318 	add.w	r3, r7, #24
 80006f6:	3b18      	subs	r3, #24
 80006f8:	f502 7290 	add.w	r2, r2, #288	; 0x120
 80006fc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
				printf("Zone : %3d, Status : %3u, Distance : %4d mm\n",
 8000700:	460a      	mov	r2, r1
 8000702:	f507 51b1 	add.w	r1, r7, #5664	; 0x1620
 8000706:	f101 0114 	add.w	r1, r1, #20
 800070a:	6809      	ldr	r1, [r1, #0]
 800070c:	4824      	ldr	r0, [pc, #144]	; (80007a0 <main+0x228>)
 800070e:	f004 f9d3 	bl	8004ab8 <iprintf>
			for(i = 0; i < 16; i++)
 8000712:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 8000716:	f103 0314 	add.w	r3, r3, #20
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	f507 52b1 	add.w	r2, r7, #5664	; 0x1620
 8000722:	f102 0214 	add.w	r2, r2, #20
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 800072c:	f103 0314 	add.w	r3, r3, #20
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b0f      	cmp	r3, #15
 8000734:	ddcc      	ble.n	80006d0 <main+0x158>
			}
			printf("\n");
 8000736:	200a      	movs	r0, #10
 8000738:	f004 f9d6 	bl	8004ae8 <putchar>
		}
		WaitMs(&(conf[i].platform), 5);
 800073c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000740:	3b18      	subs	r3, #24
 8000742:	f507 52b1 	add.w	r2, r7, #5664	; 0x1620
 8000746:	f102 0214 	add.w	r2, r2, #20
 800074a:	6812      	ldr	r2, [r2, #0]
 800074c:	f640 1128 	movw	r1, #2344	; 0x928
 8000750:	fb01 f202 	mul.w	r2, r1, r2
 8000754:	4413      	add	r3, r2
 8000756:	2105      	movs	r1, #5
 8000758:	4618      	mov	r0, r3
 800075a:	f001 ffcb 	bl	80026f4 <WaitMs>
	for (int i=0; i<2; i++) {
 800075e:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 8000762:	f103 0314 	add.w	r3, r3, #20
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	f507 52b1 	add.w	r2, r7, #5664	; 0x1620
 800076e:	f102 0214 	add.w	r2, r2, #20
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 8000778:	f103 0314 	add.w	r3, r3, #20
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b01      	cmp	r3, #1
 8000780:	f77f af58 	ble.w	8000634 <main+0xbc>
 8000784:	e74f      	b.n	8000626 <main+0xae>
 8000786:	bf00      	nop
 8000788:	08000d3d 	.word	0x08000d3d
 800078c:	08000cd9 	.word	0x08000cd9
 8000790:	08000c75 	.word	0x08000c75
 8000794:	40020400 	.word	0x40020400
 8000798:	40020800 	.word	0x40020800
 800079c:	08005b24 	.word	0x08005b24
 80007a0:	08005b3c 	.word	0x08005b3c

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	; 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	2230      	movs	r2, #48	; 0x30
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 f978 	bl	8004aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	4b29      	ldr	r3, [pc, #164]	; (8000874 <SystemClock_Config+0xd0>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a28      	ldr	r2, [pc, #160]	; (8000874 <SystemClock_Config+0xd0>)
 80007d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <SystemClock_Config+0xd0>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <SystemClock_Config+0xd4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f0:	4a21      	ldr	r2, [pc, #132]	; (8000878 <SystemClock_Config+0xd4>)
 80007f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <SystemClock_Config+0xd4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080c:	2310      	movs	r3, #16
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000814:	2300      	movs	r3, #0
 8000816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000818:	2310      	movs	r3, #16
 800081a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800081c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000820:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000822:	2304      	movs	r3, #4
 8000824:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000826:	2307      	movs	r3, #7
 8000828:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fa78 	bl	8003d24 <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800083a:	f000 f949 	bl	8000ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2302      	movs	r3, #2
 8000844:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2102      	movs	r1, #2
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fcda 	bl	8004214 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000866:	f000 f933 	bl	8000ad0 <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3750      	adds	r7, #80	; 0x50
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_USART2_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008b4:	f003 feaa 	bl	800460c <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f000 f907 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000009c 	.word	0x2000009c
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b47      	ldr	r3, [pc, #284]	; (8000a08 <MX_GPIO_Init+0x138>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a46      	ldr	r2, [pc, #280]	; (8000a08 <MX_GPIO_Init+0x138>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b44      	ldr	r3, [pc, #272]	; (8000a08 <MX_GPIO_Init+0x138>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b40      	ldr	r3, [pc, #256]	; (8000a08 <MX_GPIO_Init+0x138>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a3f      	ldr	r2, [pc, #252]	; (8000a08 <MX_GPIO_Init+0x138>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b3d      	ldr	r3, [pc, #244]	; (8000a08 <MX_GPIO_Init+0x138>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b39      	ldr	r3, [pc, #228]	; (8000a08 <MX_GPIO_Init+0x138>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a38      	ldr	r2, [pc, #224]	; (8000a08 <MX_GPIO_Init+0x138>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <MX_GPIO_Init+0x138>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <MX_GPIO_Init+0x138>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a31      	ldr	r2, [pc, #196]	; (8000a08 <MX_GPIO_Init+0x138>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <MX_GPIO_Init+0x138>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2102      	movs	r1, #2
 800095a:	482c      	ldr	r0, [pc, #176]	; (8000a0c <MX_GPIO_Init+0x13c>)
 800095c:	f002 f9e4 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2120      	movs	r1, #32
 8000964:	482a      	ldr	r0, [pc, #168]	; (8000a10 <MX_GPIO_Init+0x140>)
 8000966:	f002 f9df 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2101      	movs	r1, #1
 800096e:	4829      	ldr	r0, [pc, #164]	; (8000a14 <MX_GPIO_Init+0x144>)
 8000970:	f002 f9da 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800097a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4820      	ldr	r0, [pc, #128]	; (8000a0c <MX_GPIO_Init+0x13c>)
 800098c:	f002 f848 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000990:	2302      	movs	r3, #2
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4819      	ldr	r0, [pc, #100]	; (8000a0c <MX_GPIO_Init+0x13c>)
 80009a8:	f002 f83a 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10;
 80009ac:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4813      	ldr	r0, [pc, #76]	; (8000a10 <MX_GPIO_Init+0x140>)
 80009c4:	f002 f82c 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009c8:	2320      	movs	r3, #32
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <MX_GPIO_Init+0x140>)
 80009e0:	f002 f81e 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009e4:	2301      	movs	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <MX_GPIO_Init+0x144>)
 80009fc:	f002 f810 	bl	8002a20 <HAL_GPIO_Init>

}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40020400 	.word	0x40020400

08000a18 <initSensor>:

/* USER CODE BEGIN 4 */
uint8_t initSensor(VL53L5CX_Configuration* conf, GPIO_TypeDef* port, uint16_t port_num, uint16_t addr) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	4611      	mov	r1, r2
 8000a24:	461a      	mov	r2, r3
 8000a26:	460b      	mov	r3, r1
 8000a28:	80fb      	strh	r3, [r7, #6]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	80bb      	strh	r3, [r7, #4]
	uint8_t isAlive = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	75bb      	strb	r3, [r7, #22]
	uint8_t status = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	75fb      	strb	r3, [r7, #23]

	conf->platform.address = VL53L5CX_DEFAULT_I2C_ADDRESS;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2252      	movs	r2, #82	; 0x52
 8000a3a:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(port, port_num, GPIO_PIN_RESET);
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	68b8      	ldr	r0, [r7, #8]
 8000a44:	f002 f970 	bl	8002d28 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000a48:	2014      	movs	r0, #20
 8000a4a:	f001 fedf 	bl	800280c <HAL_Delay>
	HAL_GPIO_WritePin(port, port_num, GPIO_PIN_SET);
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	2201      	movs	r2, #1
 8000a52:	4619      	mov	r1, r3
 8000a54:	68b8      	ldr	r0, [r7, #8]
 8000a56:	f002 f967 	bl	8002d28 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000a5a:	2014      	movs	r0, #20
 8000a5c:	f001 fed6 	bl	800280c <HAL_Delay>

//	status = vl53l5cx_set_i2c_address(conf, VL53L5CX_DEFAULT_I2C_ADDRESS);
	status = vl53l5cx_is_alive(conf, &isAlive);
 8000a60:	f107 0316 	add.w	r3, r7, #22
 8000a64:	4619      	mov	r1, r3
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f000 fd9a 	bl	80015a0 <vl53l5cx_is_alive>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	75fb      	strb	r3, [r7, #23]

	if(!isAlive)
 8000a70:	7dbb      	ldrb	r3, [r7, #22]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d107      	bne.n	8000a86 <initSensor+0x6e>
	{
		printf("VL53L5CXV0 not detected at requested address (0x%x)\n", conf->platform.address);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4812      	ldr	r0, [pc, #72]	; (8000ac8 <initSensor+0xb0>)
 8000a7e:	f004 f81b 	bl	8004ab8 <iprintf>
		return 255;
 8000a82:	23ff      	movs	r3, #255	; 0xff
 8000a84:	e01b      	b.n	8000abe <initSensor+0xa6>
	}
	printf("Sensor initializing, please wait few seconds\n");
 8000a86:	4811      	ldr	r0, [pc, #68]	; (8000acc <initSensor+0xb4>)
 8000a88:	f004 f8b2 	bl	8004bf0 <puts>
	status = vl53l5cx_init(conf);
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	f000 fdd1 	bl	8001634 <vl53l5cx_init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	75fb      	strb	r3, [r7, #23]
	status = vl53l5cx_set_ranging_frequency_hz(conf, 2);				// Set 2Hz ranging frequency
 8000a96:	2102      	movs	r1, #2
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f001 fbcf 	bl	800223c <vl53l5cx_set_ranging_frequency_hz>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	75fb      	strb	r3, [r7, #23]
	status = vl53l5cx_set_ranging_mode(conf, VL53L5CX_RANGING_MODE_CONTINUOUS);  // Set mode continuous
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f001 fbea 	bl	800227e <vl53l5cx_set_ranging_mode>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	75fb      	strb	r3, [r7, #23]

	status = vl53l5cx_set_i2c_address(conf, addr);
 8000aae:	88bb      	ldrh	r3, [r7, #4]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f001 f9ba 	bl	8001e2c <vl53l5cx_set_i2c_address>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	75fb      	strb	r3, [r7, #23]

	return status;
 8000abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	08005b6c 	.word	0x08005b6c
 8000acc:	08005ba4 	.word	0x08005ba4

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <HAL_MspInit+0x4c>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b1a:	2007      	movs	r0, #7
 8000b1c:	f001 ff4c 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <HAL_UART_MspInit+0x84>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d12b      	bne.n	8000ba6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b86:	230c      	movs	r3, #12
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b96:	2307      	movs	r3, #7
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <HAL_UART_MspInit+0x8c>)
 8000ba2:	f001 ff3d 	bl	8002a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40004400 	.word	0x40004400
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f001 fde0 	bl	80027cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <BSP_I2C1_Init+0x58>)
 8000c1c:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <BSP_I2C1_Init+0x5c>)
 8000c1e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <BSP_I2C1_Init+0x60>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	1c5a      	adds	r2, r3, #1
 8000c26:	4912      	ldr	r1, [pc, #72]	; (8000c70 <BSP_I2C1_Init+0x60>)
 8000c28:	600a      	str	r2, [r1, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d117      	bne.n	8000c5e <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000c2e:	480e      	ldr	r0, [pc, #56]	; (8000c68 <BSP_I2C1_Init+0x58>)
 8000c30:	f002 fd02 	bl	8003638 <HAL_I2C_GetState>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d111      	bne.n	8000c5e <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000c3a:	480b      	ldr	r0, [pc, #44]	; (8000c68 <BSP_I2C1_Init+0x58>)
 8000c3c:	f000 f8ba 	bl	8000db4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d10b      	bne.n	8000c5e <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000c46:	4808      	ldr	r0, [pc, #32]	; (8000c68 <BSP_I2C1_Init+0x58>)
 8000c48:	f000 f880 	bl	8000d4c <MX_I2C1_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000c52:	f06f 0307 	mvn.w	r3, #7
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	e001      	b.n	8000c5e <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000c5e:	687b      	ldr	r3, [r7, #4]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200000e0 	.word	0x200000e0
 8000c6c:	40005400 	.word	0x40005400
 8000c70:	2000008c 	.word	0x2000008c

08000c74 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af04      	add	r7, sp, #16
 8000c7a:	60ba      	str	r2, [r7, #8]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4603      	mov	r3, r0
 8000c80:	81fb      	strh	r3, [r7, #14]
 8000c82:	460b      	mov	r3, r1
 8000c84:	81bb      	strh	r3, [r7, #12]
 8000c86:	4613      	mov	r3, r2
 8000c88:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000c8e:	89ba      	ldrh	r2, [r7, #12]
 8000c90:	89f9      	ldrh	r1, [r7, #14]
 8000c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c96:	9302      	str	r3, [sp, #8]
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <BSP_I2C1_WriteReg16+0x60>)
 8000ca4:	f002 f9a8 	bl	8002ff8 <HAL_I2C_Mem_Write>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00c      	beq.n	8000cc8 <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000cae:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <BSP_I2C1_WriteReg16+0x60>)
 8000cb0:	f002 fcd0 	bl	8003654 <HAL_I2C_GetError>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d103      	bne.n	8000cc2 <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000cba:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e002      	b.n	8000cc8 <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000cc2:	f06f 0303 	mvn.w	r3, #3
 8000cc6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000cc8:	697b      	ldr	r3, [r7, #20]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000e0 	.word	0x200000e0

08000cd8 <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af04      	add	r7, sp, #16
 8000cde:	60ba      	str	r2, [r7, #8]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	81fb      	strh	r3, [r7, #14]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	81bb      	strh	r3, [r7, #12]
 8000cea:	4613      	mov	r3, r2
 8000cec:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000cf2:	89ba      	ldrh	r2, [r7, #12]
 8000cf4:	89f9      	ldrh	r1, [r7, #14]
 8000cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfa:	9302      	str	r3, [sp, #8]
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	2310      	movs	r3, #16
 8000d06:	480c      	ldr	r0, [pc, #48]	; (8000d38 <BSP_I2C1_ReadReg16+0x60>)
 8000d08:	f002 fa70 	bl	80031ec <HAL_I2C_Mem_Read>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00c      	beq.n	8000d2c <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000d12:	4809      	ldr	r0, [pc, #36]	; (8000d38 <BSP_I2C1_ReadReg16+0x60>)
 8000d14:	f002 fc9e 	bl	8003654 <HAL_I2C_GetError>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	d003      	beq.n	8000d26 <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d1e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	e002      	b.n	8000d2c <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000d26:	f06f 0303 	mvn.w	r3, #3
 8000d2a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d2c:	697b      	ldr	r3, [r7, #20]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200000e0 	.word	0x200000e0

08000d3c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000d40:	f001 fd58 	bl	80027f4 <HAL_GetTick>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a14      	ldr	r2, [pc, #80]	; (8000dac <MX_I2C1_Init+0x60>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a13      	ldr	r2, [pc, #76]	; (8000db0 <MX_I2C1_Init+0x64>)
 8000d62:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d76:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f001 ffe3 	bl	8002d5c <HAL_I2C_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40005400 	.word	0x40005400
 8000db0:	000186a0 	.word	0x000186a0

08000db4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <I2C1_MspInit+0x8c>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	4a1e      	ldr	r2, [pc, #120]	; (8000e40 <I2C1_MspInit+0x8c>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	6313      	str	r3, [r2, #48]	; 0x30
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <I2C1_MspInit+0x8c>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dde:	2312      	movs	r3, #18
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000dea:	2304      	movs	r3, #4
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4813      	ldr	r0, [pc, #76]	; (8000e44 <I2C1_MspInit+0x90>)
 8000df6:	f001 fe13 	bl	8002a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e00:	2312      	movs	r3, #18
 8000e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	480b      	ldr	r0, [pc, #44]	; (8000e44 <I2C1_MspInit+0x90>)
 8000e18:	f001 fe02 	bl	8002a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <I2C1_MspInit+0x8c>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <I2C1_MspInit+0x8c>)
 8000e26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <I2C1_MspInit+0x8c>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020400 	.word	0x40020400

08000e48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e00a      	b.n	8000e70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e5a:	f3af 8000 	nop.w
 8000e5e:	4601      	mov	r1, r0
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	60ba      	str	r2, [r7, #8]
 8000e66:	b2ca      	uxtb	r2, r1
 8000e68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbf0      	blt.n	8000e5a <_read+0x12>
	}

return len;
 8000e78:	687b      	ldr	r3, [r7, #4]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b086      	sub	sp, #24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	60f8      	str	r0, [r7, #12]
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e009      	b.n	8000ea8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	60ba      	str	r2, [r7, #8]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dbf1      	blt.n	8000e94 <_write+0x12>
	}
	return len;
 8000eb0:	687b      	ldr	r3, [r7, #4]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_close>:

int _close(int file)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <_isatty>:

int _isatty(int file)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
	return 1;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f003 fd70 	bl	8004a38 <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20018000 	.word	0x20018000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	20000090 	.word	0x20000090
 8000f8c:	20000148 	.word	0x20000148

08000f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fba:	490e      	ldr	r1, [pc, #56]	; (8000ff4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd0:	4c0b      	ldr	r4, [pc, #44]	; (8001000 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fde:	f7ff ffd7 	bl	8000f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f003 fd2f 	bl	8004a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fac7 	bl	8000578 <main>
  bx  lr    
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ff8:	0801b3fc 	.word	0x0801b3fc
  ldr r2, =_sbss
 8000ffc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001000:	20000148 	.word	0x20000148

08001004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC_IRQHandler>

08001006 <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	4608      	mov	r0, r1
 8001010:	4611      	mov	r1, r2
 8001012:	461a      	mov	r2, r3
 8001014:	4603      	mov	r3, r0
 8001016:	70fb      	strb	r3, [r7, #3]
 8001018:	460b      	mov	r3, r1
 800101a:	70bb      	strb	r3, [r7, #2]
 800101c:	4613      	mov	r3, r2
 800101e:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8001028:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), address,
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	8839      	ldrh	r1, [r7, #0]
 8001034:	f001 fb11 	bl	800265a <RdMulti>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	4313      	orrs	r3, r2
 8001040:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	210a      	movs	r1, #10
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fb54 	bl	80026f4 <WaitMs>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	4313      	orrs	r3, r2
 8001054:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	2bc7      	cmp	r3, #199	; 0xc7
 800105a:	d906      	bls.n	800106a <_vl53l5cx_poll_for_answer+0x64>
		{
			status |= p_dev->temp_buffer[2];
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	4313      	orrs	r3, r2
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e00f      	b.n	800108a <_vl53l5cx_poll_for_answer+0x84>
		}else if((size >= (uint8_t)4) 
 800106a:	78fb      	ldrb	r3, [r7, #3]
 800106c:	2b03      	cmp	r3, #3
 800106e:	d909      	bls.n	8001084 <_vl53l5cx_poll_for_answer+0x7e>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8001076:	2b7e      	cmp	r3, #126	; 0x7e
 8001078:	d904      	bls.n	8001084 <_vl53l5cx_poll_for_answer+0x7e>
		{
			status |= VL53L5CX_MCU_ERROR;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	e002      	b.n	800108a <_vl53l5cx_poll_for_answer+0x84>
		}
		else
		{
			timeout++;
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	3301      	adds	r3, #1
 8001088:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 800108a:	78bb      	ldrb	r3, [r7, #2]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8001094:	7e3b      	ldrb	r3, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	b2db      	uxtb	r3, r3
 800109a:	7f3a      	ldrb	r2, [r7, #28]
 800109c:	429a      	cmp	r2, r3
 800109e:	d1c3      	bne.n	8001028 <_vl53l5cx_poll_for_answer+0x22>

	return status;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0ea      	sub	sp, #424	; 0x1a8
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	6018      	str	r0, [r3, #0]
 80010b6:	460a      	mov	r2, r1
 80010b8:	1cfb      	adds	r3, r7, #3
 80010ba:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4aab      	ldr	r2, [pc, #684]	; (8001374 <_vl53l5cx_send_offset_data+0x2c8>)
 80010c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010cc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	4aa8      	ldr	r2, [pc, #672]	; (8001378 <_vl53l5cx_send_offset_data+0x2cc>)
 80010d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010da:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer,
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 80010ec:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80010f0:	4619      	mov	r1, r3
 80010f2:	f003 fccb 	bl	8004a8c <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 80010f6:	1cfb      	adds	r3, r7, #3
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b10      	cmp	r3, #16
 80010fc:	f040 80f7 	bne.w	80012ee <_vl53l5cx_send_offset_data+0x242>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	cb03      	ldmia	r3!, {r0, r1}
 800110e:	6010      	str	r0, [r2, #0]
 8001110:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800111a:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fab2 	bl	8002688 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f203 514c 	addw	r1, r3, #1356	; 0x54c
 800112c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001130:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fca9 	bl	8004a8c <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f503 61ca 	add.w	r1, r3, #1616	; 0x650
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	2280      	movs	r2, #128	; 0x80
 8001148:	4618      	mov	r0, r3
 800114a:	f003 fc9f 	bl	8004a8c <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 800114e:	2300      	movs	r3, #0
 8001150:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8001154:	e098      	b.n	8001288 <_vl53l5cx_send_offset_data+0x1dc>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001156:	2300      	movs	r3, #0
 8001158:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 800115c:	e088      	b.n	8001270 <_vl53l5cx_send_offset_data+0x1c4>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 800115e:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8001162:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4413      	add	r3, r2
 800116a:	005a      	lsls	r2, r3, #1
 800116c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001170:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8001174:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001178:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	440b      	add	r3, r1
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	1c59      	adds	r1, r3, #1
 8001184:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001188:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800118c:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 800118e:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001192:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	3304      	adds	r3, #4
 800119c:	0059      	lsls	r1, r3, #1
 800119e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011a6:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 80011a8:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80011ac:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	440b      	add	r3, r1
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	f103 0109 	add.w	r1, r3, #9
 80011ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011c2:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80011c4:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80011c8:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	440a      	add	r2, r1
                                  /(uint32_t)4;
 80011d0:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80011d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 80011da:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 80011de:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4413      	add	r3, r2
 80011e6:	005a      	lsls	r2, r3, #1
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80011f0:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 80011f2:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 80011f6:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4413      	add	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	1c5a      	adds	r2, r3, #1
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800120a:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 800120c:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001210:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8001214:	00d2      	lsls	r2, r2, #3
 8001216:	440a      	add	r2, r1
 8001218:	3204      	adds	r2, #4
 800121a:	0051      	lsls	r1, r2, #1
 800121c:	f107 021c 	add.w	r2, r7, #28
 8001220:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001224:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8001226:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 800122a:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 800122e:	00d2      	lsls	r2, r2, #3
 8001230:	440a      	add	r2, r1
 8001232:	0052      	lsls	r2, r2, #1
 8001234:	f102 0109 	add.w	r1, r2, #9
 8001238:	f107 021c 	add.w	r2, r7, #28
 800123c:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001240:	4413      	add	r3, r2
                                  /(int16_t)4;
 8001242:	2b00      	cmp	r3, #0
 8001244:	da00      	bge.n	8001248 <_vl53l5cx_send_offset_data+0x19c>
 8001246:	3303      	adds	r3, #3
 8001248:	109b      	asrs	r3, r3, #2
 800124a:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 800124c:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8001250:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	441a      	add	r2, r3
 8001258:	b209      	sxth	r1, r1
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8001262:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8001270:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8001274:	2b03      	cmp	r3, #3
 8001276:	f77f af72 	ble.w	800115e <_vl53l5cx_send_offset_data+0xb2>
		for (j = 0; j < (int8_t)4; j++)
 800127a:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800127e:	b2db      	uxtb	r3, r3
 8001280:	3301      	adds	r3, #1
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8001288:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800128c:	2b03      	cmp	r3, #3
 800128e:	f77f af62 	ble.w	8001156 <_vl53l5cx_send_offset_data+0xaa>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	3320      	adds	r3, #32
 8001298:	2260      	movs	r2, #96	; 0x60
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f003 fc03 	bl	8004aa8 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 80012a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012a6:	3340      	adds	r3, #64	; 0x40
 80012a8:	22c0      	movs	r2, #192	; 0xc0
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 fbfb 	bl	8004aa8 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 80012ba:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80012be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fbe2 	bl	8004a8c <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 80012d0:	f107 011c 	add.w	r1, r7, #28
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 fbd8 	bl	8004a8c <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80012e4:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80012e8:	4618      	mov	r0, r3
 80012ea:	f001 f9cd 	bl	8002688 <SwapBuffer>
	}

	(void)memcpy(p_dev->temp_buffer, &(p_dev->temp_buffer[8]),
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80012fe:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8001302:	4619      	mov	r1, r3
 8001304:	f003 fbc2 	bl	8004a8c <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4);
	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f503 62de 	add.w	r2, r3, #1776	; 0x6f0
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	cb03      	ldmia	r3!, {r0, r1}
 8001316:	6010      	str	r0, [r2, #0]
 8001318:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8001326:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 800132a:	f642 6118 	movw	r1, #11800	; 0x2e18
 800132e:	f001 f97d 	bl	800262c <WrMulti>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 800133a:	4313      	orrs	r3, r2
 800133c:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8001340:	1d38      	adds	r0, r7, #4
 8001342:	2303      	movs	r3, #3
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	23ff      	movs	r3, #255	; 0xff
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800134e:	2201      	movs	r2, #1
 8001350:	2104      	movs	r1, #4
 8001352:	6800      	ldr	r0, [r0, #0]
 8001354:	f7ff fe57 	bl	8001006 <_vl53l5cx_poll_for_answer>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8001360:	4313      	orrs	r3, r2
 8001362:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8001366:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
}
 800136a:	4618      	mov	r0, r3
 800136c:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	08005bd4 	.word	0x08005bd4
 8001378:	08005bdc 	.word	0x08005bdc

0800137c <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b0ca      	sub	sp, #296	; 0x128
 8001380:	af02      	add	r7, sp, #8
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	6018      	str	r0, [r3, #0]
 8001386:	460a      	mov	r2, r1
 8001388:	1cfb      	adds	r3, r7, #3
 800138a:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8001392:	4a80      	ldr	r2, [pc, #512]	; (8001594 <_vl53l5cx_send_xtalk_data+0x218>)
 8001394:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001398:	e892 0003 	ldmia.w	r2, {r0, r1}
 800139c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 80013a0:	4a7d      	ldr	r2, [pc, #500]	; (8001598 <_vl53l5cx_send_xtalk_data+0x21c>)
 80013a2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80013a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013aa:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 80013ae:	4b7b      	ldr	r3, [pc, #492]	; (800159c <_vl53l5cx_send_xtalk_data+0x220>)
 80013b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013c4:	f44f 7242 	mov.w	r2, #776	; 0x308
 80013c8:	4619      	mov	r1, r3
 80013ca:	f003 fb5f 	bl	8004a8c <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 80013ce:	1cfb      	adds	r3, r7, #3
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b10      	cmp	r3, #16
 80013d4:	f040 80b0 	bne.w	8001538 <_vl53l5cx_send_xtalk_data+0x1bc>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80013e0:	461a      	mov	r2, r3
 80013e2:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80013e6:	cb03      	ldmia	r3!, {r0, r1}
 80013e8:	6010      	str	r0, [r2, #0]
 80013ea:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 80013f4:	461a      	mov	r2, r3
 80013f6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80013fa:	cb03      	ldmia	r3!, {r0, r1}
 80013fc:	6010      	str	r0, [r2, #0]
 80013fe:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001408:	f44f 7142 	mov.w	r1, #776	; 0x308
 800140c:	4618      	mov	r0, r3
 800140e:	f001 f93b 	bl	8002688 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f203 5144 	addw	r1, r3, #1348	; 0x544
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001422:	4618      	mov	r0, r3
 8001424:	f003 fb32 	bl	8004a8c <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 8001428:	2300      	movs	r3, #0
 800142a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800142e:	e053      	b.n	80014d8 <_vl53l5cx_send_xtalk_data+0x15c>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001430:	2300      	movs	r3, #0
 8001432:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8001436:	e044      	b.n	80014c2 <_vl53l5cx_send_xtalk_data+0x146>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8001438:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 800143c:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4413      	add	r3, r2
 8001444:	005a      	lsls	r2, r3, #1
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 800144e:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8001452:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	1c59      	adds	r1, r3, #1
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001466:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8001468:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800146c:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	440b      	add	r3, r1
 8001474:	3304      	adds	r3, #4
 8001476:	0059      	lsls	r1, r3, #1
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001480:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001482:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8001486:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	440b      	add	r3, r1
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	f103 0109 	add.w	r1, r3, #9
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800149c:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800149e:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 80014a2:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80014aa:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 80014b4:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	3301      	adds	r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 80014c2:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	ddb6      	ble.n	8001438 <_vl53l5cx_send_xtalk_data+0xbc>
		for (j = 0; j < (int8_t)4; j++)
 80014ca:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	3301      	adds	r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80014d8:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80014dc:	2b03      	cmp	r3, #3
 80014de:	dda7      	ble.n	8001430 <_vl53l5cx_send_xtalk_data+0xb4>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	3340      	adds	r3, #64	; 0x40
 80014e6:	22c0      	movs	r2, #192	; 0xc0
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f003 fadc 	bl	8004aa8 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f203 5344 	addw	r3, r3, #1348	; 0x544
 80014f8:	f107 0108 	add.w	r1, r7, #8
 80014fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001500:	4618      	mov	r0, r3
 8001502:	f003 fac3 	bl	8004a8c <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800150e:	f44f 7142 	mov.w	r1, #776	; 0x308
 8001512:	4618      	mov	r0, r3
 8001514:	f001 f8b8 	bl	8002688 <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f203 6344 	addw	r3, r3, #1604	; 0x644
 8001520:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001524:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 , 
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 800152e:	2204      	movs	r2, #4
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f003 fab8 	bl	8004aa8 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8001544:	f44f 7342 	mov.w	r3, #776	; 0x308
 8001548:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 800154c:	f001 f86e 	bl	800262c <WrMulti>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001558:	4313      	orrs	r3, r2
 800155a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800155e:	1d38      	adds	r0, r7, #4
 8001560:	2303      	movs	r3, #3
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	23ff      	movs	r3, #255	; 0xff
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800156c:	2201      	movs	r2, #1
 800156e:	2104      	movs	r1, #4
 8001570:	6800      	ldr	r0, [r0, #0]
 8001572:	f7ff fd48 	bl	8001006 <_vl53l5cx_poll_for_answer>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800157e:	4313      	orrs	r3, r2
 8001580:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8001584:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 8001588:	4618      	mov	r0, r3
 800158a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	08005be4 	.word	0x08005be4
 8001598:	08005bec 	.word	0x08005bec
 800159c:	0001fca0 	.word	0x0001fca0

080015a0 <vl53l5cx_is_alive>:

uint8_t vl53l5cx_is_alive(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_is_alive)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]
	uint8_t device_id, revision_id;

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 f822 	bl	8002600 <WrByte>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0, &device_id);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f107 020e 	add.w	r2, r7, #14
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f001 f801 	bl	80025d6 <RdByte>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	4313      	orrs	r3, r2
 80015dc:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 1, &revision_id);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f107 020d 	add.w	r2, r7, #13
 80015e4:	2101      	movs	r1, #1
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fff5 	bl	80025d6 <RdByte>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2202      	movs	r2, #2
 80015fa:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fffe 	bl	8002600 <WrByte>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	4313      	orrs	r3, r2
 800160c:	73fb      	strb	r3, [r7, #15]

	if((device_id == (uint8_t)0xF0) && (revision_id == (uint8_t)0x02))
 800160e:	7bbb      	ldrb	r3, [r7, #14]
 8001610:	2bf0      	cmp	r3, #240	; 0xf0
 8001612:	d106      	bne.n	8001622 <vl53l5cx_is_alive+0x82>
 8001614:	7b7b      	ldrb	r3, [r7, #13]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d103      	bne.n	8001622 <vl53l5cx_is_alive+0x82>
	{
		*p_is_alive = 1;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2201      	movs	r2, #1
 800161e:	701a      	strb	r2, [r3, #0]
 8001620:	e002      	b.n	8001628 <vl53l5cx_is_alive+0x88>
	}
	else
	{
		*p_is_alive = 0;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <vl53l5cx_init>:

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af02      	add	r7, sp, #8
 800163a:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8001640:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001644:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8001646:	2301      	movs	r3, #1
 8001648:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4ae6      	ldr	r2, [pc, #920]	; (80019e8 <vl53l5cx_init+0x3b4>)
 800164e:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4ae6      	ldr	r2, [pc, #920]	; (80019ec <vl53l5cx_init+0x3b8>)
 8001654:	619a      	str	r2, [r3, #24]
        
	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800165e:	4618      	mov	r0, r3
 8001660:	f000 ffce 	bl	8002600 <WrByte>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	4313      	orrs	r3, r2
 800166c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2204      	movs	r2, #4
 8001672:	2109      	movs	r1, #9
 8001674:	4618      	mov	r0, r3
 8001676:	f000 ffc3 	bl	8002600 <WrByte>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	7dfb      	ldrb	r3, [r7, #23]
 8001680:	4313      	orrs	r3, r2
 8001682:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2240      	movs	r2, #64	; 0x40
 8001688:	210f      	movs	r1, #15
 800168a:	4618      	mov	r0, r3
 800168c:	f000 ffb8 	bl	8002600 <WrByte>
 8001690:	4603      	mov	r3, r0
 8001692:	461a      	mov	r2, r3
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	4313      	orrs	r3, r2
 8001698:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2203      	movs	r2, #3
 800169e:	210a      	movs	r1, #10
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 ffad 	bl	8002600 <WrByte>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f107 0216 	add.w	r2, r7, #22
 80016b6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 ff8b 	bl	80025d6 <RdByte>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461a      	mov	r2, r3
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	210c      	movs	r1, #12
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 ff95 	bl	8002600 <WrByte>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	4313      	orrs	r3, r2
 80016de:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f240 1101 	movw	r1, #257	; 0x101
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 ff89 	bl	8002600 <WrByte>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	7dfb      	ldrb	r3, [r7, #23]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001700:	4618      	mov	r0, r3
 8001702:	f000 ff7d 	bl	8002600 <WrByte>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	4313      	orrs	r3, r2
 800170e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001718:	4618      	mov	r0, r3
 800171a:	f000 ff71 	bl	8002600 <WrByte>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	7dfb      	ldrb	r3, [r7, #23]
 8001724:	4313      	orrs	r3, r2
 8001726:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f244 0102 	movw	r1, #16386	; 0x4002
 8001730:	4618      	mov	r0, r3
 8001732:	f000 ff65 	bl	8002600 <WrByte>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	7dfb      	ldrb	r3, [r7, #23]
 800173c:	4313      	orrs	r3, r2
 800173e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f244 0102 	movw	r1, #16386	; 0x4002
 8001748:	4618      	mov	r0, r3
 800174a:	f000 ff59 	bl	8002600 <WrByte>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	4313      	orrs	r3, r2
 8001756:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2203      	movs	r2, #3
 800175c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001760:	4618      	mov	r0, r3
 8001762:	f000 ff4d 	bl	8002600 <WrByte>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	4313      	orrs	r3, r2
 800176e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f240 1103 	movw	r1, #259	; 0x103
 8001778:	4618      	mov	r0, r3
 800177a:	f000 ff41 	bl	8002600 <WrByte>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	4313      	orrs	r3, r2
 8001786:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	210c      	movs	r1, #12
 800178e:	4618      	mov	r0, r3
 8001790:	f000 ff36 	bl	8002600 <WrByte>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	4313      	orrs	r3, r2
 800179c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2243      	movs	r2, #67	; 0x43
 80017a2:	210f      	movs	r1, #15
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 ff2b 	bl	8002600 <WrByte>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	7dfb      	ldrb	r3, [r7, #23]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2101      	movs	r1, #1
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 ff9b 	bl	80026f4 <WaitMs>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2240      	movs	r2, #64	; 0x40
 80017cc:	210f      	movs	r1, #15
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 ff16 	bl	8002600 <WrByte>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	4313      	orrs	r3, r2
 80017dc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	210a      	movs	r1, #10
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 ff0b 	bl	8002600 <WrByte>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2164      	movs	r1, #100	; 0x64
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 ff7b 	bl	80026f4 <WaitMs>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	4313      	orrs	r3, r2
 8001806:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fef5 	bl	8002600 <WrByte>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	4313      	orrs	r3, r2
 800181e:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8001820:	2301      	movs	r3, #1
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	23ff      	movs	r3, #255	; 0xff
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2306      	movs	r3, #6
 800182a:	2200      	movs	r2, #0
 800182c:	2101      	movs	r1, #1
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fbe9 	bl	8001006 <_vl53l5cx_poll_for_answer>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	4313      	orrs	r3, r2
 800183c:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	210e      	movs	r1, #14
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fedb 	bl	8002600 <WrByte>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	4313      	orrs	r3, r2
 8001852:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2202      	movs	r2, #2
 8001858:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fecf 	bl	8002600 <WrByte>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 8001868:	4313      	orrs	r3, r2
 800186a:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	220d      	movs	r2, #13
 8001870:	2103      	movs	r1, #3
 8001872:	4618      	mov	r0, r3
 8001874:	f000 fec4 	bl	8002600 <WrByte>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	4313      	orrs	r3, r2
 8001880:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800188a:	4618      	mov	r0, r3
 800188c:	f000 feb8 	bl	8002600 <WrByte>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	4313      	orrs	r3, r2
 8001898:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 800189a:	2310      	movs	r3, #16
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	2310      	movs	r3, #16
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2321      	movs	r3, #33	; 0x21
 80018a4:	2200      	movs	r2, #0
 80018a6:	2101      	movs	r1, #1
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff fbac 	bl	8001006 <_vl53l5cx_poll_for_answer>
 80018ae:	4603      	mov	r3, r0
 80018b0:	461a      	mov	r2, r3
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fe9d 	bl	8002600 <WrByte>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461a      	mov	r2, r3
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	210c      	movs	r1, #12
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 fe92 	bl	8002600 <WrByte>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fe86 	bl	8002600 <WrByte>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f240 1101 	movw	r1, #257	; 0x101
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fe7a 	bl	8002600 <WrByte>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	4313      	orrs	r3, r2
 8001914:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fe6e 	bl	8002600 <WrByte>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	7dfb      	ldrb	r3, [r7, #23]
 800192a:	4313      	orrs	r3, r2
 800192c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fe62 	bl	8002600 <WrByte>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	4313      	orrs	r3, r2
 8001944:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f244 0102 	movw	r1, #16386	; 0x4002
 800194e:	4618      	mov	r0, r3
 8001950:	f000 fe56 	bl	8002600 <WrByte>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	4313      	orrs	r3, r2
 800195c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f244 0102 	movw	r1, #16386	; 0x4002
 8001966:	4618      	mov	r0, r3
 8001968:	f000 fe4a 	bl	8002600 <WrByte>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	4313      	orrs	r3, r2
 8001974:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2203      	movs	r2, #3
 800197a:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800197e:	4618      	mov	r0, r3
 8001980:	f000 fe3e 	bl	8002600 <WrByte>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	4313      	orrs	r3, r2
 800198c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f240 1103 	movw	r1, #259	; 0x103
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fe32 	bl	8002600 <WrByte>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f244 010f 	movw	r1, #16399	; 0x400f
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 fe26 	bl	8002600 <WrByte>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2243      	movs	r2, #67	; 0x43
 80019c2:	f240 211a 	movw	r1, #538	; 0x21a
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fe1a 	bl	8002600 <WrByte>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2203      	movs	r2, #3
 80019da:	f240 211a 	movw	r1, #538	; 0x21a
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 fe0e 	bl	8002600 <WrByte>
 80019e4:	e004      	b.n	80019f0 <vl53l5cx_init+0x3bc>
 80019e6:	bf00      	nop
 80019e8:	0801b024 	.word	0x0801b024
 80019ec:	0801ac58 	.word	0x0801ac58
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f240 211a 	movw	r1, #538	; 0x21a
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fdfc 	bl	8002600 <WrByte>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f240 211a 	movw	r1, #538	; 0x21a
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 fdf0 	bl	8002600 <WrByte>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f240 2119 	movw	r1, #537	; 0x219
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fde4 	bl	8002600 <WrByte>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f240 211b 	movw	r1, #539	; 0x21b
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 fdd8 	bl	8002600 <WrByte>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 fdcc 	bl	8002600 <WrByte>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	210c      	movs	r1, #12
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fdc1 	bl	8002600 <WrByte>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fdb5 	bl	8002600 <WrByte>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	2120      	movs	r1, #32
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 fdaa 	bl	8002600 <WrByte>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2206      	movs	r2, #6
 8001aba:	2120      	movs	r1, #32
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 fd9f 	bl	8002600 <WrByte>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2209      	movs	r2, #9
 8001ad0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 fd93 	bl	8002600 <WrByte>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aea:	4acb      	ldr	r2, [pc, #812]	; (8001e18 <vl53l5cx_init+0x7e4>)
 8001aec:	2100      	movs	r1, #0
 8001aee:	f000 fd9d 	bl	800262c <WrMulti>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	220a      	movs	r2, #10
 8001b00:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 fd7b 	bl	8002600 <WrByte>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	7dfb      	ldrb	r3, [r7, #23]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b1a:	4ac0      	ldr	r2, [pc, #768]	; (8001e1c <vl53l5cx_init+0x7e8>)
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	f000 fd85 	bl	800262c <WrMulti>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	220b      	movs	r2, #11
 8001b30:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 fd63 	bl	8002600 <WrByte>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001b4a:	4ab5      	ldr	r2, [pc, #724]	; (8001e20 <vl53l5cx_init+0x7ec>)
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	f000 fd6d 	bl	800262c <WrMulti>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fd4b 	bl	8002600 <WrByte>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 fd3f 	bl	8002600 <WrByte>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	220d      	movs	r2, #13
 8001b90:	2103      	movs	r1, #3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 fd34 	bl	8002600 <WrByte>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	7dfb      	ldrb	r3, [r7, #23]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fd28 	bl	8002600 <WrByte>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	7dfb      	ldrb	r3, [r7, #23]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8001bba:	2310      	movs	r3, #16
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	2310      	movs	r3, #16
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2321      	movs	r3, #33	; 0x21
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fa1c 	bl	8001006 <_vl53l5cx_poll_for_answer>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 fd0d 	bl	8002600 <WrByte>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	210c      	movs	r1, #12
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 fd02 	bl	8002600 <WrByte>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fcf6 	bl	8002600 <WrByte>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fcea 	bl	8002600 <WrByte>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f240 1115 	movw	r1, #277	; 0x115
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 fcde 	bl	8002600 <WrByte>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2242      	movs	r2, #66	; 0x42
 8001c52:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fcd2 	bl	8002600 <WrByte>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f240 1117 	movw	r1, #279	; 0x117
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fcc6 	bl	8002600 <WrByte>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	210b      	movs	r1, #11
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fcbb 	bl	8002600 <WrByte>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	7dfb      	ldrb	r3, [r7, #23]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	210c      	movs	r1, #12
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fcb0 	bl	8002600 <WrByte>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	7dfb      	ldrb	r3, [r7, #23]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	210b      	movs	r1, #11
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fca5 	bl	8002600 <WrByte>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 0x00);
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	23ff      	movs	r3, #255	; 0xff
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2306      	movs	r3, #6
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2101      	movs	r1, #1
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff f999 	bl	8001006 <_vl53l5cx_poll_for_answer>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fc8a 	bl	8002600 <WrByte>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461a      	mov	r2, r3
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	2328      	movs	r3, #40	; 0x28
 8001cfa:	4a4a      	ldr	r2, [pc, #296]	; (8001e24 <vl53l5cx_init+0x7f0>)
 8001cfc:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 8001d00:	f000 fc94 	bl	800262c <WrMulti>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 8001d0e:	2302      	movs	r3, #2
 8001d10:	9301      	str	r3, [sp, #4]
 8001d12:	23ff      	movs	r3, #255	; 0xff
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2104      	movs	r1, #4
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff f971 	bl	8001006 <_vl53l5cx_poll_for_answer>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461a      	mov	r2, r3
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8001d2e:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8001d36:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8001d3a:	f642 4104 	movw	r1, #11268	; 0x2c04
 8001d3e:	f000 fc8c 	bl	800265a <RdMulti>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f103 0020 	add.w	r0, r3, #32
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001d58:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f002 fe95 	bl	8004a8c <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8001d62:	2110      	movs	r1, #16
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff f9a1 	bl	80010ac <_vl53l5cx_send_offset_data>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d7a:	4a2b      	ldr	r2, [pc, #172]	; (8001e28 <vl53l5cx_init+0x7f4>)
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	4611      	mov	r1, r2
 8001d80:	f44f 7342 	mov.w	r3, #776	; 0x308
 8001d84:	461a      	mov	r2, r3
 8001d86:	f002 fe81 	bl	8004a8c <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8001d8a:	2110      	movs	r1, #16
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff faf5 	bl	800137c <_vl53l5cx_send_xtalk_data>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	7dfb      	ldrb	r3, [r7, #23]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5 firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699a      	ldr	r2, [r3, #24]
 8001da2:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8001da6:	f642 4134 	movw	r1, #11316	; 0x2c34
 8001daa:	f000 fc3f 	bl	800262c <WrMulti>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8001db8:	2303      	movs	r3, #3
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	23ff      	movs	r3, #255	; 0xff
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff f91c 	bl	8001006 <_vl53l5cx_poll_for_answer>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8001dd8:	f107 0110 	add.w	r1, r7, #16
 8001ddc:	2304      	movs	r3, #4
 8001dde:	f64c 7278 	movw	r2, #53112	; 0xcf78
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fb2c 	bl	8002440 <vl53l5cx_dci_write_data>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	7dfb      	ldrb	r3, [r7, #23]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8001df2:	f107 010c 	add.w	r1, r7, #12
 8001df6:	2304      	movs	r3, #4
 8001df8:	f64c 525c 	movw	r2, #52572	; 0xcd5c
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 fb1f 	bl	8002440 <vl53l5cx_dci_write_data>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_DCI_SINGLE_RANGE, 
			(uint16_t)sizeof(single_range));
	return status;
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	08005c58 	.word	0x08005c58
 8001e1c:	0800dc58 	.word	0x0800dc58
 8001e20:	08015c58 	.word	0x08015c58
 8001e24:	0801b32c 	.word	0x0801b32c
 8001e28:	0801b024 	.word	0x0801b024

08001e2c <vl53l5cx_set_i2c_address>:

uint8_t vl53l5cx_set_i2c_address(
		VL53L5CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 fbdb 	bl	8002600 <WrByte>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	887b      	ldrh	r3, [r7, #2]
 8001e58:	085b      	lsrs	r3, r3, #1
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2104      	movs	r1, #4
 8001e62:	f000 fbcd 	bl	8002600 <WrByte>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	801a      	strh	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 fbbe 	bl	8002600 <WrByte>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461a      	mov	r2, r3
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	73fb      	strb	r3, [r7, #15]

	return status;
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <vl53l5cx_check_data_ready>:
}

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	73fb      	strb	r3, [r7, #15]

	*p_isReady = 0;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	f000 fbcf 	bl	800265a <RdMulti>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7c1b      	ldrb	r3, [r3, #16]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d020      	beq.n	8001f16 <vl53l5cx_check_data_ready+0x7e>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8001eda:	2bff      	cmp	r3, #255	; 0xff
 8001edc:	d01b      	beq.n	8001f16 <vl53l5cx_check_data_ready+0x7e>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	d116      	bne.n	8001f16 <vl53l5cx_check_data_ready+0x7e>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8001eee:	f003 0305 	and.w	r3, r3, #5
 8001ef2:	2b05      	cmp	r3, #5
 8001ef4:	d10f      	bne.n	8001f16 <vl53l5cx_check_data_ready+0x7e>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <vl53l5cx_check_data_ready+0x7e>
			)
	{
		*p_isReady = (uint8_t)1;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	741a      	strb	r2, [r3, #16]
 8001f14:	e002      	b.n	8001f1c <vl53l5cx_check_data_ready+0x84>
	}
	else
	{
		*p_isReady = 0;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	74fb      	strb	r3, [r7, #19]
        union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= RdMulti(&(p_dev->platform), 0x0,
 8001f36:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), 0x0,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	2100      	movs	r1, #0
 8001f44:	f000 fb89 	bl	800265a <RdMulti>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	74fb      	strb	r3, [r7, #19]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4610      	mov	r0, r2
 8001f62:	f000 fb91 	bl	8002688 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8001f66:	2310      	movs	r3, #16
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	e0d9      	b.n	8002120 <vl53l5cx_get_ranging_data+0x1f8>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d915      	bls.n	8001fb2 <vl53l5cx_get_ranging_data+0x8a>
                    && (bh_ptr->type < (uint32_t)0xd))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b0c      	cmp	r3, #12
 8001f92:	d80e      	bhi.n	8001fb2 <vl53l5cx_get_ranging_data+0x8a>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	fb03 f302 	mul.w	r3, r3, r2
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	e005      	b.n	8001fbe <vl53l5cx_get_ranging_data+0x96>
		}
		else
		{
			msize = bh_ptr->size;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	617b      	str	r3, [r7, #20]
		}

		switch(bh_ptr->idx){
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	885b      	ldrh	r3, [r3, #2]
 8001fc2:	f24d 427c 	movw	r2, #54396	; 0xd47c
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	f000 8086 	beq.w	80020d8 <vl53l5cx_get_ranging_data+0x1b0>
 8001fcc:	f24d 427c 	movw	r2, #54396	; 0xd47c
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	f300 809d 	bgt.w	8002110 <vl53l5cx_get_ranging_data+0x1e8>
 8001fd6:	f24d 423c 	movw	r2, #54332	; 0xd43c
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d06e      	beq.n	80020bc <vl53l5cx_get_ranging_data+0x194>
 8001fde:	f24d 423c 	movw	r2, #54332	; 0xd43c
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	f300 8094 	bgt.w	8002110 <vl53l5cx_get_ranging_data+0x1e8>
 8001fe8:	f24d 323c 	movw	r2, #54076	; 0xd33c
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d057      	beq.n	80020a0 <vl53l5cx_get_ranging_data+0x178>
 8001ff0:	f24d 323c 	movw	r2, #54076	; 0xd33c
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	f300 808b 	bgt.w	8002110 <vl53l5cx_get_ranging_data+0x1e8>
 8001ffa:	f64c 72bc 	movw	r2, #53180	; 0xcfbc
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d040      	beq.n	8002084 <vl53l5cx_get_ranging_data+0x15c>
 8002002:	f64c 72bc 	movw	r2, #53180	; 0xcfbc
 8002006:	4293      	cmp	r3, r2
 8002008:	f300 8082 	bgt.w	8002110 <vl53l5cx_get_ranging_data+0x1e8>
 800200c:	f64c 727c 	movw	r2, #53116	; 0xcf7c
 8002010:	4293      	cmp	r3, r2
 8002012:	d029      	beq.n	8002068 <vl53l5cx_get_ranging_data+0x140>
 8002014:	f64c 727c 	movw	r2, #53116	; 0xcf7c
 8002018:	4293      	cmp	r3, r2
 800201a:	dc79      	bgt.n	8002110 <vl53l5cx_get_ranging_data+0x1e8>
 800201c:	f64c 4250 	movw	r2, #52304	; 0xcc50
 8002020:	4293      	cmp	r3, r2
 8002022:	d067      	beq.n	80020f4 <vl53l5cx_get_ranging_data+0x1cc>
 8002024:	f64c 4250 	movw	r2, #52304	; 0xcc50
 8002028:	4293      	cmp	r3, r2
 800202a:	dc71      	bgt.n	8002110 <vl53l5cx_get_ranging_data+0x1e8>
 800202c:	f245 42b4 	movw	r2, #21684	; 0x54b4
 8002030:	4293      	cmp	r3, r2
 8002032:	d004      	beq.n	800203e <vl53l5cx_get_ranging_data+0x116>
 8002034:	f245 42d0 	movw	r2, #21712	; 0x54d0
 8002038:	4293      	cmp	r3, r2
 800203a:	d009      	beq.n	8002050 <vl53l5cx_get_ranging_data+0x128>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 800203c:	e068      	b.n	8002110 <vl53l5cx_get_ranging_data+0x1e8>
				p_dev->temp_buffer[i + (uint32_t)(4 + 7)];
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	330b      	adds	r3, #11
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
				p_dev->streamcount =
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	741a      	strb	r2, [r3, #16]
				break;
 800204e:	e060      	b.n	8002112 <vl53l5cx_get_ranging_data+0x1ea>
				(void)memcpy(p_results->ambient_per_spad,
 8002050:	6838      	ldr	r0, [r7, #0]
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4619      	mov	r1, r3
 8002062:	f002 fd13 	bl	8004a8c <memcpy>
				break;
 8002066:	e054      	b.n	8002112 <vl53l5cx_get_ranging_data+0x1ea>
				(void)memcpy(p_results->nb_target_detected,
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	f503 7080 	add.w	r0, r3, #256	; 0x100
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3304      	adds	r3, #4
 8002072:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4619      	mov	r1, r3
 800207e:	f002 fd05 	bl	8004a8c <memcpy>
				break;
 8002082:	e046      	b.n	8002112 <vl53l5cx_get_ranging_data+0x1ea>
				(void)memcpy(p_results->signal_per_spad,
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	f503 70a0 	add.w	r0, r3, #320	; 0x140
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3304      	adds	r3, #4
 800208e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4619      	mov	r1, r3
 800209a:	f002 fcf7 	bl	8004a8c <memcpy>
				break;
 800209e:	e038      	b.n	8002112 <vl53l5cx_get_ranging_data+0x1ea>
				(void)memcpy(p_results->distance_mm,
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	f503 7010 	add.w	r0, r3, #576	; 0x240
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3304      	adds	r3, #4
 80020aa:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4619      	mov	r1, r3
 80020b6:	f002 fce9 	bl	8004a8c <memcpy>
				break;
 80020ba:	e02a      	b.n	8002112 <vl53l5cx_get_ranging_data+0x1ea>
				(void)memcpy(p_results->reflectance,
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3304      	adds	r3, #4
 80020c6:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4619      	mov	r1, r3
 80020d2:	f002 fcdb 	bl	8004a8c <memcpy>
				break;
 80020d6:	e01c      	b.n	8002112 <vl53l5cx_get_ranging_data+0x1ea>
				(void)memcpy(p_results->target_status,
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	f503 7040 	add.w	r0, r3, #768	; 0x300
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3304      	adds	r3, #4
 80020e2:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4619      	mov	r1, r3
 80020ee:	f002 fccd 	bl	8004a8c <memcpy>
				break;
 80020f2:	e00e      	b.n	8002112 <vl53l5cx_get_ranging_data+0x1ea>
				(void)memcpy(&p_results->motion_indicator,
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f503 7050 	add.w	r0, r3, #832	; 0x340
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4619      	mov	r1, r3
 800210a:	f002 fcbf 	bl	8004a8c <memcpy>
				break;
 800210e:	e000      	b.n	8002112 <vl53l5cx_get_ranging_data+0x1ea>
				break;
 8002110:	bf00      	nop
		}
		i += msize;
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	4413      	add	r3, r2
 8002118:	61fb      	str	r3, [r7, #28]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3304      	adds	r3, #4
 800211e:	61fb      	str	r3, [r7, #28]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
	for (i = (uint32_t)16; i 
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	429a      	cmp	r2, r3
 8002128:	f4ff af20 	bcc.w	8001f6c <vl53l5cx_get_ranging_data+0x44>
	}

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	e00b      	b.n	800214a <vl53l5cx_get_ranging_data+0x222>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213a:	0ad9      	lsrs	r1, r3, #11
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3301      	adds	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	2b3f      	cmp	r3, #63	; 0x3f
 800214e:	d9f0      	bls.n	8002132 <vl53l5cx_get_ranging_data+0x20a>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	e02d      	b.n	80021b2 <vl53l5cx_get_ranging_data+0x28a>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	f502 7290 	add.w	r2, r2, #288	; 0x120
 800215e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	da00      	bge.n	8002168 <vl53l5cx_get_ranging_data+0x240>
 8002166:	3303      	adds	r3, #3
 8002168:	109b      	asrs	r3, r3, #2
 800216a:	b219      	sxth	r1, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	f502 7290 	add.w	r2, r2, #288	; 0x120
 8002174:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if(p_results->distance_mm[i] < 0)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	f502 7290 	add.w	r2, r2, #288	; 0x120
 8002180:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002184:	2b00      	cmp	r3, #0
 8002186:	da06      	bge.n	8002196 <vl53l5cx_get_ranging_data+0x26e>
		{
			p_results->distance_mm[i] = 0;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	f502 7290 	add.w	r2, r2, #288	; 0x120
 8002190:	2100      	movs	r1, #0
 8002192:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	3250      	adds	r2, #80	; 0x50
 800219c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a0:	0ad9      	lsrs	r1, r3, #11
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	69fa      	ldr	r2, [r7, #28]
 80021a6:	3250      	adds	r2, #80	; 0x50
 80021a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	3301      	adds	r3, #1
 80021b0:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	2b3f      	cmp	r3, #63	; 0x3f
 80021b6:	d9ce      	bls.n	8002156 <vl53l5cx_get_ranging_data+0x22e>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	e01b      	b.n	80021f6 <vl53l5cx_get_ranging_data+0x2ce>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d110      	bne.n	80021f0 <vl53l5cx_get_ranging_data+0x2c8>
			for(j = 0; j < (uint32_t)
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	e00a      	b.n	80021ea <vl53l5cx_get_ranging_data+0x2c2>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	4413      	add	r3, r2
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	4413      	add	r3, r2
 80021de:	22ff      	movs	r2, #255	; 0xff
 80021e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	3301      	adds	r3, #1
 80021e8:	61bb      	str	r3, [r7, #24]
			for(j = 0; j < (uint32_t)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f1      	beq.n	80021d4 <vl53l5cx_get_ranging_data+0x2ac>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	3301      	adds	r3, #1
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	2b3f      	cmp	r3, #63	; 0x3f
 80021fa:	d9e0      	bls.n	80021be <vl53l5cx_get_ranging_data+0x296>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	e012      	b.n	8002228 <vl53l5cx_get_ranging_data+0x300>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	33d2      	adds	r3, #210	; 0xd2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <vl53l5cx_get_ranging_data+0x310>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	0bda      	lsrs	r2, r3, #15
 8002216:	6839      	ldr	r1, [r7, #0]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	33d2      	adds	r3, #210	; 0xd2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)32; i++)
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3301      	adds	r3, #1
 8002226:	61fb      	str	r3, [r7, #28]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	2b1f      	cmp	r3, #31
 800222c:	d9e9      	bls.n	8002202 <vl53l5cx_get_ranging_data+0x2da>
	}
#endif

	return status;
 800222e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	80008001 	.word	0x80008001

0800223c <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af04      	add	r7, sp, #16
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002252:	2301      	movs	r3, #1
 8002254:	9302      	str	r3, [sp, #8]
 8002256:	2301      	movs	r3, #1
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	1cfb      	adds	r3, r7, #3
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	2304      	movs	r3, #4
 8002260:	f245 4258 	movw	r2, #21592	; 0x5458
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f98a 	bl	800257e <vl53l5cx_dci_replace_data>
 800226a:	4603      	mov	r3, r0
 800226c:	461a      	mov	r2, r3
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	4313      	orrs	r3, r2
 8002272:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <vl53l5cx_set_ranging_mode>:
}

uint8_t vl53l5cx_set_ranging_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	460b      	mov	r3, r1
 8002288:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002298:	2308      	movs	r3, #8
 800229a:	f64a 5230 	movw	r2, #44336	; 0xad30
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f844 	bl	800232c <vl53l5cx_dci_read_data>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d002      	beq.n	80022ba <vl53l5cx_set_ranging_mode+0x3c>
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d00b      	beq.n	80022d0 <vl53l5cx_set_ranging_mode+0x52>
 80022b8:	e015      	b.n	80022e6 <vl53l5cx_set_ranging_mode+0x68>
	{
		case VL53L5CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2203      	movs	r2, #3
 80022c6:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x00;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
			break;
 80022ce:	e00d      	b.n	80022ec <vl53l5cx_set_ranging_mode+0x6e>

		case VL53L5CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2203      	movs	r2, #3
 80022d4:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x01;
 80022e0:	2301      	movs	r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
			break;
 80022e4:	e002      	b.n	80022ec <vl53l5cx_set_ranging_mode+0x6e>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 80022e6:	237f      	movs	r3, #127	; 0x7f
 80022e8:	73fb      	strb	r3, [r7, #15]
			break;
 80022ea:	bf00      	nop
	}

	status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80022f2:	2308      	movs	r3, #8
 80022f4:	f64a 5230 	movw	r2, #44336	; 0xad30
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f8a1 	bl	8002440 <vl53l5cx_dci_write_data>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	4313      	orrs	r3, r2
 8002306:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8002308:	f107 0108 	add.w	r1, r7, #8
 800230c:	2304      	movs	r3, #4
 800230e:	f64c 525c 	movw	r2, #52572	; 0xcd5c
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f894 	bl	8002440 <vl53l5cx_dci_write_data>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	4313      	orrs	r3, r2
 8002320:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_SINGLE_RANGE, 
                        (uint16_t)sizeof(single_range));

	return status;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08c      	sub	sp, #48	; 0x30
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8002340:	887b      	ldrh	r3, [r7, #2]
 8002342:	330c      	adds	r3, #12
 8002344:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8002346:	4a3d      	ldr	r2, [pc, #244]	; (800243c <vl53l5cx_dci_read_data+0x110>)
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	ca07      	ldmia	r2, {r0, r1, r2}
 800234e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 8002352:	887b      	ldrh	r3, [r7, #2]
 8002354:	f240 420c 	movw	r2, #1036	; 0x40c
 8002358:	4293      	cmp	r3, r2
 800235a:	d903      	bls.n	8002364 <vl53l5cx_dci_read_data+0x38>
	{
		status |= VL53L5CX_STATUS_ERROR;
 800235c:	23ff      	movs	r3, #255	; 0xff
 800235e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002362:	e065      	b.n	8002430 <vl53l5cx_dci_read_data+0x104>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	b2db      	uxtb	r3, r3
 800236a:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8002372:	887b      	ldrh	r3, [r7, #2]
 8002374:	111b      	asrs	r3, r3, #4
 8002376:	b2db      	uxtb	r3, r3
 8002378:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	b2db      	uxtb	r3, r3
 8002382:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f107 0214 	add.w	r2, r7, #20
 800238a:	230c      	movs	r3, #12
 800238c:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 8002390:	f000 f94c 	bl	800262c <WrMulti>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800239c:	4313      	orrs	r3, r2
 800239e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80023a2:	2303      	movs	r3, #3
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	23ff      	movs	r3, #255	; 0xff
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80023ae:	2201      	movs	r2, #1
 80023b0:	2104      	movs	r1, #4
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f7fe fe27 	bl	8001006 <_vl53l5cx_poll_for_answer>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 80023c6:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	f642 4104 	movw	r1, #11268	; 0x2c04
 80023d4:	f000 f941 	bl	800265a <RdMulti>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 80023ec:	887b      	ldrh	r3, [r7, #2]
 80023ee:	330c      	adds	r3, #12
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	4619      	mov	r1, r3
 80023f4:	4610      	mov	r0, r2
 80023f6:	f000 f947 	bl	8002688 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 80023fa:	2300      	movs	r3, #0
 80023fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80023fe:	e011      	b.n	8002424 <vl53l5cx_dci_read_data+0xf8>
			data[i] = p_dev->temp_buffer[i + 4];
 8002400:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002404:	1d1a      	adds	r2, r3, #4
 8002406:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800240a:	68b9      	ldr	r1, [r7, #8]
 800240c:	440b      	add	r3, r1
 800240e:	68f9      	ldr	r1, [r7, #12]
 8002410:	440a      	add	r2, r1
 8002412:	f892 2510 	ldrb.w	r2, [r2, #1296]	; 0x510
 8002416:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002418:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800241c:	b29b      	uxth	r3, r3
 800241e:	3301      	adds	r3, #1
 8002420:	b29b      	uxth	r3, r3
 8002422:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002424:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002428:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800242c:	429a      	cmp	r2, r3
 800242e:	dbe7      	blt.n	8002400 <vl53l5cx_dci_read_data+0xd4>
		}
	}

	return status;
 8002430:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8002434:	4618      	mov	r0, r3
 8002436:	3728      	adds	r7, #40	; 0x28
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	08005c34 	.word	0x08005c34

08002440 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08c      	sub	sp, #48	; 0x30
 8002444:	af02      	add	r7, sp, #8
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002458:	2300      	movs	r3, #0
 800245a:	753b      	strb	r3, [r7, #20]
 800245c:	2300      	movs	r3, #0
 800245e:	757b      	strb	r3, [r7, #21]
 8002460:	2300      	movs	r3, #0
 8002462:	75bb      	strb	r3, [r7, #22]
 8002464:	230f      	movs	r3, #15
 8002466:	75fb      	strb	r3, [r7, #23]
 8002468:	2305      	movs	r3, #5
 800246a:	763b      	strb	r3, [r7, #24]
 800246c:	2301      	movs	r3, #1
 800246e:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	3308      	adds	r3, #8
 8002474:	121b      	asrs	r3, r3, #8
 8002476:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002478:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 800247a:	887b      	ldrh	r3, [r7, #2]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	3308      	adds	r3, #8
 8002480:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002482:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 800248a:	3334      	adds	r3, #52	; 0x34
 800248c:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 800248e:	887b      	ldrh	r3, [r7, #2]
 8002490:	f240 420c 	movw	r2, #1036	; 0x40c
 8002494:	4293      	cmp	r3, r2
 8002496:	d903      	bls.n	80024a0 <vl53l5cx_dci_write_data+0x60>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 8002498:	23ff      	movs	r3, #255	; 0xff
 800249a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800249e:	e068      	b.n	8002572 <vl53l5cx_dci_write_data+0x132>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 80024ae:	887b      	ldrh	r3, [r7, #2]
 80024b0:	111b      	asrs	r3, r3, #4
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80024b6:	887b      	ldrh	r3, [r7, #2]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 80024c0:	887b      	ldrh	r3, [r7, #2]
 80024c2:	4619      	mov	r1, r3
 80024c4:	68b8      	ldr	r0, [r7, #8]
 80024c6:	f000 f8df 	bl	8002688 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80024d2:	e012      	b.n	80024fa <vl53l5cx_dci_write_data+0xba>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 80024d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	441a      	add	r2, r3
 80024dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80024e0:	3304      	adds	r3, #4
 80024e2:	7811      	ldrb	r1, [r2, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	460a      	mov	r2, r1
 80024ea:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 80024ee:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80024fa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80024fe:	2b00      	cmp	r3, #0
 8002500:	dae8      	bge.n	80024d4 <vl53l5cx_dci_write_data+0x94>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 800250c:	887b      	ldrh	r3, [r7, #2]
 800250e:	3304      	adds	r3, #4
 8002510:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	461a      	mov	r2, r3
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	cb03      	ldmia	r3!, {r0, r1}
 8002520:	6010      	str	r0, [r2, #0]
 8002522:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8002524:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 800252c:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 800252e:	330c      	adds	r3, #12
 8002530:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8002532:	f000 f87b 	bl	800262c <WrMulti>
 8002536:	4603      	mov	r3, r0
 8002538:	461a      	mov	r2, r3
 800253a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800253e:	4313      	orrs	r3, r2
 8002540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002544:	2303      	movs	r3, #3
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	23ff      	movs	r3, #255	; 0xff
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002550:	2201      	movs	r2, #1
 8002552:	2104      	movs	r1, #4
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f7fe fd56 	bl	8001006 <_vl53l5cx_poll_for_answer>
 800255a:	4603      	mov	r3, r0
 800255c:	461a      	mov	r2, r3
 800255e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002562:	4313      	orrs	r3, r2
 8002564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8002568:	887b      	ldrh	r3, [r7, #2]
 800256a:	4619      	mov	r1, r3
 800256c:	68b8      	ldr	r0, [r7, #8]
 800256e:	f000 f88b 	bl	8002688 <SwapBuffer>
	}

	return status;
 8002572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002576:	4618      	mov	r0, r3
 8002578:	3728      	adds	r7, #40	; 0x28
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b086      	sub	sp, #24
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 8002590:	887b      	ldrh	r3, [r7, #2]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f7ff fec8 	bl	800232c <vl53l5cx_dci_read_data>
 800259c:	4603      	mov	r3, r0
 800259e:	461a      	mov	r2, r3
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 80025a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	4413      	add	r3, r2
 80025ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025ae:	6a39      	ldr	r1, [r7, #32]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 fa6b 	bl	8004a8c <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 80025b6:	887b      	ldrh	r3, [r7, #2]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68b9      	ldr	r1, [r7, #8]
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f7ff ff3f 	bl	8002440 <vl53l5cx_dci_write_data>
 80025c2:	4603      	mov	r3, r0
 80025c4:	461a      	mov	r2, r3
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	75fb      	strb	r3, [r7, #23]

	return status;
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <RdByte>:

uint8_t RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 80025d6:	b590      	push	{r4, r7, lr}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	460b      	mov	r3, r1
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	689c      	ldr	r4, [r3, #8]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8818      	ldrh	r0, [r3, #0]
 80025ec:	8979      	ldrh	r1, [r7, #10]
 80025ee:	2301      	movs	r3, #1
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	47a0      	blx	r4
 80025f4:	4603      	mov	r3, r0
 80025f6:	b2db      	uxtb	r3, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd90      	pop	{r4, r7, pc}

08002600 <WrByte>:

uint8_t WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
 800260c:	4613      	mov	r3, r2
 800260e:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685c      	ldr	r4, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	8818      	ldrh	r0, [r3, #0]
 8002618:	1c7a      	adds	r2, r7, #1
 800261a:	8879      	ldrh	r1, [r7, #2]
 800261c:	2301      	movs	r3, #1
 800261e:	47a0      	blx	r4
 8002620:	4603      	mov	r3, r0
 8002622:	b2db      	uxtb	r3, r3
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bd90      	pop	{r4, r7, pc}

0800262c <WrMulti>:
uint8_t WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	460b      	mov	r3, r1
 800263a:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	685c      	ldr	r4, [r3, #4]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8818      	ldrh	r0, [r3, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	8979      	ldrh	r1, [r7, #10]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	47a0      	blx	r4
 800264e:	4603      	mov	r3, r0
 8002650:	b2db      	uxtb	r3, r3
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bd90      	pop	{r4, r7, pc}

0800265a <RdMulti>:
uint8_t RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 800265a:	b590      	push	{r4, r7, lr}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	460b      	mov	r3, r1
 8002668:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	689c      	ldr	r4, [r3, #8]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8818      	ldrh	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	b29b      	uxth	r3, r3
 8002676:	8979      	ldrh	r1, [r7, #10]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	47a0      	blx	r4
 800267c:	4603      	mov	r3, r0
 800267e:	b2db      	uxtb	r3, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bd90      	pop	{r4, r7, pc}

08002688 <SwapBuffer>:

void SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;

  /* Example of possible implementation using <string.h> */
  for(i = 0; i < size; i = i + 4)
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	e021      	b.n	80026de <SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3301      	adds	r3, #1
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	440b      	add	r3, r1
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	041b      	lsls	r3, r3, #16
 80026b0:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3302      	adds	r3, #2
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	440b      	add	r3, r1
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	3203      	adds	r2, #3
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	440a      	add	r2, r1
 80026c8:	7812      	ldrb	r2, [r2, #0]
 80026ca:	4313      	orrs	r3, r2
    tmp = (
 80026cc:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3304      	adds	r3, #4
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d3d9      	bcc.n	800269a <SwapBuffer+0x12>
  }
}
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <WaitMs>:

uint8_t WaitMs(
		VL53L5CX_Platform *p_platform,
		uint32_t TimeMs)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	4798      	blx	r3
 8002704:	4603      	mov	r3, r0
 8002706:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 8002708:	bf00      	nop
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	4798      	blx	r3
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d8f5      	bhi.n	800270a <WaitMs+0x16>

  return 0;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HAL_Init+0x40>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <HAL_Init+0x40>)
 8002732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_Init+0x40>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <HAL_Init+0x40>)
 800273e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_Init+0x40>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a07      	ldr	r2, [pc, #28]	; (8002768 <HAL_Init+0x40>)
 800274a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002750:	2003      	movs	r0, #3
 8002752:	f000 f931 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002756:	2000      	movs	r0, #0
 8002758:	f000 f808 	bl	800276c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800275c:	f7fe f9be 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023c00 	.word	0x40023c00

0800276c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_InitTick+0x54>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_InitTick+0x58>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002782:	fbb3 f3f1 	udiv	r3, r3, r1
 8002786:	fbb2 f3f3 	udiv	r3, r2, r3
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f93b 	bl	8002a06 <HAL_SYSTICK_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e00e      	b.n	80027b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b0f      	cmp	r3, #15
 800279e:	d80a      	bhi.n	80027b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a0:	2200      	movs	r2, #0
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	f000 f911 	bl	80029ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027ac:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <HAL_InitTick+0x5c>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e000      	b.n	80027b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000000 	.word	0x20000000
 80027c4:	20000008 	.word	0x20000008
 80027c8:	20000004 	.word	0x20000004

080027cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_IncTick+0x20>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_IncTick+0x24>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <HAL_IncTick+0x24>)
 80027de:	6013      	str	r3, [r2, #0]
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20000008 	.word	0x20000008
 80027f0:	20000134 	.word	0x20000134

080027f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return uwTick;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_GetTick+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000134 	.word	0x20000134

0800280c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002814:	f7ff ffee 	bl	80027f4 <HAL_GetTick>
 8002818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d005      	beq.n	8002832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002826:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_Delay+0x44>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002832:	bf00      	nop
 8002834:	f7ff ffde 	bl	80027f4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	429a      	cmp	r2, r3
 8002842:	d8f7      	bhi.n	8002834 <HAL_Delay+0x28>
  {
  }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000008 	.word	0x20000008

08002854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002870:	4013      	ands	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800287c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002886:	4a04      	ldr	r2, [pc, #16]	; (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	60d3      	str	r3, [r2, #12]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a0:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <__NVIC_GetPriorityGrouping+0x18>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	f003 0307 	and.w	r3, r3, #7
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	db0a      	blt.n	80028e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	490c      	ldr	r1, [pc, #48]	; (8002904 <__NVIC_SetPriority+0x4c>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	440b      	add	r3, r1
 80028dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e0:	e00a      	b.n	80028f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <__NVIC_SetPriority+0x50>)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	3b04      	subs	r3, #4
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	440b      	add	r3, r1
 80028f6:	761a      	strb	r2, [r3, #24]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000e100 	.word	0xe000e100
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f1c3 0307 	rsb	r3, r3, #7
 8002926:	2b04      	cmp	r3, #4
 8002928:	bf28      	it	cs
 800292a:	2304      	movcs	r3, #4
 800292c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3304      	adds	r3, #4
 8002932:	2b06      	cmp	r3, #6
 8002934:	d902      	bls.n	800293c <NVIC_EncodePriority+0x30>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3b03      	subs	r3, #3
 800293a:	e000      	b.n	800293e <NVIC_EncodePriority+0x32>
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	f04f 32ff 	mov.w	r2, #4294967295
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	401a      	ands	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43d9      	mvns	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	4313      	orrs	r3, r2
         );
}
 8002966:	4618      	mov	r0, r3
 8002968:	3724      	adds	r7, #36	; 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002984:	d301      	bcc.n	800298a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002986:	2301      	movs	r3, #1
 8002988:	e00f      	b.n	80029aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <SysTick_Config+0x40>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002992:	210f      	movs	r1, #15
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	f7ff ff8e 	bl	80028b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <SysTick_Config+0x40>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <SysTick_Config+0x40>)
 80029a4:	2207      	movs	r2, #7
 80029a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000e010 	.word	0xe000e010

080029b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff47 	bl	8002854 <__NVIC_SetPriorityGrouping>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e0:	f7ff ff5c 	bl	800289c <__NVIC_GetPriorityGrouping>
 80029e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	6978      	ldr	r0, [r7, #20]
 80029ec:	f7ff ff8e 	bl	800290c <NVIC_EncodePriority>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff5d 	bl	80028b8 <__NVIC_SetPriority>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff ffb0 	bl	8002974 <SysTick_Config>
 8002a14:	4603      	mov	r3, r0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	e159      	b.n	8002cf0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	f040 8148 	bne.w	8002cea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d005      	beq.n	8002a72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d130      	bne.n	8002ad4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 0201 	and.w	r2, r3, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d017      	beq.n	8002b10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d123      	bne.n	8002b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	08da      	lsrs	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3208      	adds	r2, #8
 8002b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	220f      	movs	r2, #15
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	08da      	lsrs	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3208      	adds	r2, #8
 8002b5e:	69b9      	ldr	r1, [r7, #24]
 8002b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0203 	and.w	r2, r3, #3
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80a2 	beq.w	8002cea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b57      	ldr	r3, [pc, #348]	; (8002d08 <HAL_GPIO_Init+0x2e8>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a56      	ldr	r2, [pc, #344]	; (8002d08 <HAL_GPIO_Init+0x2e8>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b54      	ldr	r3, [pc, #336]	; (8002d08 <HAL_GPIO_Init+0x2e8>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bc2:	4a52      	ldr	r2, [pc, #328]	; (8002d0c <HAL_GPIO_Init+0x2ec>)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	089b      	lsrs	r3, r3, #2
 8002bc8:	3302      	adds	r3, #2
 8002bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	220f      	movs	r2, #15
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a49      	ldr	r2, [pc, #292]	; (8002d10 <HAL_GPIO_Init+0x2f0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d019      	beq.n	8002c22 <HAL_GPIO_Init+0x202>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a48      	ldr	r2, [pc, #288]	; (8002d14 <HAL_GPIO_Init+0x2f4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_GPIO_Init+0x1fe>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a47      	ldr	r2, [pc, #284]	; (8002d18 <HAL_GPIO_Init+0x2f8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00d      	beq.n	8002c1a <HAL_GPIO_Init+0x1fa>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a46      	ldr	r2, [pc, #280]	; (8002d1c <HAL_GPIO_Init+0x2fc>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d007      	beq.n	8002c16 <HAL_GPIO_Init+0x1f6>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a45      	ldr	r2, [pc, #276]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d101      	bne.n	8002c12 <HAL_GPIO_Init+0x1f2>
 8002c0e:	2304      	movs	r3, #4
 8002c10:	e008      	b.n	8002c24 <HAL_GPIO_Init+0x204>
 8002c12:	2307      	movs	r3, #7
 8002c14:	e006      	b.n	8002c24 <HAL_GPIO_Init+0x204>
 8002c16:	2303      	movs	r3, #3
 8002c18:	e004      	b.n	8002c24 <HAL_GPIO_Init+0x204>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e002      	b.n	8002c24 <HAL_GPIO_Init+0x204>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_GPIO_Init+0x204>
 8002c22:	2300      	movs	r3, #0
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	f002 0203 	and.w	r2, r2, #3
 8002c2a:	0092      	lsls	r2, r2, #2
 8002c2c:	4093      	lsls	r3, r2
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c34:	4935      	ldr	r1, [pc, #212]	; (8002d0c <HAL_GPIO_Init+0x2ec>)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c42:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c66:	4a2f      	ldr	r2, [pc, #188]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c6c:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c90:	4a24      	ldr	r2, [pc, #144]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c96:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cba:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc0:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce4:	4a0f      	ldr	r2, [pc, #60]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3301      	adds	r3, #1
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b0f      	cmp	r3, #15
 8002cf4:	f67f aea2 	bls.w	8002a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	3724      	adds	r7, #36	; 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	40020000 	.word	0x40020000
 8002d14:	40020400 	.word	0x40020400
 8002d18:	40020800 	.word	0x40020800
 8002d1c:	40020c00 	.word	0x40020c00
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40013c00 	.word	0x40013c00

08002d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	807b      	strh	r3, [r7, #2]
 8002d34:	4613      	mov	r3, r2
 8002d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d38:	787b      	ldrb	r3, [r7, #1]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d3e:	887a      	ldrh	r2, [r7, #2]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d44:	e003      	b.n	8002d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d46:	887b      	ldrh	r3, [r7, #2]
 8002d48:	041a      	lsls	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	619a      	str	r2, [r3, #24]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e12b      	b.n	8002fc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f92e 	bl	8002fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2224      	movs	r2, #36	; 0x24
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dc0:	f001 fbfc 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8002dc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4a81      	ldr	r2, [pc, #516]	; (8002fd0 <HAL_I2C_Init+0x274>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d807      	bhi.n	8002de0 <HAL_I2C_Init+0x84>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4a80      	ldr	r2, [pc, #512]	; (8002fd4 <HAL_I2C_Init+0x278>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	bf94      	ite	ls
 8002dd8:	2301      	movls	r3, #1
 8002dda:	2300      	movhi	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e006      	b.n	8002dee <HAL_I2C_Init+0x92>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4a7d      	ldr	r2, [pc, #500]	; (8002fd8 <HAL_I2C_Init+0x27c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	bf94      	ite	ls
 8002de8:	2301      	movls	r3, #1
 8002dea:	2300      	movhi	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e0e7      	b.n	8002fc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a78      	ldr	r2, [pc, #480]	; (8002fdc <HAL_I2C_Init+0x280>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0c9b      	lsrs	r3, r3, #18
 8002e00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	4a6a      	ldr	r2, [pc, #424]	; (8002fd0 <HAL_I2C_Init+0x274>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d802      	bhi.n	8002e30 <HAL_I2C_Init+0xd4>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	e009      	b.n	8002e44 <HAL_I2C_Init+0xe8>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e36:	fb02 f303 	mul.w	r3, r2, r3
 8002e3a:	4a69      	ldr	r2, [pc, #420]	; (8002fe0 <HAL_I2C_Init+0x284>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	099b      	lsrs	r3, r3, #6
 8002e42:	3301      	adds	r3, #1
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	495c      	ldr	r1, [pc, #368]	; (8002fd0 <HAL_I2C_Init+0x274>)
 8002e60:	428b      	cmp	r3, r1
 8002e62:	d819      	bhi.n	8002e98 <HAL_I2C_Init+0x13c>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1e59      	subs	r1, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e72:	1c59      	adds	r1, r3, #1
 8002e74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e78:	400b      	ands	r3, r1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_I2C_Init+0x138>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1e59      	subs	r1, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e92:	e051      	b.n	8002f38 <HAL_I2C_Init+0x1dc>
 8002e94:	2304      	movs	r3, #4
 8002e96:	e04f      	b.n	8002f38 <HAL_I2C_Init+0x1dc>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d111      	bne.n	8002ec4 <HAL_I2C_Init+0x168>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1e58      	subs	r0, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	440b      	add	r3, r1
 8002eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e012      	b.n	8002eea <HAL_I2C_Init+0x18e>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	1e58      	subs	r0, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6859      	ldr	r1, [r3, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	0099      	lsls	r1, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_I2C_Init+0x196>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e022      	b.n	8002f38 <HAL_I2C_Init+0x1dc>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10e      	bne.n	8002f18 <HAL_I2C_Init+0x1bc>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1e58      	subs	r0, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6859      	ldr	r1, [r3, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	440b      	add	r3, r1
 8002f08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f16:	e00f      	b.n	8002f38 <HAL_I2C_Init+0x1dc>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1e58      	subs	r0, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	0099      	lsls	r1, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	6809      	ldr	r1, [r1, #0]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6911      	ldr	r1, [r2, #16]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68d2      	ldr	r2, [r2, #12]
 8002f72:	4311      	orrs	r1, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	000186a0 	.word	0x000186a0
 8002fd4:	001e847f 	.word	0x001e847f
 8002fd8:	003d08ff 	.word	0x003d08ff
 8002fdc:	431bde83 	.word	0x431bde83
 8002fe0:	10624dd3 	.word	0x10624dd3

08002fe4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	4608      	mov	r0, r1
 8003002:	4611      	mov	r1, r2
 8003004:	461a      	mov	r2, r3
 8003006:	4603      	mov	r3, r0
 8003008:	817b      	strh	r3, [r7, #10]
 800300a:	460b      	mov	r3, r1
 800300c:	813b      	strh	r3, [r7, #8]
 800300e:	4613      	mov	r3, r2
 8003010:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003012:	f7ff fbef 	bl	80027f4 <HAL_GetTick>
 8003016:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b20      	cmp	r3, #32
 8003022:	f040 80d9 	bne.w	80031d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	2319      	movs	r3, #25
 800302c:	2201      	movs	r2, #1
 800302e:	496d      	ldr	r1, [pc, #436]	; (80031e4 <HAL_I2C_Mem_Write+0x1ec>)
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 fc99 	bl	8003968 <I2C_WaitOnFlagUntilTimeout>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
 800303e:	e0cc      	b.n	80031da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_I2C_Mem_Write+0x56>
 800304a:	2302      	movs	r3, #2
 800304c:	e0c5      	b.n	80031da <HAL_I2C_Mem_Write+0x1e2>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d007      	beq.n	8003074 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003082:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2221      	movs	r2, #33	; 0x21
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2240      	movs	r2, #64	; 0x40
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a3a      	ldr	r2, [r7, #32]
 800309e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4a4d      	ldr	r2, [pc, #308]	; (80031e8 <HAL_I2C_Mem_Write+0x1f0>)
 80030b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030b6:	88f8      	ldrh	r0, [r7, #6]
 80030b8:	893a      	ldrh	r2, [r7, #8]
 80030ba:	8979      	ldrh	r1, [r7, #10]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	4603      	mov	r3, r0
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 fad0 	bl	800366c <I2C_RequestMemoryWrite>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d052      	beq.n	8003178 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e081      	b.n	80031da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fd1a 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00d      	beq.n	8003102 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d107      	bne.n	80030fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e06b      	b.n	80031da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	781a      	ldrb	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b04      	cmp	r3, #4
 800313e:	d11b      	bne.n	8003178 <HAL_I2C_Mem_Write+0x180>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003144:	2b00      	cmp	r3, #0
 8003146:	d017      	beq.n	8003178 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	781a      	ldrb	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1aa      	bne.n	80030d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fd06 	bl	8003b96 <I2C_WaitOnBTFFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00d      	beq.n	80031ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	2b04      	cmp	r3, #4
 8003196:	d107      	bne.n	80031a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e016      	b.n	80031da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	e000      	b.n	80031da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031d8:	2302      	movs	r3, #2
  }
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	00100002 	.word	0x00100002
 80031e8:	ffff0000 	.word	0xffff0000

080031ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08c      	sub	sp, #48	; 0x30
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	4608      	mov	r0, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	461a      	mov	r2, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	817b      	strh	r3, [r7, #10]
 80031fe:	460b      	mov	r3, r1
 8003200:	813b      	strh	r3, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003206:	f7ff faf5 	bl	80027f4 <HAL_GetTick>
 800320a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b20      	cmp	r3, #32
 8003216:	f040 8208 	bne.w	800362a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	2319      	movs	r3, #25
 8003220:	2201      	movs	r2, #1
 8003222:	497b      	ldr	r1, [pc, #492]	; (8003410 <HAL_I2C_Mem_Read+0x224>)
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fb9f 	bl	8003968 <I2C_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
 8003232:	e1fb      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_I2C_Mem_Read+0x56>
 800323e:	2302      	movs	r3, #2
 8003240:	e1f4      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d007      	beq.n	8003268 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003276:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2222      	movs	r2, #34	; 0x22
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2240      	movs	r2, #64	; 0x40
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003292:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003298:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a5b      	ldr	r2, [pc, #364]	; (8003414 <HAL_I2C_Mem_Read+0x228>)
 80032a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032aa:	88f8      	ldrh	r0, [r7, #6]
 80032ac:	893a      	ldrh	r2, [r7, #8]
 80032ae:	8979      	ldrh	r1, [r7, #10]
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	4603      	mov	r3, r0
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 fa6c 	bl	8003798 <I2C_RequestMemoryRead>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e1b0      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d113      	bne.n	80032fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d2:	2300      	movs	r3, #0
 80032d4:	623b      	str	r3, [r7, #32]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	623b      	str	r3, [r7, #32]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	623b      	str	r3, [r7, #32]
 80032e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e184      	b.n	8003604 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d11b      	bne.n	800333a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003310:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e164      	b.n	8003604 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	2b02      	cmp	r3, #2
 8003340:	d11b      	bne.n	800337a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003350:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003360:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	e144      	b.n	8003604 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003390:	e138      	b.n	8003604 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003396:	2b03      	cmp	r3, #3
 8003398:	f200 80f1 	bhi.w	800357e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d123      	bne.n	80033ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fc35 	bl	8003c18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e139      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033ea:	e10b      	b.n	8003604 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d14e      	bne.n	8003492 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fa:	2200      	movs	r2, #0
 80033fc:	4906      	ldr	r1, [pc, #24]	; (8003418 <HAL_I2C_Mem_Read+0x22c>)
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 fab2 	bl	8003968 <I2C_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e10e      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
 800340e:	bf00      	nop
 8003410:	00100002 	.word	0x00100002
 8003414:	ffff0000 	.word	0xffff0000
 8003418:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003490:	e0b8      	b.n	8003604 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	2200      	movs	r2, #0
 800349a:	4966      	ldr	r1, [pc, #408]	; (8003634 <HAL_I2C_Mem_Read+0x448>)
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fa63 	bl	8003968 <I2C_WaitOnFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0bf      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	2200      	movs	r2, #0
 80034f6:	494f      	ldr	r1, [pc, #316]	; (8003634 <HAL_I2C_Mem_Read+0x448>)
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 fa35 	bl	8003968 <I2C_WaitOnFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e091      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003516:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800357c:	e042      	b.n	8003604 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800357e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003580:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fb48 	bl	8003c18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e04c      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d118      	bne.n	8003604 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	f47f aec2 	bne.w	8003392 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e000      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800362a:	2302      	movs	r3, #2
  }
}
 800362c:	4618      	mov	r0, r3
 800362e:	3728      	adds	r7, #40	; 0x28
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	00010004 	.word	0x00010004

08003638 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003646:	b2db      	uxtb	r3, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	4608      	mov	r0, r1
 8003676:	4611      	mov	r1, r2
 8003678:	461a      	mov	r2, r3
 800367a:	4603      	mov	r3, r0
 800367c:	817b      	strh	r3, [r7, #10]
 800367e:	460b      	mov	r3, r1
 8003680:	813b      	strh	r3, [r7, #8]
 8003682:	4613      	mov	r3, r2
 8003684:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003694:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	2200      	movs	r2, #0
 800369e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f960 	bl	8003968 <I2C_WaitOnFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00d      	beq.n	80036ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036bc:	d103      	bne.n	80036c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e05f      	b.n	800378a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ca:	897b      	ldrh	r3, [r7, #10]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	6a3a      	ldr	r2, [r7, #32]
 80036de:	492d      	ldr	r1, [pc, #180]	; (8003794 <I2C_RequestMemoryWrite+0x128>)
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 f998 	bl	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e04c      	b.n	800378a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003708:	6a39      	ldr	r1, [r7, #32]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 fa02 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00d      	beq.n	8003732 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	2b04      	cmp	r3, #4
 800371c:	d107      	bne.n	800372e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e02b      	b.n	800378a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d105      	bne.n	8003744 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003738:	893b      	ldrh	r3, [r7, #8]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	611a      	str	r2, [r3, #16]
 8003742:	e021      	b.n	8003788 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003744:	893b      	ldrh	r3, [r7, #8]
 8003746:	0a1b      	lsrs	r3, r3, #8
 8003748:	b29b      	uxth	r3, r3
 800374a:	b2da      	uxtb	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003754:	6a39      	ldr	r1, [r7, #32]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f9dc 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00d      	beq.n	800377e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b04      	cmp	r3, #4
 8003768:	d107      	bne.n	800377a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003778:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e005      	b.n	800378a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800377e:	893b      	ldrh	r3, [r7, #8]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	00010002 	.word	0x00010002

08003798 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af02      	add	r7, sp, #8
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	4608      	mov	r0, r1
 80037a2:	4611      	mov	r1, r2
 80037a4:	461a      	mov	r2, r3
 80037a6:	4603      	mov	r3, r0
 80037a8:	817b      	strh	r3, [r7, #10]
 80037aa:	460b      	mov	r3, r1
 80037ac:	813b      	strh	r3, [r7, #8]
 80037ae:	4613      	mov	r3, r2
 80037b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	2200      	movs	r2, #0
 80037da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f8c2 	bl	8003968 <I2C_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00d      	beq.n	8003806 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f8:	d103      	bne.n	8003802 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e0aa      	b.n	800395c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003806:	897b      	ldrh	r3, [r7, #10]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003814:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	6a3a      	ldr	r2, [r7, #32]
 800381a:	4952      	ldr	r1, [pc, #328]	; (8003964 <I2C_RequestMemoryRead+0x1cc>)
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f8fa 	bl	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e097      	b.n	800395c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003844:	6a39      	ldr	r1, [r7, #32]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f964 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00d      	beq.n	800386e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	2b04      	cmp	r3, #4
 8003858:	d107      	bne.n	800386a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003868:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e076      	b.n	800395c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d105      	bne.n	8003880 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003874:	893b      	ldrh	r3, [r7, #8]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	611a      	str	r2, [r3, #16]
 800387e:	e021      	b.n	80038c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003880:	893b      	ldrh	r3, [r7, #8]
 8003882:	0a1b      	lsrs	r3, r3, #8
 8003884:	b29b      	uxth	r3, r3
 8003886:	b2da      	uxtb	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800388e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003890:	6a39      	ldr	r1, [r7, #32]
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f93e 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d107      	bne.n	80038b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e050      	b.n	800395c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038ba:	893b      	ldrh	r3, [r7, #8]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c6:	6a39      	ldr	r1, [r7, #32]
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f923 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00d      	beq.n	80038f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d107      	bne.n	80038ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e035      	b.n	800395c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	2200      	movs	r2, #0
 8003908:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 f82b 	bl	8003968 <I2C_WaitOnFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00d      	beq.n	8003934 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003926:	d103      	bne.n	8003930 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800392e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e013      	b.n	800395c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003934:	897b      	ldrh	r3, [r7, #10]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	b2da      	uxtb	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	6a3a      	ldr	r2, [r7, #32]
 8003948:	4906      	ldr	r1, [pc, #24]	; (8003964 <I2C_RequestMemoryRead+0x1cc>)
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f863 	bl	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	00010002 	.word	0x00010002

08003968 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003978:	e025      	b.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d021      	beq.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003982:	f7fe ff37 	bl	80027f4 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d302      	bcc.n	8003998 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d116      	bne.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f043 0220 	orr.w	r2, r3, #32
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e023      	b.n	8003a0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d10d      	bne.n	80039ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	43da      	mvns	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4013      	ands	r3, r2
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bf0c      	ite	eq
 80039e2:	2301      	moveq	r3, #1
 80039e4:	2300      	movne	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	e00c      	b.n	8003a06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	43da      	mvns	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4013      	ands	r3, r2
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	bf0c      	ite	eq
 80039fe:	2301      	moveq	r3, #1
 8003a00:	2300      	movne	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d0b6      	beq.n	800397a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a24:	e051      	b.n	8003aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a34:	d123      	bne.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f043 0204 	orr.w	r2, r3, #4
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e046      	b.n	8003b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d021      	beq.n	8003aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a86:	f7fe feb5 	bl	80027f4 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d302      	bcc.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d116      	bne.n	8003aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f043 0220 	orr.w	r2, r3, #32
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e020      	b.n	8003b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	0c1b      	lsrs	r3, r3, #16
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d10c      	bne.n	8003aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	43da      	mvns	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	bf14      	ite	ne
 8003ae6:	2301      	movne	r3, #1
 8003ae8:	2300      	moveq	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	e00b      	b.n	8003b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	43da      	mvns	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	4013      	ands	r3, r2
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	bf14      	ite	ne
 8003b00:	2301      	movne	r3, #1
 8003b02:	2300      	moveq	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d18d      	bne.n	8003a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b20:	e02d      	b.n	8003b7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f8ce 	bl	8003cc4 <I2C_IsAcknowledgeFailed>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e02d      	b.n	8003b8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d021      	beq.n	8003b7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fe fe5b 	bl	80027f4 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d116      	bne.n	8003b7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f043 0220 	orr.w	r2, r3, #32
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e007      	b.n	8003b8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b88:	2b80      	cmp	r3, #128	; 0x80
 8003b8a:	d1ca      	bne.n	8003b22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ba2:	e02d      	b.n	8003c00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f88d 	bl	8003cc4 <I2C_IsAcknowledgeFailed>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e02d      	b.n	8003c10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d021      	beq.n	8003c00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbc:	f7fe fe1a 	bl	80027f4 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d302      	bcc.n	8003bd2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d116      	bne.n	8003c00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f043 0220 	orr.w	r2, r3, #32
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e007      	b.n	8003c10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d1ca      	bne.n	8003ba4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c24:	e042      	b.n	8003cac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d119      	bne.n	8003c68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0210 	mvn.w	r2, #16
 8003c3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e029      	b.n	8003cbc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c68:	f7fe fdc4 	bl	80027f4 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d302      	bcc.n	8003c7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d116      	bne.n	8003cac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e007      	b.n	8003cbc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	d1b5      	bne.n	8003c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cda:	d11b      	bne.n	8003d14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ce4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	f043 0204 	orr.w	r2, r3, #4
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e264      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d075      	beq.n	8003e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d42:	4ba3      	ldr	r3, [pc, #652]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d00c      	beq.n	8003d68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4e:	4ba0      	ldr	r3, [pc, #640]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d112      	bne.n	8003d80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d5a:	4b9d      	ldr	r3, [pc, #628]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d68:	4b99      	ldr	r3, [pc, #612]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05b      	beq.n	8003e2c <HAL_RCC_OscConfig+0x108>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d157      	bne.n	8003e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e23f      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d88:	d106      	bne.n	8003d98 <HAL_RCC_OscConfig+0x74>
 8003d8a:	4b91      	ldr	r3, [pc, #580]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a90      	ldr	r2, [pc, #576]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e01d      	b.n	8003dd4 <HAL_RCC_OscConfig+0xb0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x98>
 8003da2:	4b8b      	ldr	r3, [pc, #556]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a8a      	ldr	r2, [pc, #552]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b88      	ldr	r3, [pc, #544]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a87      	ldr	r2, [pc, #540]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0xb0>
 8003dbc:	4b84      	ldr	r3, [pc, #528]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a83      	ldr	r2, [pc, #524]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b81      	ldr	r3, [pc, #516]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a80      	ldr	r2, [pc, #512]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fd0a 	bl	80027f4 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fe fd06 	bl	80027f4 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e204      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b76      	ldr	r3, [pc, #472]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0xc0>
 8003e02:	e014      	b.n	8003e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fe fcf6 	bl	80027f4 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fe fcf2 	bl	80027f4 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	; 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e1f0      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	4b6c      	ldr	r3, [pc, #432]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0xe8>
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d063      	beq.n	8003f02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e3a:	4b65      	ldr	r3, [pc, #404]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00b      	beq.n	8003e5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e46:	4b62      	ldr	r3, [pc, #392]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d11c      	bne.n	8003e8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e52:	4b5f      	ldr	r3, [pc, #380]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d116      	bne.n	8003e8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5e:	4b5c      	ldr	r3, [pc, #368]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <HAL_RCC_OscConfig+0x152>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d001      	beq.n	8003e76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e1c4      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e76:	4b56      	ldr	r3, [pc, #344]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4952      	ldr	r1, [pc, #328]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8a:	e03a      	b.n	8003f02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d020      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e94:	4b4f      	ldr	r3, [pc, #316]	; (8003fd4 <HAL_RCC_OscConfig+0x2b0>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9a:	f7fe fcab 	bl	80027f4 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea2:	f7fe fca7 	bl	80027f4 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e1a5      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb4:	4b46      	ldr	r3, [pc, #280]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec0:	4b43      	ldr	r3, [pc, #268]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	4940      	ldr	r1, [pc, #256]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	600b      	str	r3, [r1, #0]
 8003ed4:	e015      	b.n	8003f02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ed6:	4b3f      	ldr	r3, [pc, #252]	; (8003fd4 <HAL_RCC_OscConfig+0x2b0>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fe fc8a 	bl	80027f4 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee4:	f7fe fc86 	bl	80027f4 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e184      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef6:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d030      	beq.n	8003f70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d016      	beq.n	8003f44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f16:	4b30      	ldr	r3, [pc, #192]	; (8003fd8 <HAL_RCC_OscConfig+0x2b4>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1c:	f7fe fc6a 	bl	80027f4 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f24:	f7fe fc66 	bl	80027f4 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e164      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f36:	4b26      	ldr	r3, [pc, #152]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0x200>
 8003f42:	e015      	b.n	8003f70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f44:	4b24      	ldr	r3, [pc, #144]	; (8003fd8 <HAL_RCC_OscConfig+0x2b4>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4a:	f7fe fc53 	bl	80027f4 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f52:	f7fe fc4f 	bl	80027f4 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e14d      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f64:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f0      	bne.n	8003f52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80a0 	beq.w	80040be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f82:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10f      	bne.n	8003fae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	4a0e      	ldr	r2, [pc, #56]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	60bb      	str	r3, [r7, #8]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003faa:	2301      	movs	r3, #1
 8003fac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fae:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_OscConfig+0x2b8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d121      	bne.n	8003ffe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fba:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <HAL_RCC_OscConfig+0x2b8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a07      	ldr	r2, [pc, #28]	; (8003fdc <HAL_RCC_OscConfig+0x2b8>)
 8003fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc6:	f7fe fc15 	bl	80027f4 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fcc:	e011      	b.n	8003ff2 <HAL_RCC_OscConfig+0x2ce>
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	42470000 	.word	0x42470000
 8003fd8:	42470e80 	.word	0x42470e80
 8003fdc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe0:	f7fe fc08 	bl	80027f4 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e106      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff2:	4b85      	ldr	r3, [pc, #532]	; (8004208 <HAL_RCC_OscConfig+0x4e4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d106      	bne.n	8004014 <HAL_RCC_OscConfig+0x2f0>
 8004006:	4b81      	ldr	r3, [pc, #516]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	4a80      	ldr	r2, [pc, #512]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	6713      	str	r3, [r2, #112]	; 0x70
 8004012:	e01c      	b.n	800404e <HAL_RCC_OscConfig+0x32a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b05      	cmp	r3, #5
 800401a:	d10c      	bne.n	8004036 <HAL_RCC_OscConfig+0x312>
 800401c:	4b7b      	ldr	r3, [pc, #492]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	4a7a      	ldr	r2, [pc, #488]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 8004022:	f043 0304 	orr.w	r3, r3, #4
 8004026:	6713      	str	r3, [r2, #112]	; 0x70
 8004028:	4b78      	ldr	r3, [pc, #480]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402c:	4a77      	ldr	r2, [pc, #476]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	6713      	str	r3, [r2, #112]	; 0x70
 8004034:	e00b      	b.n	800404e <HAL_RCC_OscConfig+0x32a>
 8004036:	4b75      	ldr	r3, [pc, #468]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	4a74      	ldr	r2, [pc, #464]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 800403c:	f023 0301 	bic.w	r3, r3, #1
 8004040:	6713      	str	r3, [r2, #112]	; 0x70
 8004042:	4b72      	ldr	r3, [pc, #456]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	4a71      	ldr	r2, [pc, #452]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 8004048:	f023 0304 	bic.w	r3, r3, #4
 800404c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d015      	beq.n	8004082 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004056:	f7fe fbcd 	bl	80027f4 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405c:	e00a      	b.n	8004074 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800405e:	f7fe fbc9 	bl	80027f4 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f241 3288 	movw	r2, #5000	; 0x1388
 800406c:	4293      	cmp	r3, r2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e0c5      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004074:	4b65      	ldr	r3, [pc, #404]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0ee      	beq.n	800405e <HAL_RCC_OscConfig+0x33a>
 8004080:	e014      	b.n	80040ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004082:	f7fe fbb7 	bl	80027f4 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004088:	e00a      	b.n	80040a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800408a:	f7fe fbb3 	bl	80027f4 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	f241 3288 	movw	r2, #5000	; 0x1388
 8004098:	4293      	cmp	r3, r2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e0af      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a0:	4b5a      	ldr	r3, [pc, #360]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1ee      	bne.n	800408a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d105      	bne.n	80040be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b2:	4b56      	ldr	r3, [pc, #344]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	4a55      	ldr	r2, [pc, #340]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 80040b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 809b 	beq.w	80041fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040c8:	4b50      	ldr	r3, [pc, #320]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 030c 	and.w	r3, r3, #12
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d05c      	beq.n	800418e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d141      	bne.n	8004160 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040dc:	4b4c      	ldr	r3, [pc, #304]	; (8004210 <HAL_RCC_OscConfig+0x4ec>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e2:	f7fe fb87 	bl	80027f4 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ea:	f7fe fb83 	bl	80027f4 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e081      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fc:	4b43      	ldr	r3, [pc, #268]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f0      	bne.n	80040ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	431a      	orrs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	019b      	lsls	r3, r3, #6
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	3b01      	subs	r3, #1
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	061b      	lsls	r3, r3, #24
 800412c:	4937      	ldr	r1, [pc, #220]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004132:	4b37      	ldr	r3, [pc, #220]	; (8004210 <HAL_RCC_OscConfig+0x4ec>)
 8004134:	2201      	movs	r2, #1
 8004136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fe fb5c 	bl	80027f4 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004140:	f7fe fb58 	bl	80027f4 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e056      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004152:	4b2e      	ldr	r3, [pc, #184]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x41c>
 800415e:	e04e      	b.n	80041fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004160:	4b2b      	ldr	r3, [pc, #172]	; (8004210 <HAL_RCC_OscConfig+0x4ec>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004166:	f7fe fb45 	bl	80027f4 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800416e:	f7fe fb41 	bl	80027f4 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e03f      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004180:	4b22      	ldr	r3, [pc, #136]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f0      	bne.n	800416e <HAL_RCC_OscConfig+0x44a>
 800418c:	e037      	b.n	80041fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e032      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800419a:	4b1c      	ldr	r3, [pc, #112]	; (800420c <HAL_RCC_OscConfig+0x4e8>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d028      	beq.n	80041fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d121      	bne.n	80041fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d11a      	bne.n	80041fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041ca:	4013      	ands	r3, r2
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d111      	bne.n	80041fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	085b      	lsrs	r3, r3, #1
 80041e2:	3b01      	subs	r3, #1
 80041e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d001      	beq.n	80041fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40007000 	.word	0x40007000
 800420c:	40023800 	.word	0x40023800
 8004210:	42470060 	.word	0x42470060

08004214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0cc      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004228:	4b68      	ldr	r3, [pc, #416]	; (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d90c      	bls.n	8004250 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004236:	4b65      	ldr	r3, [pc, #404]	; (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423e:	4b63      	ldr	r3, [pc, #396]	; (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0b8      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d020      	beq.n	800429e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004268:	4b59      	ldr	r3, [pc, #356]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4a58      	ldr	r2, [pc, #352]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004272:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004280:	4b53      	ldr	r3, [pc, #332]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	4a52      	ldr	r2, [pc, #328]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800428a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428c:	4b50      	ldr	r3, [pc, #320]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	494d      	ldr	r1, [pc, #308]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d044      	beq.n	8004334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d107      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b2:	4b47      	ldr	r3, [pc, #284]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d119      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e07f      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d003      	beq.n	80042d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d107      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d2:	4b3f      	ldr	r3, [pc, #252]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e06f      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e2:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e067      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042f2:	4b37      	ldr	r3, [pc, #220]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f023 0203 	bic.w	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	4934      	ldr	r1, [pc, #208]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	4313      	orrs	r3, r2
 8004302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004304:	f7fe fa76 	bl	80027f4 <HAL_GetTick>
 8004308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430a:	e00a      	b.n	8004322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430c:	f7fe fa72 	bl	80027f4 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	; 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e04f      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004322:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 020c 	and.w	r2, r3, #12
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	429a      	cmp	r2, r3
 8004332:	d1eb      	bne.n	800430c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004334:	4b25      	ldr	r3, [pc, #148]	; (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d20c      	bcs.n	800435c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b22      	ldr	r3, [pc, #136]	; (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	4b20      	ldr	r3, [pc, #128]	; (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d001      	beq.n	800435c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e032      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004368:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4916      	ldr	r1, [pc, #88]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004386:	4b12      	ldr	r3, [pc, #72]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	490e      	ldr	r1, [pc, #56]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	4313      	orrs	r3, r2
 8004398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800439a:	f000 f821 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 800439e:	4602      	mov	r2, r0
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	490a      	ldr	r1, [pc, #40]	; (80043d4 <HAL_RCC_ClockConfig+0x1c0>)
 80043ac:	5ccb      	ldrb	r3, [r1, r3]
 80043ae:	fa22 f303 	lsr.w	r3, r2, r3
 80043b2:	4a09      	ldr	r2, [pc, #36]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 80043b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe f9d6 	bl	800276c <HAL_InitTick>

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40023c00 	.word	0x40023c00
 80043d0:	40023800 	.word	0x40023800
 80043d4:	08005c40 	.word	0x08005c40
 80043d8:	20000000 	.word	0x20000000
 80043dc:	20000004 	.word	0x20000004

080043e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	607b      	str	r3, [r7, #4]
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	2300      	movs	r3, #0
 80043f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043f8:	4b67      	ldr	r3, [pc, #412]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 030c 	and.w	r3, r3, #12
 8004400:	2b08      	cmp	r3, #8
 8004402:	d00d      	beq.n	8004420 <HAL_RCC_GetSysClockFreq+0x40>
 8004404:	2b08      	cmp	r3, #8
 8004406:	f200 80bd 	bhi.w	8004584 <HAL_RCC_GetSysClockFreq+0x1a4>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x34>
 800440e:	2b04      	cmp	r3, #4
 8004410:	d003      	beq.n	800441a <HAL_RCC_GetSysClockFreq+0x3a>
 8004412:	e0b7      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004414:	4b61      	ldr	r3, [pc, #388]	; (800459c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004416:	60bb      	str	r3, [r7, #8]
       break;
 8004418:	e0b7      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800441a:	4b61      	ldr	r3, [pc, #388]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800441c:	60bb      	str	r3, [r7, #8]
      break;
 800441e:	e0b4      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004420:	4b5d      	ldr	r3, [pc, #372]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004428:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800442a:	4b5b      	ldr	r3, [pc, #364]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d04d      	beq.n	80044d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004436:	4b58      	ldr	r3, [pc, #352]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	099b      	lsrs	r3, r3, #6
 800443c:	461a      	mov	r2, r3
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004446:	f04f 0100 	mov.w	r1, #0
 800444a:	ea02 0800 	and.w	r8, r2, r0
 800444e:	ea03 0901 	and.w	r9, r3, r1
 8004452:	4640      	mov	r0, r8
 8004454:	4649      	mov	r1, r9
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	014b      	lsls	r3, r1, #5
 8004460:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004464:	0142      	lsls	r2, r0, #5
 8004466:	4610      	mov	r0, r2
 8004468:	4619      	mov	r1, r3
 800446a:	ebb0 0008 	subs.w	r0, r0, r8
 800446e:	eb61 0109 	sbc.w	r1, r1, r9
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	018b      	lsls	r3, r1, #6
 800447c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004480:	0182      	lsls	r2, r0, #6
 8004482:	1a12      	subs	r2, r2, r0
 8004484:	eb63 0301 	sbc.w	r3, r3, r1
 8004488:	f04f 0000 	mov.w	r0, #0
 800448c:	f04f 0100 	mov.w	r1, #0
 8004490:	00d9      	lsls	r1, r3, #3
 8004492:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004496:	00d0      	lsls	r0, r2, #3
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	eb12 0208 	adds.w	r2, r2, r8
 80044a0:	eb43 0309 	adc.w	r3, r3, r9
 80044a4:	f04f 0000 	mov.w	r0, #0
 80044a8:	f04f 0100 	mov.w	r1, #0
 80044ac:	0259      	lsls	r1, r3, #9
 80044ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80044b2:	0250      	lsls	r0, r2, #9
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4610      	mov	r0, r2
 80044ba:	4619      	mov	r1, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	461a      	mov	r2, r3
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	f7fb fedc 	bl	8000280 <__aeabi_uldivmod>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4613      	mov	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	e04a      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d2:	4b31      	ldr	r3, [pc, #196]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	461a      	mov	r2, r3
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044e2:	f04f 0100 	mov.w	r1, #0
 80044e6:	ea02 0400 	and.w	r4, r2, r0
 80044ea:	ea03 0501 	and.w	r5, r3, r1
 80044ee:	4620      	mov	r0, r4
 80044f0:	4629      	mov	r1, r5
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	014b      	lsls	r3, r1, #5
 80044fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004500:	0142      	lsls	r2, r0, #5
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	1b00      	subs	r0, r0, r4
 8004508:	eb61 0105 	sbc.w	r1, r1, r5
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	018b      	lsls	r3, r1, #6
 8004516:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800451a:	0182      	lsls	r2, r0, #6
 800451c:	1a12      	subs	r2, r2, r0
 800451e:	eb63 0301 	sbc.w	r3, r3, r1
 8004522:	f04f 0000 	mov.w	r0, #0
 8004526:	f04f 0100 	mov.w	r1, #0
 800452a:	00d9      	lsls	r1, r3, #3
 800452c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004530:	00d0      	lsls	r0, r2, #3
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	1912      	adds	r2, r2, r4
 8004538:	eb45 0303 	adc.w	r3, r5, r3
 800453c:	f04f 0000 	mov.w	r0, #0
 8004540:	f04f 0100 	mov.w	r1, #0
 8004544:	0299      	lsls	r1, r3, #10
 8004546:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800454a:	0290      	lsls	r0, r2, #10
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4610      	mov	r0, r2
 8004552:	4619      	mov	r1, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	461a      	mov	r2, r3
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	f7fb fe90 	bl	8000280 <__aeabi_uldivmod>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4613      	mov	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	3301      	adds	r3, #1
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004580:	60bb      	str	r3, [r7, #8]
      break;
 8004582:	e002      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004586:	60bb      	str	r3, [r7, #8]
      break;
 8004588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800458a:	68bb      	ldr	r3, [r7, #8]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800
 800459c:	00f42400 	.word	0x00f42400
 80045a0:	007a1200 	.word	0x007a1200

080045a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000000 	.word	0x20000000

080045bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045c0:	f7ff fff0 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	0a9b      	lsrs	r3, r3, #10
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	4903      	ldr	r1, [pc, #12]	; (80045e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045d2:	5ccb      	ldrb	r3, [r1, r3]
 80045d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d8:	4618      	mov	r0, r3
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40023800 	.word	0x40023800
 80045e0:	08005c50 	.word	0x08005c50

080045e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045e8:	f7ff ffdc 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045ec:	4602      	mov	r2, r0
 80045ee:	4b05      	ldr	r3, [pc, #20]	; (8004604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	0b5b      	lsrs	r3, r3, #13
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	4903      	ldr	r1, [pc, #12]	; (8004608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045fa:	5ccb      	ldrb	r3, [r1, r3]
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004600:	4618      	mov	r0, r3
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40023800 	.word	0x40023800
 8004608:	08005c50 	.word	0x08005c50

0800460c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e03f      	b.n	800469e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fc fa7a 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2224      	movs	r2, #36	; 0x24
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800464e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f829 	bl	80046a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ac:	b09f      	sub	sp, #124	; 0x7c
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046be:	68d9      	ldr	r1, [r3, #12]
 80046c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	ea40 0301 	orr.w	r3, r0, r1
 80046c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	431a      	orrs	r2, r3
 80046da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	4313      	orrs	r3, r2
 80046e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80046e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046ec:	f021 010c 	bic.w	r1, r1, #12
 80046f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046f6:	430b      	orrs	r3, r1
 80046f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004706:	6999      	ldr	r1, [r3, #24]
 8004708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	ea40 0301 	orr.w	r3, r0, r1
 8004710:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4bc5      	ldr	r3, [pc, #788]	; (8004a2c <UART_SetConfig+0x384>)
 8004718:	429a      	cmp	r2, r3
 800471a:	d004      	beq.n	8004726 <UART_SetConfig+0x7e>
 800471c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4bc3      	ldr	r3, [pc, #780]	; (8004a30 <UART_SetConfig+0x388>)
 8004722:	429a      	cmp	r2, r3
 8004724:	d103      	bne.n	800472e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004726:	f7ff ff5d 	bl	80045e4 <HAL_RCC_GetPCLK2Freq>
 800472a:	6778      	str	r0, [r7, #116]	; 0x74
 800472c:	e002      	b.n	8004734 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800472e:	f7ff ff45 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8004732:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473c:	f040 80b6 	bne.w	80048ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004740:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004742:	461c      	mov	r4, r3
 8004744:	f04f 0500 	mov.w	r5, #0
 8004748:	4622      	mov	r2, r4
 800474a:	462b      	mov	r3, r5
 800474c:	1891      	adds	r1, r2, r2
 800474e:	6439      	str	r1, [r7, #64]	; 0x40
 8004750:	415b      	adcs	r3, r3
 8004752:	647b      	str	r3, [r7, #68]	; 0x44
 8004754:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004758:	1912      	adds	r2, r2, r4
 800475a:	eb45 0303 	adc.w	r3, r5, r3
 800475e:	f04f 0000 	mov.w	r0, #0
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	00d9      	lsls	r1, r3, #3
 8004768:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800476c:	00d0      	lsls	r0, r2, #3
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	1911      	adds	r1, r2, r4
 8004774:	6639      	str	r1, [r7, #96]	; 0x60
 8004776:	416b      	adcs	r3, r5
 8004778:	667b      	str	r3, [r7, #100]	; 0x64
 800477a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	461a      	mov	r2, r3
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	1891      	adds	r1, r2, r2
 8004786:	63b9      	str	r1, [r7, #56]	; 0x38
 8004788:	415b      	adcs	r3, r3
 800478a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800478c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004790:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004794:	f7fb fd74 	bl	8000280 <__aeabi_uldivmod>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4ba5      	ldr	r3, [pc, #660]	; (8004a34 <UART_SetConfig+0x38c>)
 800479e:	fba3 2302 	umull	r2, r3, r3, r2
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	011e      	lsls	r6, r3, #4
 80047a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047a8:	461c      	mov	r4, r3
 80047aa:	f04f 0500 	mov.w	r5, #0
 80047ae:	4622      	mov	r2, r4
 80047b0:	462b      	mov	r3, r5
 80047b2:	1891      	adds	r1, r2, r2
 80047b4:	6339      	str	r1, [r7, #48]	; 0x30
 80047b6:	415b      	adcs	r3, r3
 80047b8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047be:	1912      	adds	r2, r2, r4
 80047c0:	eb45 0303 	adc.w	r3, r5, r3
 80047c4:	f04f 0000 	mov.w	r0, #0
 80047c8:	f04f 0100 	mov.w	r1, #0
 80047cc:	00d9      	lsls	r1, r3, #3
 80047ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047d2:	00d0      	lsls	r0, r2, #3
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	1911      	adds	r1, r2, r4
 80047da:	65b9      	str	r1, [r7, #88]	; 0x58
 80047dc:	416b      	adcs	r3, r5
 80047de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	461a      	mov	r2, r3
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	1891      	adds	r1, r2, r2
 80047ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80047ee:	415b      	adcs	r3, r3
 80047f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80047fa:	f7fb fd41 	bl	8000280 <__aeabi_uldivmod>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4b8c      	ldr	r3, [pc, #560]	; (8004a34 <UART_SetConfig+0x38c>)
 8004804:	fba3 1302 	umull	r1, r3, r3, r2
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	2164      	movs	r1, #100	; 0x64
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	3332      	adds	r3, #50	; 0x32
 8004816:	4a87      	ldr	r2, [pc, #540]	; (8004a34 <UART_SetConfig+0x38c>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004824:	441e      	add	r6, r3
 8004826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004828:	4618      	mov	r0, r3
 800482a:	f04f 0100 	mov.w	r1, #0
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	1894      	adds	r4, r2, r2
 8004834:	623c      	str	r4, [r7, #32]
 8004836:	415b      	adcs	r3, r3
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
 800483a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800483e:	1812      	adds	r2, r2, r0
 8004840:	eb41 0303 	adc.w	r3, r1, r3
 8004844:	f04f 0400 	mov.w	r4, #0
 8004848:	f04f 0500 	mov.w	r5, #0
 800484c:	00dd      	lsls	r5, r3, #3
 800484e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004852:	00d4      	lsls	r4, r2, #3
 8004854:	4622      	mov	r2, r4
 8004856:	462b      	mov	r3, r5
 8004858:	1814      	adds	r4, r2, r0
 800485a:	653c      	str	r4, [r7, #80]	; 0x50
 800485c:	414b      	adcs	r3, r1
 800485e:	657b      	str	r3, [r7, #84]	; 0x54
 8004860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	461a      	mov	r2, r3
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	1891      	adds	r1, r2, r2
 800486c:	61b9      	str	r1, [r7, #24]
 800486e:	415b      	adcs	r3, r3
 8004870:	61fb      	str	r3, [r7, #28]
 8004872:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004876:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800487a:	f7fb fd01 	bl	8000280 <__aeabi_uldivmod>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4b6c      	ldr	r3, [pc, #432]	; (8004a34 <UART_SetConfig+0x38c>)
 8004884:	fba3 1302 	umull	r1, r3, r3, r2
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	2164      	movs	r1, #100	; 0x64
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	3332      	adds	r3, #50	; 0x32
 8004896:	4a67      	ldr	r2, [pc, #412]	; (8004a34 <UART_SetConfig+0x38c>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	f003 0207 	and.w	r2, r3, #7
 80048a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4432      	add	r2, r6
 80048a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048aa:	e0b9      	b.n	8004a20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ae:	461c      	mov	r4, r3
 80048b0:	f04f 0500 	mov.w	r5, #0
 80048b4:	4622      	mov	r2, r4
 80048b6:	462b      	mov	r3, r5
 80048b8:	1891      	adds	r1, r2, r2
 80048ba:	6139      	str	r1, [r7, #16]
 80048bc:	415b      	adcs	r3, r3
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048c4:	1912      	adds	r2, r2, r4
 80048c6:	eb45 0303 	adc.w	r3, r5, r3
 80048ca:	f04f 0000 	mov.w	r0, #0
 80048ce:	f04f 0100 	mov.w	r1, #0
 80048d2:	00d9      	lsls	r1, r3, #3
 80048d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048d8:	00d0      	lsls	r0, r2, #3
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	eb12 0804 	adds.w	r8, r2, r4
 80048e2:	eb43 0905 	adc.w	r9, r3, r5
 80048e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f04f 0100 	mov.w	r1, #0
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	008b      	lsls	r3, r1, #2
 80048fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048fe:	0082      	lsls	r2, r0, #2
 8004900:	4640      	mov	r0, r8
 8004902:	4649      	mov	r1, r9
 8004904:	f7fb fcbc 	bl	8000280 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4b49      	ldr	r3, [pc, #292]	; (8004a34 <UART_SetConfig+0x38c>)
 800490e:	fba3 2302 	umull	r2, r3, r3, r2
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	011e      	lsls	r6, r3, #4
 8004916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004918:	4618      	mov	r0, r3
 800491a:	f04f 0100 	mov.w	r1, #0
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	1894      	adds	r4, r2, r2
 8004924:	60bc      	str	r4, [r7, #8]
 8004926:	415b      	adcs	r3, r3
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800492e:	1812      	adds	r2, r2, r0
 8004930:	eb41 0303 	adc.w	r3, r1, r3
 8004934:	f04f 0400 	mov.w	r4, #0
 8004938:	f04f 0500 	mov.w	r5, #0
 800493c:	00dd      	lsls	r5, r3, #3
 800493e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004942:	00d4      	lsls	r4, r2, #3
 8004944:	4622      	mov	r2, r4
 8004946:	462b      	mov	r3, r5
 8004948:	1814      	adds	r4, r2, r0
 800494a:	64bc      	str	r4, [r7, #72]	; 0x48
 800494c:	414b      	adcs	r3, r1
 800494e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	4618      	mov	r0, r3
 8004956:	f04f 0100 	mov.w	r1, #0
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	008b      	lsls	r3, r1, #2
 8004964:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004968:	0082      	lsls	r2, r0, #2
 800496a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800496e:	f7fb fc87 	bl	8000280 <__aeabi_uldivmod>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4b2f      	ldr	r3, [pc, #188]	; (8004a34 <UART_SetConfig+0x38c>)
 8004978:	fba3 1302 	umull	r1, r3, r3, r2
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	2164      	movs	r1, #100	; 0x64
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	011b      	lsls	r3, r3, #4
 8004988:	3332      	adds	r3, #50	; 0x32
 800498a:	4a2a      	ldr	r2, [pc, #168]	; (8004a34 <UART_SetConfig+0x38c>)
 800498c:	fba2 2303 	umull	r2, r3, r2, r3
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004996:	441e      	add	r6, r3
 8004998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800499a:	4618      	mov	r0, r3
 800499c:	f04f 0100 	mov.w	r1, #0
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	1894      	adds	r4, r2, r2
 80049a6:	603c      	str	r4, [r7, #0]
 80049a8:	415b      	adcs	r3, r3
 80049aa:	607b      	str	r3, [r7, #4]
 80049ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049b0:	1812      	adds	r2, r2, r0
 80049b2:	eb41 0303 	adc.w	r3, r1, r3
 80049b6:	f04f 0400 	mov.w	r4, #0
 80049ba:	f04f 0500 	mov.w	r5, #0
 80049be:	00dd      	lsls	r5, r3, #3
 80049c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049c4:	00d4      	lsls	r4, r2, #3
 80049c6:	4622      	mov	r2, r4
 80049c8:	462b      	mov	r3, r5
 80049ca:	eb12 0a00 	adds.w	sl, r2, r0
 80049ce:	eb43 0b01 	adc.w	fp, r3, r1
 80049d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f04f 0100 	mov.w	r1, #0
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	008b      	lsls	r3, r1, #2
 80049e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049ea:	0082      	lsls	r2, r0, #2
 80049ec:	4650      	mov	r0, sl
 80049ee:	4659      	mov	r1, fp
 80049f0:	f7fb fc46 	bl	8000280 <__aeabi_uldivmod>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <UART_SetConfig+0x38c>)
 80049fa:	fba3 1302 	umull	r1, r3, r3, r2
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	2164      	movs	r1, #100	; 0x64
 8004a02:	fb01 f303 	mul.w	r3, r1, r3
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	3332      	adds	r3, #50	; 0x32
 8004a0c:	4a09      	ldr	r2, [pc, #36]	; (8004a34 <UART_SetConfig+0x38c>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	f003 020f 	and.w	r2, r3, #15
 8004a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4432      	add	r2, r6
 8004a1e:	609a      	str	r2, [r3, #8]
}
 8004a20:	bf00      	nop
 8004a22:	377c      	adds	r7, #124	; 0x7c
 8004a24:	46bd      	mov	sp, r7
 8004a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40011000 	.word	0x40011000
 8004a30:	40011400 	.word	0x40011400
 8004a34:	51eb851f 	.word	0x51eb851f

08004a38 <__errno>:
 8004a38:	4b01      	ldr	r3, [pc, #4]	; (8004a40 <__errno+0x8>)
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	2000000c 	.word	0x2000000c

08004a44 <__libc_init_array>:
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	4d0d      	ldr	r5, [pc, #52]	; (8004a7c <__libc_init_array+0x38>)
 8004a48:	4c0d      	ldr	r4, [pc, #52]	; (8004a80 <__libc_init_array+0x3c>)
 8004a4a:	1b64      	subs	r4, r4, r5
 8004a4c:	10a4      	asrs	r4, r4, #2
 8004a4e:	2600      	movs	r6, #0
 8004a50:	42a6      	cmp	r6, r4
 8004a52:	d109      	bne.n	8004a68 <__libc_init_array+0x24>
 8004a54:	4d0b      	ldr	r5, [pc, #44]	; (8004a84 <__libc_init_array+0x40>)
 8004a56:	4c0c      	ldr	r4, [pc, #48]	; (8004a88 <__libc_init_array+0x44>)
 8004a58:	f001 f858 	bl	8005b0c <_init>
 8004a5c:	1b64      	subs	r4, r4, r5
 8004a5e:	10a4      	asrs	r4, r4, #2
 8004a60:	2600      	movs	r6, #0
 8004a62:	42a6      	cmp	r6, r4
 8004a64:	d105      	bne.n	8004a72 <__libc_init_array+0x2e>
 8004a66:	bd70      	pop	{r4, r5, r6, pc}
 8004a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a6c:	4798      	blx	r3
 8004a6e:	3601      	adds	r6, #1
 8004a70:	e7ee      	b.n	8004a50 <__libc_init_array+0xc>
 8004a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a76:	4798      	blx	r3
 8004a78:	3601      	adds	r6, #1
 8004a7a:	e7f2      	b.n	8004a62 <__libc_init_array+0x1e>
 8004a7c:	0801b3f4 	.word	0x0801b3f4
 8004a80:	0801b3f4 	.word	0x0801b3f4
 8004a84:	0801b3f4 	.word	0x0801b3f4
 8004a88:	0801b3f8 	.word	0x0801b3f8

08004a8c <memcpy>:
 8004a8c:	440a      	add	r2, r1
 8004a8e:	4291      	cmp	r1, r2
 8004a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a94:	d100      	bne.n	8004a98 <memcpy+0xc>
 8004a96:	4770      	bx	lr
 8004a98:	b510      	push	{r4, lr}
 8004a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004aa2:	4291      	cmp	r1, r2
 8004aa4:	d1f9      	bne.n	8004a9a <memcpy+0xe>
 8004aa6:	bd10      	pop	{r4, pc}

08004aa8 <memset>:
 8004aa8:	4402      	add	r2, r0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d100      	bne.n	8004ab2 <memset+0xa>
 8004ab0:	4770      	bx	lr
 8004ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ab6:	e7f9      	b.n	8004aac <memset+0x4>

08004ab8 <iprintf>:
 8004ab8:	b40f      	push	{r0, r1, r2, r3}
 8004aba:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <iprintf+0x2c>)
 8004abc:	b513      	push	{r0, r1, r4, lr}
 8004abe:	681c      	ldr	r4, [r3, #0]
 8004ac0:	b124      	cbz	r4, 8004acc <iprintf+0x14>
 8004ac2:	69a3      	ldr	r3, [r4, #24]
 8004ac4:	b913      	cbnz	r3, 8004acc <iprintf+0x14>
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f000 fa74 	bl	8004fb4 <__sinit>
 8004acc:	ab05      	add	r3, sp, #20
 8004ace:	9a04      	ldr	r2, [sp, #16]
 8004ad0:	68a1      	ldr	r1, [r4, #8]
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	f000 fc45 	bl	8005364 <_vfiprintf_r>
 8004ada:	b002      	add	sp, #8
 8004adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ae0:	b004      	add	sp, #16
 8004ae2:	4770      	bx	lr
 8004ae4:	2000000c 	.word	0x2000000c

08004ae8 <putchar>:
 8004ae8:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <putchar+0x28>)
 8004aea:	b513      	push	{r0, r1, r4, lr}
 8004aec:	681c      	ldr	r4, [r3, #0]
 8004aee:	4601      	mov	r1, r0
 8004af0:	b134      	cbz	r4, 8004b00 <putchar+0x18>
 8004af2:	69a3      	ldr	r3, [r4, #24]
 8004af4:	b923      	cbnz	r3, 8004b00 <putchar+0x18>
 8004af6:	9001      	str	r0, [sp, #4]
 8004af8:	4620      	mov	r0, r4
 8004afa:	f000 fa5b 	bl	8004fb4 <__sinit>
 8004afe:	9901      	ldr	r1, [sp, #4]
 8004b00:	68a2      	ldr	r2, [r4, #8]
 8004b02:	4620      	mov	r0, r4
 8004b04:	b002      	add	sp, #8
 8004b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b0a:	f000 beef 	b.w	80058ec <_putc_r>
 8004b0e:	bf00      	nop
 8004b10:	2000000c 	.word	0x2000000c

08004b14 <_puts_r>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	460e      	mov	r6, r1
 8004b18:	4605      	mov	r5, r0
 8004b1a:	b118      	cbz	r0, 8004b24 <_puts_r+0x10>
 8004b1c:	6983      	ldr	r3, [r0, #24]
 8004b1e:	b90b      	cbnz	r3, 8004b24 <_puts_r+0x10>
 8004b20:	f000 fa48 	bl	8004fb4 <__sinit>
 8004b24:	69ab      	ldr	r3, [r5, #24]
 8004b26:	68ac      	ldr	r4, [r5, #8]
 8004b28:	b913      	cbnz	r3, 8004b30 <_puts_r+0x1c>
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f000 fa42 	bl	8004fb4 <__sinit>
 8004b30:	4b2c      	ldr	r3, [pc, #176]	; (8004be4 <_puts_r+0xd0>)
 8004b32:	429c      	cmp	r4, r3
 8004b34:	d120      	bne.n	8004b78 <_puts_r+0x64>
 8004b36:	686c      	ldr	r4, [r5, #4]
 8004b38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b3a:	07db      	lsls	r3, r3, #31
 8004b3c:	d405      	bmi.n	8004b4a <_puts_r+0x36>
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	0598      	lsls	r0, r3, #22
 8004b42:	d402      	bmi.n	8004b4a <_puts_r+0x36>
 8004b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b46:	f000 fad3 	bl	80050f0 <__retarget_lock_acquire_recursive>
 8004b4a:	89a3      	ldrh	r3, [r4, #12]
 8004b4c:	0719      	lsls	r1, r3, #28
 8004b4e:	d51d      	bpl.n	8004b8c <_puts_r+0x78>
 8004b50:	6923      	ldr	r3, [r4, #16]
 8004b52:	b1db      	cbz	r3, 8004b8c <_puts_r+0x78>
 8004b54:	3e01      	subs	r6, #1
 8004b56:	68a3      	ldr	r3, [r4, #8]
 8004b58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	60a3      	str	r3, [r4, #8]
 8004b60:	bb39      	cbnz	r1, 8004bb2 <_puts_r+0x9e>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	da38      	bge.n	8004bd8 <_puts_r+0xc4>
 8004b66:	4622      	mov	r2, r4
 8004b68:	210a      	movs	r1, #10
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f000 f848 	bl	8004c00 <__swbuf_r>
 8004b70:	3001      	adds	r0, #1
 8004b72:	d011      	beq.n	8004b98 <_puts_r+0x84>
 8004b74:	250a      	movs	r5, #10
 8004b76:	e011      	b.n	8004b9c <_puts_r+0x88>
 8004b78:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <_puts_r+0xd4>)
 8004b7a:	429c      	cmp	r4, r3
 8004b7c:	d101      	bne.n	8004b82 <_puts_r+0x6e>
 8004b7e:	68ac      	ldr	r4, [r5, #8]
 8004b80:	e7da      	b.n	8004b38 <_puts_r+0x24>
 8004b82:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <_puts_r+0xd8>)
 8004b84:	429c      	cmp	r4, r3
 8004b86:	bf08      	it	eq
 8004b88:	68ec      	ldreq	r4, [r5, #12]
 8004b8a:	e7d5      	b.n	8004b38 <_puts_r+0x24>
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f000 f888 	bl	8004ca4 <__swsetup_r>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	d0dd      	beq.n	8004b54 <_puts_r+0x40>
 8004b98:	f04f 35ff 	mov.w	r5, #4294967295
 8004b9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b9e:	07da      	lsls	r2, r3, #31
 8004ba0:	d405      	bmi.n	8004bae <_puts_r+0x9a>
 8004ba2:	89a3      	ldrh	r3, [r4, #12]
 8004ba4:	059b      	lsls	r3, r3, #22
 8004ba6:	d402      	bmi.n	8004bae <_puts_r+0x9a>
 8004ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004baa:	f000 faa2 	bl	80050f2 <__retarget_lock_release_recursive>
 8004bae:	4628      	mov	r0, r5
 8004bb0:	bd70      	pop	{r4, r5, r6, pc}
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	da04      	bge.n	8004bc0 <_puts_r+0xac>
 8004bb6:	69a2      	ldr	r2, [r4, #24]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	dc06      	bgt.n	8004bca <_puts_r+0xb6>
 8004bbc:	290a      	cmp	r1, #10
 8004bbe:	d004      	beq.n	8004bca <_puts_r+0xb6>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	6022      	str	r2, [r4, #0]
 8004bc6:	7019      	strb	r1, [r3, #0]
 8004bc8:	e7c5      	b.n	8004b56 <_puts_r+0x42>
 8004bca:	4622      	mov	r2, r4
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f000 f817 	bl	8004c00 <__swbuf_r>
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	d1bf      	bne.n	8004b56 <_puts_r+0x42>
 8004bd6:	e7df      	b.n	8004b98 <_puts_r+0x84>
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	250a      	movs	r5, #10
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	6022      	str	r2, [r4, #0]
 8004be0:	701d      	strb	r5, [r3, #0]
 8004be2:	e7db      	b.n	8004b9c <_puts_r+0x88>
 8004be4:	0801b378 	.word	0x0801b378
 8004be8:	0801b398 	.word	0x0801b398
 8004bec:	0801b358 	.word	0x0801b358

08004bf0 <puts>:
 8004bf0:	4b02      	ldr	r3, [pc, #8]	; (8004bfc <puts+0xc>)
 8004bf2:	4601      	mov	r1, r0
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	f7ff bf8d 	b.w	8004b14 <_puts_r>
 8004bfa:	bf00      	nop
 8004bfc:	2000000c 	.word	0x2000000c

08004c00 <__swbuf_r>:
 8004c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c02:	460e      	mov	r6, r1
 8004c04:	4614      	mov	r4, r2
 8004c06:	4605      	mov	r5, r0
 8004c08:	b118      	cbz	r0, 8004c12 <__swbuf_r+0x12>
 8004c0a:	6983      	ldr	r3, [r0, #24]
 8004c0c:	b90b      	cbnz	r3, 8004c12 <__swbuf_r+0x12>
 8004c0e:	f000 f9d1 	bl	8004fb4 <__sinit>
 8004c12:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <__swbuf_r+0x98>)
 8004c14:	429c      	cmp	r4, r3
 8004c16:	d12b      	bne.n	8004c70 <__swbuf_r+0x70>
 8004c18:	686c      	ldr	r4, [r5, #4]
 8004c1a:	69a3      	ldr	r3, [r4, #24]
 8004c1c:	60a3      	str	r3, [r4, #8]
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	071a      	lsls	r2, r3, #28
 8004c22:	d52f      	bpl.n	8004c84 <__swbuf_r+0x84>
 8004c24:	6923      	ldr	r3, [r4, #16]
 8004c26:	b36b      	cbz	r3, 8004c84 <__swbuf_r+0x84>
 8004c28:	6923      	ldr	r3, [r4, #16]
 8004c2a:	6820      	ldr	r0, [r4, #0]
 8004c2c:	1ac0      	subs	r0, r0, r3
 8004c2e:	6963      	ldr	r3, [r4, #20]
 8004c30:	b2f6      	uxtb	r6, r6
 8004c32:	4283      	cmp	r3, r0
 8004c34:	4637      	mov	r7, r6
 8004c36:	dc04      	bgt.n	8004c42 <__swbuf_r+0x42>
 8004c38:	4621      	mov	r1, r4
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f000 f926 	bl	8004e8c <_fflush_r>
 8004c40:	bb30      	cbnz	r0, 8004c90 <__swbuf_r+0x90>
 8004c42:	68a3      	ldr	r3, [r4, #8]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	60a3      	str	r3, [r4, #8]
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	6022      	str	r2, [r4, #0]
 8004c4e:	701e      	strb	r6, [r3, #0]
 8004c50:	6963      	ldr	r3, [r4, #20]
 8004c52:	3001      	adds	r0, #1
 8004c54:	4283      	cmp	r3, r0
 8004c56:	d004      	beq.n	8004c62 <__swbuf_r+0x62>
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	07db      	lsls	r3, r3, #31
 8004c5c:	d506      	bpl.n	8004c6c <__swbuf_r+0x6c>
 8004c5e:	2e0a      	cmp	r6, #10
 8004c60:	d104      	bne.n	8004c6c <__swbuf_r+0x6c>
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	f000 f911 	bl	8004e8c <_fflush_r>
 8004c6a:	b988      	cbnz	r0, 8004c90 <__swbuf_r+0x90>
 8004c6c:	4638      	mov	r0, r7
 8004c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c70:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <__swbuf_r+0x9c>)
 8004c72:	429c      	cmp	r4, r3
 8004c74:	d101      	bne.n	8004c7a <__swbuf_r+0x7a>
 8004c76:	68ac      	ldr	r4, [r5, #8]
 8004c78:	e7cf      	b.n	8004c1a <__swbuf_r+0x1a>
 8004c7a:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <__swbuf_r+0xa0>)
 8004c7c:	429c      	cmp	r4, r3
 8004c7e:	bf08      	it	eq
 8004c80:	68ec      	ldreq	r4, [r5, #12]
 8004c82:	e7ca      	b.n	8004c1a <__swbuf_r+0x1a>
 8004c84:	4621      	mov	r1, r4
 8004c86:	4628      	mov	r0, r5
 8004c88:	f000 f80c 	bl	8004ca4 <__swsetup_r>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d0cb      	beq.n	8004c28 <__swbuf_r+0x28>
 8004c90:	f04f 37ff 	mov.w	r7, #4294967295
 8004c94:	e7ea      	b.n	8004c6c <__swbuf_r+0x6c>
 8004c96:	bf00      	nop
 8004c98:	0801b378 	.word	0x0801b378
 8004c9c:	0801b398 	.word	0x0801b398
 8004ca0:	0801b358 	.word	0x0801b358

08004ca4 <__swsetup_r>:
 8004ca4:	4b32      	ldr	r3, [pc, #200]	; (8004d70 <__swsetup_r+0xcc>)
 8004ca6:	b570      	push	{r4, r5, r6, lr}
 8004ca8:	681d      	ldr	r5, [r3, #0]
 8004caa:	4606      	mov	r6, r0
 8004cac:	460c      	mov	r4, r1
 8004cae:	b125      	cbz	r5, 8004cba <__swsetup_r+0x16>
 8004cb0:	69ab      	ldr	r3, [r5, #24]
 8004cb2:	b913      	cbnz	r3, 8004cba <__swsetup_r+0x16>
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	f000 f97d 	bl	8004fb4 <__sinit>
 8004cba:	4b2e      	ldr	r3, [pc, #184]	; (8004d74 <__swsetup_r+0xd0>)
 8004cbc:	429c      	cmp	r4, r3
 8004cbe:	d10f      	bne.n	8004ce0 <__swsetup_r+0x3c>
 8004cc0:	686c      	ldr	r4, [r5, #4]
 8004cc2:	89a3      	ldrh	r3, [r4, #12]
 8004cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cc8:	0719      	lsls	r1, r3, #28
 8004cca:	d42c      	bmi.n	8004d26 <__swsetup_r+0x82>
 8004ccc:	06dd      	lsls	r5, r3, #27
 8004cce:	d411      	bmi.n	8004cf4 <__swsetup_r+0x50>
 8004cd0:	2309      	movs	r3, #9
 8004cd2:	6033      	str	r3, [r6, #0]
 8004cd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cd8:	81a3      	strh	r3, [r4, #12]
 8004cda:	f04f 30ff 	mov.w	r0, #4294967295
 8004cde:	e03e      	b.n	8004d5e <__swsetup_r+0xba>
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <__swsetup_r+0xd4>)
 8004ce2:	429c      	cmp	r4, r3
 8004ce4:	d101      	bne.n	8004cea <__swsetup_r+0x46>
 8004ce6:	68ac      	ldr	r4, [r5, #8]
 8004ce8:	e7eb      	b.n	8004cc2 <__swsetup_r+0x1e>
 8004cea:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <__swsetup_r+0xd8>)
 8004cec:	429c      	cmp	r4, r3
 8004cee:	bf08      	it	eq
 8004cf0:	68ec      	ldreq	r4, [r5, #12]
 8004cf2:	e7e6      	b.n	8004cc2 <__swsetup_r+0x1e>
 8004cf4:	0758      	lsls	r0, r3, #29
 8004cf6:	d512      	bpl.n	8004d1e <__swsetup_r+0x7a>
 8004cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cfa:	b141      	cbz	r1, 8004d0e <__swsetup_r+0x6a>
 8004cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d00:	4299      	cmp	r1, r3
 8004d02:	d002      	beq.n	8004d0a <__swsetup_r+0x66>
 8004d04:	4630      	mov	r0, r6
 8004d06:	f000 fa59 	bl	80051bc <_free_r>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	6363      	str	r3, [r4, #52]	; 0x34
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	2300      	movs	r3, #0
 8004d18:	6063      	str	r3, [r4, #4]
 8004d1a:	6923      	ldr	r3, [r4, #16]
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	89a3      	ldrh	r3, [r4, #12]
 8004d20:	f043 0308 	orr.w	r3, r3, #8
 8004d24:	81a3      	strh	r3, [r4, #12]
 8004d26:	6923      	ldr	r3, [r4, #16]
 8004d28:	b94b      	cbnz	r3, 8004d3e <__swsetup_r+0x9a>
 8004d2a:	89a3      	ldrh	r3, [r4, #12]
 8004d2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d34:	d003      	beq.n	8004d3e <__swsetup_r+0x9a>
 8004d36:	4621      	mov	r1, r4
 8004d38:	4630      	mov	r0, r6
 8004d3a:	f000 f9ff 	bl	800513c <__smakebuf_r>
 8004d3e:	89a0      	ldrh	r0, [r4, #12]
 8004d40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d44:	f010 0301 	ands.w	r3, r0, #1
 8004d48:	d00a      	beq.n	8004d60 <__swsetup_r+0xbc>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60a3      	str	r3, [r4, #8]
 8004d4e:	6963      	ldr	r3, [r4, #20]
 8004d50:	425b      	negs	r3, r3
 8004d52:	61a3      	str	r3, [r4, #24]
 8004d54:	6923      	ldr	r3, [r4, #16]
 8004d56:	b943      	cbnz	r3, 8004d6a <__swsetup_r+0xc6>
 8004d58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d5c:	d1ba      	bne.n	8004cd4 <__swsetup_r+0x30>
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	0781      	lsls	r1, r0, #30
 8004d62:	bf58      	it	pl
 8004d64:	6963      	ldrpl	r3, [r4, #20]
 8004d66:	60a3      	str	r3, [r4, #8]
 8004d68:	e7f4      	b.n	8004d54 <__swsetup_r+0xb0>
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	e7f7      	b.n	8004d5e <__swsetup_r+0xba>
 8004d6e:	bf00      	nop
 8004d70:	2000000c 	.word	0x2000000c
 8004d74:	0801b378 	.word	0x0801b378
 8004d78:	0801b398 	.word	0x0801b398
 8004d7c:	0801b358 	.word	0x0801b358

08004d80 <__sflush_r>:
 8004d80:	898a      	ldrh	r2, [r1, #12]
 8004d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d86:	4605      	mov	r5, r0
 8004d88:	0710      	lsls	r0, r2, #28
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	d458      	bmi.n	8004e40 <__sflush_r+0xc0>
 8004d8e:	684b      	ldr	r3, [r1, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	dc05      	bgt.n	8004da0 <__sflush_r+0x20>
 8004d94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	dc02      	bgt.n	8004da0 <__sflush_r+0x20>
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004da0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004da2:	2e00      	cmp	r6, #0
 8004da4:	d0f9      	beq.n	8004d9a <__sflush_r+0x1a>
 8004da6:	2300      	movs	r3, #0
 8004da8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004dac:	682f      	ldr	r7, [r5, #0]
 8004dae:	602b      	str	r3, [r5, #0]
 8004db0:	d032      	beq.n	8004e18 <__sflush_r+0x98>
 8004db2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004db4:	89a3      	ldrh	r3, [r4, #12]
 8004db6:	075a      	lsls	r2, r3, #29
 8004db8:	d505      	bpl.n	8004dc6 <__sflush_r+0x46>
 8004dba:	6863      	ldr	r3, [r4, #4]
 8004dbc:	1ac0      	subs	r0, r0, r3
 8004dbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dc0:	b10b      	cbz	r3, 8004dc6 <__sflush_r+0x46>
 8004dc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dc4:	1ac0      	subs	r0, r0, r3
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	4602      	mov	r2, r0
 8004dca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dcc:	6a21      	ldr	r1, [r4, #32]
 8004dce:	4628      	mov	r0, r5
 8004dd0:	47b0      	blx	r6
 8004dd2:	1c43      	adds	r3, r0, #1
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	d106      	bne.n	8004de6 <__sflush_r+0x66>
 8004dd8:	6829      	ldr	r1, [r5, #0]
 8004dda:	291d      	cmp	r1, #29
 8004ddc:	d82c      	bhi.n	8004e38 <__sflush_r+0xb8>
 8004dde:	4a2a      	ldr	r2, [pc, #168]	; (8004e88 <__sflush_r+0x108>)
 8004de0:	40ca      	lsrs	r2, r1
 8004de2:	07d6      	lsls	r6, r2, #31
 8004de4:	d528      	bpl.n	8004e38 <__sflush_r+0xb8>
 8004de6:	2200      	movs	r2, #0
 8004de8:	6062      	str	r2, [r4, #4]
 8004dea:	04d9      	lsls	r1, r3, #19
 8004dec:	6922      	ldr	r2, [r4, #16]
 8004dee:	6022      	str	r2, [r4, #0]
 8004df0:	d504      	bpl.n	8004dfc <__sflush_r+0x7c>
 8004df2:	1c42      	adds	r2, r0, #1
 8004df4:	d101      	bne.n	8004dfa <__sflush_r+0x7a>
 8004df6:	682b      	ldr	r3, [r5, #0]
 8004df8:	b903      	cbnz	r3, 8004dfc <__sflush_r+0x7c>
 8004dfa:	6560      	str	r0, [r4, #84]	; 0x54
 8004dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dfe:	602f      	str	r7, [r5, #0]
 8004e00:	2900      	cmp	r1, #0
 8004e02:	d0ca      	beq.n	8004d9a <__sflush_r+0x1a>
 8004e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e08:	4299      	cmp	r1, r3
 8004e0a:	d002      	beq.n	8004e12 <__sflush_r+0x92>
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f000 f9d5 	bl	80051bc <_free_r>
 8004e12:	2000      	movs	r0, #0
 8004e14:	6360      	str	r0, [r4, #52]	; 0x34
 8004e16:	e7c1      	b.n	8004d9c <__sflush_r+0x1c>
 8004e18:	6a21      	ldr	r1, [r4, #32]
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b0      	blx	r6
 8004e20:	1c41      	adds	r1, r0, #1
 8004e22:	d1c7      	bne.n	8004db4 <__sflush_r+0x34>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0c4      	beq.n	8004db4 <__sflush_r+0x34>
 8004e2a:	2b1d      	cmp	r3, #29
 8004e2c:	d001      	beq.n	8004e32 <__sflush_r+0xb2>
 8004e2e:	2b16      	cmp	r3, #22
 8004e30:	d101      	bne.n	8004e36 <__sflush_r+0xb6>
 8004e32:	602f      	str	r7, [r5, #0]
 8004e34:	e7b1      	b.n	8004d9a <__sflush_r+0x1a>
 8004e36:	89a3      	ldrh	r3, [r4, #12]
 8004e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e3c:	81a3      	strh	r3, [r4, #12]
 8004e3e:	e7ad      	b.n	8004d9c <__sflush_r+0x1c>
 8004e40:	690f      	ldr	r7, [r1, #16]
 8004e42:	2f00      	cmp	r7, #0
 8004e44:	d0a9      	beq.n	8004d9a <__sflush_r+0x1a>
 8004e46:	0793      	lsls	r3, r2, #30
 8004e48:	680e      	ldr	r6, [r1, #0]
 8004e4a:	bf08      	it	eq
 8004e4c:	694b      	ldreq	r3, [r1, #20]
 8004e4e:	600f      	str	r7, [r1, #0]
 8004e50:	bf18      	it	ne
 8004e52:	2300      	movne	r3, #0
 8004e54:	eba6 0807 	sub.w	r8, r6, r7
 8004e58:	608b      	str	r3, [r1, #8]
 8004e5a:	f1b8 0f00 	cmp.w	r8, #0
 8004e5e:	dd9c      	ble.n	8004d9a <__sflush_r+0x1a>
 8004e60:	6a21      	ldr	r1, [r4, #32]
 8004e62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e64:	4643      	mov	r3, r8
 8004e66:	463a      	mov	r2, r7
 8004e68:	4628      	mov	r0, r5
 8004e6a:	47b0      	blx	r6
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	dc06      	bgt.n	8004e7e <__sflush_r+0xfe>
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e76:	81a3      	strh	r3, [r4, #12]
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	e78e      	b.n	8004d9c <__sflush_r+0x1c>
 8004e7e:	4407      	add	r7, r0
 8004e80:	eba8 0800 	sub.w	r8, r8, r0
 8004e84:	e7e9      	b.n	8004e5a <__sflush_r+0xda>
 8004e86:	bf00      	nop
 8004e88:	20400001 	.word	0x20400001

08004e8c <_fflush_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	690b      	ldr	r3, [r1, #16]
 8004e90:	4605      	mov	r5, r0
 8004e92:	460c      	mov	r4, r1
 8004e94:	b913      	cbnz	r3, 8004e9c <_fflush_r+0x10>
 8004e96:	2500      	movs	r5, #0
 8004e98:	4628      	mov	r0, r5
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
 8004e9c:	b118      	cbz	r0, 8004ea6 <_fflush_r+0x1a>
 8004e9e:	6983      	ldr	r3, [r0, #24]
 8004ea0:	b90b      	cbnz	r3, 8004ea6 <_fflush_r+0x1a>
 8004ea2:	f000 f887 	bl	8004fb4 <__sinit>
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <_fflush_r+0x6c>)
 8004ea8:	429c      	cmp	r4, r3
 8004eaa:	d11b      	bne.n	8004ee4 <_fflush_r+0x58>
 8004eac:	686c      	ldr	r4, [r5, #4]
 8004eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0ef      	beq.n	8004e96 <_fflush_r+0xa>
 8004eb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004eb8:	07d0      	lsls	r0, r2, #31
 8004eba:	d404      	bmi.n	8004ec6 <_fflush_r+0x3a>
 8004ebc:	0599      	lsls	r1, r3, #22
 8004ebe:	d402      	bmi.n	8004ec6 <_fflush_r+0x3a>
 8004ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ec2:	f000 f915 	bl	80050f0 <__retarget_lock_acquire_recursive>
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	4621      	mov	r1, r4
 8004eca:	f7ff ff59 	bl	8004d80 <__sflush_r>
 8004ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ed0:	07da      	lsls	r2, r3, #31
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	d4e0      	bmi.n	8004e98 <_fflush_r+0xc>
 8004ed6:	89a3      	ldrh	r3, [r4, #12]
 8004ed8:	059b      	lsls	r3, r3, #22
 8004eda:	d4dd      	bmi.n	8004e98 <_fflush_r+0xc>
 8004edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ede:	f000 f908 	bl	80050f2 <__retarget_lock_release_recursive>
 8004ee2:	e7d9      	b.n	8004e98 <_fflush_r+0xc>
 8004ee4:	4b05      	ldr	r3, [pc, #20]	; (8004efc <_fflush_r+0x70>)
 8004ee6:	429c      	cmp	r4, r3
 8004ee8:	d101      	bne.n	8004eee <_fflush_r+0x62>
 8004eea:	68ac      	ldr	r4, [r5, #8]
 8004eec:	e7df      	b.n	8004eae <_fflush_r+0x22>
 8004eee:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <_fflush_r+0x74>)
 8004ef0:	429c      	cmp	r4, r3
 8004ef2:	bf08      	it	eq
 8004ef4:	68ec      	ldreq	r4, [r5, #12]
 8004ef6:	e7da      	b.n	8004eae <_fflush_r+0x22>
 8004ef8:	0801b378 	.word	0x0801b378
 8004efc:	0801b398 	.word	0x0801b398
 8004f00:	0801b358 	.word	0x0801b358

08004f04 <std>:
 8004f04:	2300      	movs	r3, #0
 8004f06:	b510      	push	{r4, lr}
 8004f08:	4604      	mov	r4, r0
 8004f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f12:	6083      	str	r3, [r0, #8]
 8004f14:	8181      	strh	r1, [r0, #12]
 8004f16:	6643      	str	r3, [r0, #100]	; 0x64
 8004f18:	81c2      	strh	r2, [r0, #14]
 8004f1a:	6183      	str	r3, [r0, #24]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	2208      	movs	r2, #8
 8004f20:	305c      	adds	r0, #92	; 0x5c
 8004f22:	f7ff fdc1 	bl	8004aa8 <memset>
 8004f26:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <std+0x38>)
 8004f28:	6263      	str	r3, [r4, #36]	; 0x24
 8004f2a:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <std+0x3c>)
 8004f2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f2e:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <std+0x40>)
 8004f30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f32:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <std+0x44>)
 8004f34:	6224      	str	r4, [r4, #32]
 8004f36:	6323      	str	r3, [r4, #48]	; 0x30
 8004f38:	bd10      	pop	{r4, pc}
 8004f3a:	bf00      	nop
 8004f3c:	0800599d 	.word	0x0800599d
 8004f40:	080059bf 	.word	0x080059bf
 8004f44:	080059f7 	.word	0x080059f7
 8004f48:	08005a1b 	.word	0x08005a1b

08004f4c <_cleanup_r>:
 8004f4c:	4901      	ldr	r1, [pc, #4]	; (8004f54 <_cleanup_r+0x8>)
 8004f4e:	f000 b8af 	b.w	80050b0 <_fwalk_reent>
 8004f52:	bf00      	nop
 8004f54:	08004e8d 	.word	0x08004e8d

08004f58 <__sfmoreglue>:
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	1e4a      	subs	r2, r1, #1
 8004f5c:	2568      	movs	r5, #104	; 0x68
 8004f5e:	4355      	muls	r5, r2
 8004f60:	460e      	mov	r6, r1
 8004f62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f66:	f000 f979 	bl	800525c <_malloc_r>
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	b140      	cbz	r0, 8004f80 <__sfmoreglue+0x28>
 8004f6e:	2100      	movs	r1, #0
 8004f70:	e9c0 1600 	strd	r1, r6, [r0]
 8004f74:	300c      	adds	r0, #12
 8004f76:	60a0      	str	r0, [r4, #8]
 8004f78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f7c:	f7ff fd94 	bl	8004aa8 <memset>
 8004f80:	4620      	mov	r0, r4
 8004f82:	bd70      	pop	{r4, r5, r6, pc}

08004f84 <__sfp_lock_acquire>:
 8004f84:	4801      	ldr	r0, [pc, #4]	; (8004f8c <__sfp_lock_acquire+0x8>)
 8004f86:	f000 b8b3 	b.w	80050f0 <__retarget_lock_acquire_recursive>
 8004f8a:	bf00      	nop
 8004f8c:	20000140 	.word	0x20000140

08004f90 <__sfp_lock_release>:
 8004f90:	4801      	ldr	r0, [pc, #4]	; (8004f98 <__sfp_lock_release+0x8>)
 8004f92:	f000 b8ae 	b.w	80050f2 <__retarget_lock_release_recursive>
 8004f96:	bf00      	nop
 8004f98:	20000140 	.word	0x20000140

08004f9c <__sinit_lock_acquire>:
 8004f9c:	4801      	ldr	r0, [pc, #4]	; (8004fa4 <__sinit_lock_acquire+0x8>)
 8004f9e:	f000 b8a7 	b.w	80050f0 <__retarget_lock_acquire_recursive>
 8004fa2:	bf00      	nop
 8004fa4:	2000013b 	.word	0x2000013b

08004fa8 <__sinit_lock_release>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	; (8004fb0 <__sinit_lock_release+0x8>)
 8004faa:	f000 b8a2 	b.w	80050f2 <__retarget_lock_release_recursive>
 8004fae:	bf00      	nop
 8004fb0:	2000013b 	.word	0x2000013b

08004fb4 <__sinit>:
 8004fb4:	b510      	push	{r4, lr}
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	f7ff fff0 	bl	8004f9c <__sinit_lock_acquire>
 8004fbc:	69a3      	ldr	r3, [r4, #24]
 8004fbe:	b11b      	cbz	r3, 8004fc8 <__sinit+0x14>
 8004fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fc4:	f7ff bff0 	b.w	8004fa8 <__sinit_lock_release>
 8004fc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004fcc:	6523      	str	r3, [r4, #80]	; 0x50
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <__sinit+0x68>)
 8004fd0:	4a13      	ldr	r2, [pc, #76]	; (8005020 <__sinit+0x6c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	bf04      	itt	eq
 8004fda:	2301      	moveq	r3, #1
 8004fdc:	61a3      	streq	r3, [r4, #24]
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f000 f820 	bl	8005024 <__sfp>
 8004fe4:	6060      	str	r0, [r4, #4]
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f000 f81c 	bl	8005024 <__sfp>
 8004fec:	60a0      	str	r0, [r4, #8]
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f000 f818 	bl	8005024 <__sfp>
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	60e0      	str	r0, [r4, #12]
 8004ff8:	2104      	movs	r1, #4
 8004ffa:	6860      	ldr	r0, [r4, #4]
 8004ffc:	f7ff ff82 	bl	8004f04 <std>
 8005000:	68a0      	ldr	r0, [r4, #8]
 8005002:	2201      	movs	r2, #1
 8005004:	2109      	movs	r1, #9
 8005006:	f7ff ff7d 	bl	8004f04 <std>
 800500a:	68e0      	ldr	r0, [r4, #12]
 800500c:	2202      	movs	r2, #2
 800500e:	2112      	movs	r1, #18
 8005010:	f7ff ff78 	bl	8004f04 <std>
 8005014:	2301      	movs	r3, #1
 8005016:	61a3      	str	r3, [r4, #24]
 8005018:	e7d2      	b.n	8004fc0 <__sinit+0xc>
 800501a:	bf00      	nop
 800501c:	0801b354 	.word	0x0801b354
 8005020:	08004f4d 	.word	0x08004f4d

08005024 <__sfp>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	4607      	mov	r7, r0
 8005028:	f7ff ffac 	bl	8004f84 <__sfp_lock_acquire>
 800502c:	4b1e      	ldr	r3, [pc, #120]	; (80050a8 <__sfp+0x84>)
 800502e:	681e      	ldr	r6, [r3, #0]
 8005030:	69b3      	ldr	r3, [r6, #24]
 8005032:	b913      	cbnz	r3, 800503a <__sfp+0x16>
 8005034:	4630      	mov	r0, r6
 8005036:	f7ff ffbd 	bl	8004fb4 <__sinit>
 800503a:	3648      	adds	r6, #72	; 0x48
 800503c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005040:	3b01      	subs	r3, #1
 8005042:	d503      	bpl.n	800504c <__sfp+0x28>
 8005044:	6833      	ldr	r3, [r6, #0]
 8005046:	b30b      	cbz	r3, 800508c <__sfp+0x68>
 8005048:	6836      	ldr	r6, [r6, #0]
 800504a:	e7f7      	b.n	800503c <__sfp+0x18>
 800504c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005050:	b9d5      	cbnz	r5, 8005088 <__sfp+0x64>
 8005052:	4b16      	ldr	r3, [pc, #88]	; (80050ac <__sfp+0x88>)
 8005054:	60e3      	str	r3, [r4, #12]
 8005056:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800505a:	6665      	str	r5, [r4, #100]	; 0x64
 800505c:	f000 f847 	bl	80050ee <__retarget_lock_init_recursive>
 8005060:	f7ff ff96 	bl	8004f90 <__sfp_lock_release>
 8005064:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005068:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800506c:	6025      	str	r5, [r4, #0]
 800506e:	61a5      	str	r5, [r4, #24]
 8005070:	2208      	movs	r2, #8
 8005072:	4629      	mov	r1, r5
 8005074:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005078:	f7ff fd16 	bl	8004aa8 <memset>
 800507c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005080:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005084:	4620      	mov	r0, r4
 8005086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005088:	3468      	adds	r4, #104	; 0x68
 800508a:	e7d9      	b.n	8005040 <__sfp+0x1c>
 800508c:	2104      	movs	r1, #4
 800508e:	4638      	mov	r0, r7
 8005090:	f7ff ff62 	bl	8004f58 <__sfmoreglue>
 8005094:	4604      	mov	r4, r0
 8005096:	6030      	str	r0, [r6, #0]
 8005098:	2800      	cmp	r0, #0
 800509a:	d1d5      	bne.n	8005048 <__sfp+0x24>
 800509c:	f7ff ff78 	bl	8004f90 <__sfp_lock_release>
 80050a0:	230c      	movs	r3, #12
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	e7ee      	b.n	8005084 <__sfp+0x60>
 80050a6:	bf00      	nop
 80050a8:	0801b354 	.word	0x0801b354
 80050ac:	ffff0001 	.word	0xffff0001

080050b0 <_fwalk_reent>:
 80050b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050b4:	4606      	mov	r6, r0
 80050b6:	4688      	mov	r8, r1
 80050b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050bc:	2700      	movs	r7, #0
 80050be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050c2:	f1b9 0901 	subs.w	r9, r9, #1
 80050c6:	d505      	bpl.n	80050d4 <_fwalk_reent+0x24>
 80050c8:	6824      	ldr	r4, [r4, #0]
 80050ca:	2c00      	cmp	r4, #0
 80050cc:	d1f7      	bne.n	80050be <_fwalk_reent+0xe>
 80050ce:	4638      	mov	r0, r7
 80050d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050d4:	89ab      	ldrh	r3, [r5, #12]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d907      	bls.n	80050ea <_fwalk_reent+0x3a>
 80050da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050de:	3301      	adds	r3, #1
 80050e0:	d003      	beq.n	80050ea <_fwalk_reent+0x3a>
 80050e2:	4629      	mov	r1, r5
 80050e4:	4630      	mov	r0, r6
 80050e6:	47c0      	blx	r8
 80050e8:	4307      	orrs	r7, r0
 80050ea:	3568      	adds	r5, #104	; 0x68
 80050ec:	e7e9      	b.n	80050c2 <_fwalk_reent+0x12>

080050ee <__retarget_lock_init_recursive>:
 80050ee:	4770      	bx	lr

080050f0 <__retarget_lock_acquire_recursive>:
 80050f0:	4770      	bx	lr

080050f2 <__retarget_lock_release_recursive>:
 80050f2:	4770      	bx	lr

080050f4 <__swhatbuf_r>:
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	460e      	mov	r6, r1
 80050f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050fc:	2900      	cmp	r1, #0
 80050fe:	b096      	sub	sp, #88	; 0x58
 8005100:	4614      	mov	r4, r2
 8005102:	461d      	mov	r5, r3
 8005104:	da07      	bge.n	8005116 <__swhatbuf_r+0x22>
 8005106:	2300      	movs	r3, #0
 8005108:	602b      	str	r3, [r5, #0]
 800510a:	89b3      	ldrh	r3, [r6, #12]
 800510c:	061a      	lsls	r2, r3, #24
 800510e:	d410      	bmi.n	8005132 <__swhatbuf_r+0x3e>
 8005110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005114:	e00e      	b.n	8005134 <__swhatbuf_r+0x40>
 8005116:	466a      	mov	r2, sp
 8005118:	f000 fca6 	bl	8005a68 <_fstat_r>
 800511c:	2800      	cmp	r0, #0
 800511e:	dbf2      	blt.n	8005106 <__swhatbuf_r+0x12>
 8005120:	9a01      	ldr	r2, [sp, #4]
 8005122:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005126:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800512a:	425a      	negs	r2, r3
 800512c:	415a      	adcs	r2, r3
 800512e:	602a      	str	r2, [r5, #0]
 8005130:	e7ee      	b.n	8005110 <__swhatbuf_r+0x1c>
 8005132:	2340      	movs	r3, #64	; 0x40
 8005134:	2000      	movs	r0, #0
 8005136:	6023      	str	r3, [r4, #0]
 8005138:	b016      	add	sp, #88	; 0x58
 800513a:	bd70      	pop	{r4, r5, r6, pc}

0800513c <__smakebuf_r>:
 800513c:	898b      	ldrh	r3, [r1, #12]
 800513e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005140:	079d      	lsls	r5, r3, #30
 8005142:	4606      	mov	r6, r0
 8005144:	460c      	mov	r4, r1
 8005146:	d507      	bpl.n	8005158 <__smakebuf_r+0x1c>
 8005148:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	6123      	str	r3, [r4, #16]
 8005150:	2301      	movs	r3, #1
 8005152:	6163      	str	r3, [r4, #20]
 8005154:	b002      	add	sp, #8
 8005156:	bd70      	pop	{r4, r5, r6, pc}
 8005158:	ab01      	add	r3, sp, #4
 800515a:	466a      	mov	r2, sp
 800515c:	f7ff ffca 	bl	80050f4 <__swhatbuf_r>
 8005160:	9900      	ldr	r1, [sp, #0]
 8005162:	4605      	mov	r5, r0
 8005164:	4630      	mov	r0, r6
 8005166:	f000 f879 	bl	800525c <_malloc_r>
 800516a:	b948      	cbnz	r0, 8005180 <__smakebuf_r+0x44>
 800516c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005170:	059a      	lsls	r2, r3, #22
 8005172:	d4ef      	bmi.n	8005154 <__smakebuf_r+0x18>
 8005174:	f023 0303 	bic.w	r3, r3, #3
 8005178:	f043 0302 	orr.w	r3, r3, #2
 800517c:	81a3      	strh	r3, [r4, #12]
 800517e:	e7e3      	b.n	8005148 <__smakebuf_r+0xc>
 8005180:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <__smakebuf_r+0x7c>)
 8005182:	62b3      	str	r3, [r6, #40]	; 0x28
 8005184:	89a3      	ldrh	r3, [r4, #12]
 8005186:	6020      	str	r0, [r4, #0]
 8005188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518c:	81a3      	strh	r3, [r4, #12]
 800518e:	9b00      	ldr	r3, [sp, #0]
 8005190:	6163      	str	r3, [r4, #20]
 8005192:	9b01      	ldr	r3, [sp, #4]
 8005194:	6120      	str	r0, [r4, #16]
 8005196:	b15b      	cbz	r3, 80051b0 <__smakebuf_r+0x74>
 8005198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800519c:	4630      	mov	r0, r6
 800519e:	f000 fc75 	bl	8005a8c <_isatty_r>
 80051a2:	b128      	cbz	r0, 80051b0 <__smakebuf_r+0x74>
 80051a4:	89a3      	ldrh	r3, [r4, #12]
 80051a6:	f023 0303 	bic.w	r3, r3, #3
 80051aa:	f043 0301 	orr.w	r3, r3, #1
 80051ae:	81a3      	strh	r3, [r4, #12]
 80051b0:	89a0      	ldrh	r0, [r4, #12]
 80051b2:	4305      	orrs	r5, r0
 80051b4:	81a5      	strh	r5, [r4, #12]
 80051b6:	e7cd      	b.n	8005154 <__smakebuf_r+0x18>
 80051b8:	08004f4d 	.word	0x08004f4d

080051bc <_free_r>:
 80051bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051be:	2900      	cmp	r1, #0
 80051c0:	d048      	beq.n	8005254 <_free_r+0x98>
 80051c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c6:	9001      	str	r0, [sp, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f1a1 0404 	sub.w	r4, r1, #4
 80051ce:	bfb8      	it	lt
 80051d0:	18e4      	addlt	r4, r4, r3
 80051d2:	f000 fc7d 	bl	8005ad0 <__malloc_lock>
 80051d6:	4a20      	ldr	r2, [pc, #128]	; (8005258 <_free_r+0x9c>)
 80051d8:	9801      	ldr	r0, [sp, #4]
 80051da:	6813      	ldr	r3, [r2, #0]
 80051dc:	4615      	mov	r5, r2
 80051de:	b933      	cbnz	r3, 80051ee <_free_r+0x32>
 80051e0:	6063      	str	r3, [r4, #4]
 80051e2:	6014      	str	r4, [r2, #0]
 80051e4:	b003      	add	sp, #12
 80051e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051ea:	f000 bc77 	b.w	8005adc <__malloc_unlock>
 80051ee:	42a3      	cmp	r3, r4
 80051f0:	d90b      	bls.n	800520a <_free_r+0x4e>
 80051f2:	6821      	ldr	r1, [r4, #0]
 80051f4:	1862      	adds	r2, r4, r1
 80051f6:	4293      	cmp	r3, r2
 80051f8:	bf04      	itt	eq
 80051fa:	681a      	ldreq	r2, [r3, #0]
 80051fc:	685b      	ldreq	r3, [r3, #4]
 80051fe:	6063      	str	r3, [r4, #4]
 8005200:	bf04      	itt	eq
 8005202:	1852      	addeq	r2, r2, r1
 8005204:	6022      	streq	r2, [r4, #0]
 8005206:	602c      	str	r4, [r5, #0]
 8005208:	e7ec      	b.n	80051e4 <_free_r+0x28>
 800520a:	461a      	mov	r2, r3
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	b10b      	cbz	r3, 8005214 <_free_r+0x58>
 8005210:	42a3      	cmp	r3, r4
 8005212:	d9fa      	bls.n	800520a <_free_r+0x4e>
 8005214:	6811      	ldr	r1, [r2, #0]
 8005216:	1855      	adds	r5, r2, r1
 8005218:	42a5      	cmp	r5, r4
 800521a:	d10b      	bne.n	8005234 <_free_r+0x78>
 800521c:	6824      	ldr	r4, [r4, #0]
 800521e:	4421      	add	r1, r4
 8005220:	1854      	adds	r4, r2, r1
 8005222:	42a3      	cmp	r3, r4
 8005224:	6011      	str	r1, [r2, #0]
 8005226:	d1dd      	bne.n	80051e4 <_free_r+0x28>
 8005228:	681c      	ldr	r4, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	6053      	str	r3, [r2, #4]
 800522e:	4421      	add	r1, r4
 8005230:	6011      	str	r1, [r2, #0]
 8005232:	e7d7      	b.n	80051e4 <_free_r+0x28>
 8005234:	d902      	bls.n	800523c <_free_r+0x80>
 8005236:	230c      	movs	r3, #12
 8005238:	6003      	str	r3, [r0, #0]
 800523a:	e7d3      	b.n	80051e4 <_free_r+0x28>
 800523c:	6825      	ldr	r5, [r4, #0]
 800523e:	1961      	adds	r1, r4, r5
 8005240:	428b      	cmp	r3, r1
 8005242:	bf04      	itt	eq
 8005244:	6819      	ldreq	r1, [r3, #0]
 8005246:	685b      	ldreq	r3, [r3, #4]
 8005248:	6063      	str	r3, [r4, #4]
 800524a:	bf04      	itt	eq
 800524c:	1949      	addeq	r1, r1, r5
 800524e:	6021      	streq	r1, [r4, #0]
 8005250:	6054      	str	r4, [r2, #4]
 8005252:	e7c7      	b.n	80051e4 <_free_r+0x28>
 8005254:	b003      	add	sp, #12
 8005256:	bd30      	pop	{r4, r5, pc}
 8005258:	20000094 	.word	0x20000094

0800525c <_malloc_r>:
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	1ccd      	adds	r5, r1, #3
 8005260:	f025 0503 	bic.w	r5, r5, #3
 8005264:	3508      	adds	r5, #8
 8005266:	2d0c      	cmp	r5, #12
 8005268:	bf38      	it	cc
 800526a:	250c      	movcc	r5, #12
 800526c:	2d00      	cmp	r5, #0
 800526e:	4606      	mov	r6, r0
 8005270:	db01      	blt.n	8005276 <_malloc_r+0x1a>
 8005272:	42a9      	cmp	r1, r5
 8005274:	d903      	bls.n	800527e <_malloc_r+0x22>
 8005276:	230c      	movs	r3, #12
 8005278:	6033      	str	r3, [r6, #0]
 800527a:	2000      	movs	r0, #0
 800527c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800527e:	f000 fc27 	bl	8005ad0 <__malloc_lock>
 8005282:	4921      	ldr	r1, [pc, #132]	; (8005308 <_malloc_r+0xac>)
 8005284:	680a      	ldr	r2, [r1, #0]
 8005286:	4614      	mov	r4, r2
 8005288:	b99c      	cbnz	r4, 80052b2 <_malloc_r+0x56>
 800528a:	4f20      	ldr	r7, [pc, #128]	; (800530c <_malloc_r+0xb0>)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	b923      	cbnz	r3, 800529a <_malloc_r+0x3e>
 8005290:	4621      	mov	r1, r4
 8005292:	4630      	mov	r0, r6
 8005294:	f000 fb72 	bl	800597c <_sbrk_r>
 8005298:	6038      	str	r0, [r7, #0]
 800529a:	4629      	mov	r1, r5
 800529c:	4630      	mov	r0, r6
 800529e:	f000 fb6d 	bl	800597c <_sbrk_r>
 80052a2:	1c43      	adds	r3, r0, #1
 80052a4:	d123      	bne.n	80052ee <_malloc_r+0x92>
 80052a6:	230c      	movs	r3, #12
 80052a8:	6033      	str	r3, [r6, #0]
 80052aa:	4630      	mov	r0, r6
 80052ac:	f000 fc16 	bl	8005adc <__malloc_unlock>
 80052b0:	e7e3      	b.n	800527a <_malloc_r+0x1e>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	1b5b      	subs	r3, r3, r5
 80052b6:	d417      	bmi.n	80052e8 <_malloc_r+0x8c>
 80052b8:	2b0b      	cmp	r3, #11
 80052ba:	d903      	bls.n	80052c4 <_malloc_r+0x68>
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	441c      	add	r4, r3
 80052c0:	6025      	str	r5, [r4, #0]
 80052c2:	e004      	b.n	80052ce <_malloc_r+0x72>
 80052c4:	6863      	ldr	r3, [r4, #4]
 80052c6:	42a2      	cmp	r2, r4
 80052c8:	bf0c      	ite	eq
 80052ca:	600b      	streq	r3, [r1, #0]
 80052cc:	6053      	strne	r3, [r2, #4]
 80052ce:	4630      	mov	r0, r6
 80052d0:	f000 fc04 	bl	8005adc <__malloc_unlock>
 80052d4:	f104 000b 	add.w	r0, r4, #11
 80052d8:	1d23      	adds	r3, r4, #4
 80052da:	f020 0007 	bic.w	r0, r0, #7
 80052de:	1ac2      	subs	r2, r0, r3
 80052e0:	d0cc      	beq.n	800527c <_malloc_r+0x20>
 80052e2:	1a1b      	subs	r3, r3, r0
 80052e4:	50a3      	str	r3, [r4, r2]
 80052e6:	e7c9      	b.n	800527c <_malloc_r+0x20>
 80052e8:	4622      	mov	r2, r4
 80052ea:	6864      	ldr	r4, [r4, #4]
 80052ec:	e7cc      	b.n	8005288 <_malloc_r+0x2c>
 80052ee:	1cc4      	adds	r4, r0, #3
 80052f0:	f024 0403 	bic.w	r4, r4, #3
 80052f4:	42a0      	cmp	r0, r4
 80052f6:	d0e3      	beq.n	80052c0 <_malloc_r+0x64>
 80052f8:	1a21      	subs	r1, r4, r0
 80052fa:	4630      	mov	r0, r6
 80052fc:	f000 fb3e 	bl	800597c <_sbrk_r>
 8005300:	3001      	adds	r0, #1
 8005302:	d1dd      	bne.n	80052c0 <_malloc_r+0x64>
 8005304:	e7cf      	b.n	80052a6 <_malloc_r+0x4a>
 8005306:	bf00      	nop
 8005308:	20000094 	.word	0x20000094
 800530c:	20000098 	.word	0x20000098

08005310 <__sfputc_r>:
 8005310:	6893      	ldr	r3, [r2, #8]
 8005312:	3b01      	subs	r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	b410      	push	{r4}
 8005318:	6093      	str	r3, [r2, #8]
 800531a:	da08      	bge.n	800532e <__sfputc_r+0x1e>
 800531c:	6994      	ldr	r4, [r2, #24]
 800531e:	42a3      	cmp	r3, r4
 8005320:	db01      	blt.n	8005326 <__sfputc_r+0x16>
 8005322:	290a      	cmp	r1, #10
 8005324:	d103      	bne.n	800532e <__sfputc_r+0x1e>
 8005326:	f85d 4b04 	ldr.w	r4, [sp], #4
 800532a:	f7ff bc69 	b.w	8004c00 <__swbuf_r>
 800532e:	6813      	ldr	r3, [r2, #0]
 8005330:	1c58      	adds	r0, r3, #1
 8005332:	6010      	str	r0, [r2, #0]
 8005334:	7019      	strb	r1, [r3, #0]
 8005336:	4608      	mov	r0, r1
 8005338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800533c:	4770      	bx	lr

0800533e <__sfputs_r>:
 800533e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005340:	4606      	mov	r6, r0
 8005342:	460f      	mov	r7, r1
 8005344:	4614      	mov	r4, r2
 8005346:	18d5      	adds	r5, r2, r3
 8005348:	42ac      	cmp	r4, r5
 800534a:	d101      	bne.n	8005350 <__sfputs_r+0x12>
 800534c:	2000      	movs	r0, #0
 800534e:	e007      	b.n	8005360 <__sfputs_r+0x22>
 8005350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005354:	463a      	mov	r2, r7
 8005356:	4630      	mov	r0, r6
 8005358:	f7ff ffda 	bl	8005310 <__sfputc_r>
 800535c:	1c43      	adds	r3, r0, #1
 800535e:	d1f3      	bne.n	8005348 <__sfputs_r+0xa>
 8005360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005364 <_vfiprintf_r>:
 8005364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005368:	460d      	mov	r5, r1
 800536a:	b09d      	sub	sp, #116	; 0x74
 800536c:	4614      	mov	r4, r2
 800536e:	4698      	mov	r8, r3
 8005370:	4606      	mov	r6, r0
 8005372:	b118      	cbz	r0, 800537c <_vfiprintf_r+0x18>
 8005374:	6983      	ldr	r3, [r0, #24]
 8005376:	b90b      	cbnz	r3, 800537c <_vfiprintf_r+0x18>
 8005378:	f7ff fe1c 	bl	8004fb4 <__sinit>
 800537c:	4b89      	ldr	r3, [pc, #548]	; (80055a4 <_vfiprintf_r+0x240>)
 800537e:	429d      	cmp	r5, r3
 8005380:	d11b      	bne.n	80053ba <_vfiprintf_r+0x56>
 8005382:	6875      	ldr	r5, [r6, #4]
 8005384:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005386:	07d9      	lsls	r1, r3, #31
 8005388:	d405      	bmi.n	8005396 <_vfiprintf_r+0x32>
 800538a:	89ab      	ldrh	r3, [r5, #12]
 800538c:	059a      	lsls	r2, r3, #22
 800538e:	d402      	bmi.n	8005396 <_vfiprintf_r+0x32>
 8005390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005392:	f7ff fead 	bl	80050f0 <__retarget_lock_acquire_recursive>
 8005396:	89ab      	ldrh	r3, [r5, #12]
 8005398:	071b      	lsls	r3, r3, #28
 800539a:	d501      	bpl.n	80053a0 <_vfiprintf_r+0x3c>
 800539c:	692b      	ldr	r3, [r5, #16]
 800539e:	b9eb      	cbnz	r3, 80053dc <_vfiprintf_r+0x78>
 80053a0:	4629      	mov	r1, r5
 80053a2:	4630      	mov	r0, r6
 80053a4:	f7ff fc7e 	bl	8004ca4 <__swsetup_r>
 80053a8:	b1c0      	cbz	r0, 80053dc <_vfiprintf_r+0x78>
 80053aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053ac:	07dc      	lsls	r4, r3, #31
 80053ae:	d50e      	bpl.n	80053ce <_vfiprintf_r+0x6a>
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295
 80053b4:	b01d      	add	sp, #116	; 0x74
 80053b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ba:	4b7b      	ldr	r3, [pc, #492]	; (80055a8 <_vfiprintf_r+0x244>)
 80053bc:	429d      	cmp	r5, r3
 80053be:	d101      	bne.n	80053c4 <_vfiprintf_r+0x60>
 80053c0:	68b5      	ldr	r5, [r6, #8]
 80053c2:	e7df      	b.n	8005384 <_vfiprintf_r+0x20>
 80053c4:	4b79      	ldr	r3, [pc, #484]	; (80055ac <_vfiprintf_r+0x248>)
 80053c6:	429d      	cmp	r5, r3
 80053c8:	bf08      	it	eq
 80053ca:	68f5      	ldreq	r5, [r6, #12]
 80053cc:	e7da      	b.n	8005384 <_vfiprintf_r+0x20>
 80053ce:	89ab      	ldrh	r3, [r5, #12]
 80053d0:	0598      	lsls	r0, r3, #22
 80053d2:	d4ed      	bmi.n	80053b0 <_vfiprintf_r+0x4c>
 80053d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053d6:	f7ff fe8c 	bl	80050f2 <__retarget_lock_release_recursive>
 80053da:	e7e9      	b.n	80053b0 <_vfiprintf_r+0x4c>
 80053dc:	2300      	movs	r3, #0
 80053de:	9309      	str	r3, [sp, #36]	; 0x24
 80053e0:	2320      	movs	r3, #32
 80053e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80053ea:	2330      	movs	r3, #48	; 0x30
 80053ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80055b0 <_vfiprintf_r+0x24c>
 80053f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053f4:	f04f 0901 	mov.w	r9, #1
 80053f8:	4623      	mov	r3, r4
 80053fa:	469a      	mov	sl, r3
 80053fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005400:	b10a      	cbz	r2, 8005406 <_vfiprintf_r+0xa2>
 8005402:	2a25      	cmp	r2, #37	; 0x25
 8005404:	d1f9      	bne.n	80053fa <_vfiprintf_r+0x96>
 8005406:	ebba 0b04 	subs.w	fp, sl, r4
 800540a:	d00b      	beq.n	8005424 <_vfiprintf_r+0xc0>
 800540c:	465b      	mov	r3, fp
 800540e:	4622      	mov	r2, r4
 8005410:	4629      	mov	r1, r5
 8005412:	4630      	mov	r0, r6
 8005414:	f7ff ff93 	bl	800533e <__sfputs_r>
 8005418:	3001      	adds	r0, #1
 800541a:	f000 80aa 	beq.w	8005572 <_vfiprintf_r+0x20e>
 800541e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005420:	445a      	add	r2, fp
 8005422:	9209      	str	r2, [sp, #36]	; 0x24
 8005424:	f89a 3000 	ldrb.w	r3, [sl]
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 80a2 	beq.w	8005572 <_vfiprintf_r+0x20e>
 800542e:	2300      	movs	r3, #0
 8005430:	f04f 32ff 	mov.w	r2, #4294967295
 8005434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005438:	f10a 0a01 	add.w	sl, sl, #1
 800543c:	9304      	str	r3, [sp, #16]
 800543e:	9307      	str	r3, [sp, #28]
 8005440:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005444:	931a      	str	r3, [sp, #104]	; 0x68
 8005446:	4654      	mov	r4, sl
 8005448:	2205      	movs	r2, #5
 800544a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800544e:	4858      	ldr	r0, [pc, #352]	; (80055b0 <_vfiprintf_r+0x24c>)
 8005450:	f7fa fec6 	bl	80001e0 <memchr>
 8005454:	9a04      	ldr	r2, [sp, #16]
 8005456:	b9d8      	cbnz	r0, 8005490 <_vfiprintf_r+0x12c>
 8005458:	06d1      	lsls	r1, r2, #27
 800545a:	bf44      	itt	mi
 800545c:	2320      	movmi	r3, #32
 800545e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005462:	0713      	lsls	r3, r2, #28
 8005464:	bf44      	itt	mi
 8005466:	232b      	movmi	r3, #43	; 0x2b
 8005468:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800546c:	f89a 3000 	ldrb.w	r3, [sl]
 8005470:	2b2a      	cmp	r3, #42	; 0x2a
 8005472:	d015      	beq.n	80054a0 <_vfiprintf_r+0x13c>
 8005474:	9a07      	ldr	r2, [sp, #28]
 8005476:	4654      	mov	r4, sl
 8005478:	2000      	movs	r0, #0
 800547a:	f04f 0c0a 	mov.w	ip, #10
 800547e:	4621      	mov	r1, r4
 8005480:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005484:	3b30      	subs	r3, #48	; 0x30
 8005486:	2b09      	cmp	r3, #9
 8005488:	d94e      	bls.n	8005528 <_vfiprintf_r+0x1c4>
 800548a:	b1b0      	cbz	r0, 80054ba <_vfiprintf_r+0x156>
 800548c:	9207      	str	r2, [sp, #28]
 800548e:	e014      	b.n	80054ba <_vfiprintf_r+0x156>
 8005490:	eba0 0308 	sub.w	r3, r0, r8
 8005494:	fa09 f303 	lsl.w	r3, r9, r3
 8005498:	4313      	orrs	r3, r2
 800549a:	9304      	str	r3, [sp, #16]
 800549c:	46a2      	mov	sl, r4
 800549e:	e7d2      	b.n	8005446 <_vfiprintf_r+0xe2>
 80054a0:	9b03      	ldr	r3, [sp, #12]
 80054a2:	1d19      	adds	r1, r3, #4
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	9103      	str	r1, [sp, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	bfbb      	ittet	lt
 80054ac:	425b      	neglt	r3, r3
 80054ae:	f042 0202 	orrlt.w	r2, r2, #2
 80054b2:	9307      	strge	r3, [sp, #28]
 80054b4:	9307      	strlt	r3, [sp, #28]
 80054b6:	bfb8      	it	lt
 80054b8:	9204      	strlt	r2, [sp, #16]
 80054ba:	7823      	ldrb	r3, [r4, #0]
 80054bc:	2b2e      	cmp	r3, #46	; 0x2e
 80054be:	d10c      	bne.n	80054da <_vfiprintf_r+0x176>
 80054c0:	7863      	ldrb	r3, [r4, #1]
 80054c2:	2b2a      	cmp	r3, #42	; 0x2a
 80054c4:	d135      	bne.n	8005532 <_vfiprintf_r+0x1ce>
 80054c6:	9b03      	ldr	r3, [sp, #12]
 80054c8:	1d1a      	adds	r2, r3, #4
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	9203      	str	r2, [sp, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bfb8      	it	lt
 80054d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80054d6:	3402      	adds	r4, #2
 80054d8:	9305      	str	r3, [sp, #20]
 80054da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80055c0 <_vfiprintf_r+0x25c>
 80054de:	7821      	ldrb	r1, [r4, #0]
 80054e0:	2203      	movs	r2, #3
 80054e2:	4650      	mov	r0, sl
 80054e4:	f7fa fe7c 	bl	80001e0 <memchr>
 80054e8:	b140      	cbz	r0, 80054fc <_vfiprintf_r+0x198>
 80054ea:	2340      	movs	r3, #64	; 0x40
 80054ec:	eba0 000a 	sub.w	r0, r0, sl
 80054f0:	fa03 f000 	lsl.w	r0, r3, r0
 80054f4:	9b04      	ldr	r3, [sp, #16]
 80054f6:	4303      	orrs	r3, r0
 80054f8:	3401      	adds	r4, #1
 80054fa:	9304      	str	r3, [sp, #16]
 80054fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005500:	482c      	ldr	r0, [pc, #176]	; (80055b4 <_vfiprintf_r+0x250>)
 8005502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005506:	2206      	movs	r2, #6
 8005508:	f7fa fe6a 	bl	80001e0 <memchr>
 800550c:	2800      	cmp	r0, #0
 800550e:	d03f      	beq.n	8005590 <_vfiprintf_r+0x22c>
 8005510:	4b29      	ldr	r3, [pc, #164]	; (80055b8 <_vfiprintf_r+0x254>)
 8005512:	bb1b      	cbnz	r3, 800555c <_vfiprintf_r+0x1f8>
 8005514:	9b03      	ldr	r3, [sp, #12]
 8005516:	3307      	adds	r3, #7
 8005518:	f023 0307 	bic.w	r3, r3, #7
 800551c:	3308      	adds	r3, #8
 800551e:	9303      	str	r3, [sp, #12]
 8005520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005522:	443b      	add	r3, r7
 8005524:	9309      	str	r3, [sp, #36]	; 0x24
 8005526:	e767      	b.n	80053f8 <_vfiprintf_r+0x94>
 8005528:	fb0c 3202 	mla	r2, ip, r2, r3
 800552c:	460c      	mov	r4, r1
 800552e:	2001      	movs	r0, #1
 8005530:	e7a5      	b.n	800547e <_vfiprintf_r+0x11a>
 8005532:	2300      	movs	r3, #0
 8005534:	3401      	adds	r4, #1
 8005536:	9305      	str	r3, [sp, #20]
 8005538:	4619      	mov	r1, r3
 800553a:	f04f 0c0a 	mov.w	ip, #10
 800553e:	4620      	mov	r0, r4
 8005540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005544:	3a30      	subs	r2, #48	; 0x30
 8005546:	2a09      	cmp	r2, #9
 8005548:	d903      	bls.n	8005552 <_vfiprintf_r+0x1ee>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0c5      	beq.n	80054da <_vfiprintf_r+0x176>
 800554e:	9105      	str	r1, [sp, #20]
 8005550:	e7c3      	b.n	80054da <_vfiprintf_r+0x176>
 8005552:	fb0c 2101 	mla	r1, ip, r1, r2
 8005556:	4604      	mov	r4, r0
 8005558:	2301      	movs	r3, #1
 800555a:	e7f0      	b.n	800553e <_vfiprintf_r+0x1da>
 800555c:	ab03      	add	r3, sp, #12
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	462a      	mov	r2, r5
 8005562:	4b16      	ldr	r3, [pc, #88]	; (80055bc <_vfiprintf_r+0x258>)
 8005564:	a904      	add	r1, sp, #16
 8005566:	4630      	mov	r0, r6
 8005568:	f3af 8000 	nop.w
 800556c:	4607      	mov	r7, r0
 800556e:	1c78      	adds	r0, r7, #1
 8005570:	d1d6      	bne.n	8005520 <_vfiprintf_r+0x1bc>
 8005572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005574:	07d9      	lsls	r1, r3, #31
 8005576:	d405      	bmi.n	8005584 <_vfiprintf_r+0x220>
 8005578:	89ab      	ldrh	r3, [r5, #12]
 800557a:	059a      	lsls	r2, r3, #22
 800557c:	d402      	bmi.n	8005584 <_vfiprintf_r+0x220>
 800557e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005580:	f7ff fdb7 	bl	80050f2 <__retarget_lock_release_recursive>
 8005584:	89ab      	ldrh	r3, [r5, #12]
 8005586:	065b      	lsls	r3, r3, #25
 8005588:	f53f af12 	bmi.w	80053b0 <_vfiprintf_r+0x4c>
 800558c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800558e:	e711      	b.n	80053b4 <_vfiprintf_r+0x50>
 8005590:	ab03      	add	r3, sp, #12
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	462a      	mov	r2, r5
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <_vfiprintf_r+0x258>)
 8005598:	a904      	add	r1, sp, #16
 800559a:	4630      	mov	r0, r6
 800559c:	f000 f880 	bl	80056a0 <_printf_i>
 80055a0:	e7e4      	b.n	800556c <_vfiprintf_r+0x208>
 80055a2:	bf00      	nop
 80055a4:	0801b378 	.word	0x0801b378
 80055a8:	0801b398 	.word	0x0801b398
 80055ac:	0801b358 	.word	0x0801b358
 80055b0:	0801b3b8 	.word	0x0801b3b8
 80055b4:	0801b3c2 	.word	0x0801b3c2
 80055b8:	00000000 	.word	0x00000000
 80055bc:	0800533f 	.word	0x0800533f
 80055c0:	0801b3be 	.word	0x0801b3be

080055c4 <_printf_common>:
 80055c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c8:	4616      	mov	r6, r2
 80055ca:	4699      	mov	r9, r3
 80055cc:	688a      	ldr	r2, [r1, #8]
 80055ce:	690b      	ldr	r3, [r1, #16]
 80055d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055d4:	4293      	cmp	r3, r2
 80055d6:	bfb8      	it	lt
 80055d8:	4613      	movlt	r3, r2
 80055da:	6033      	str	r3, [r6, #0]
 80055dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055e0:	4607      	mov	r7, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	b10a      	cbz	r2, 80055ea <_printf_common+0x26>
 80055e6:	3301      	adds	r3, #1
 80055e8:	6033      	str	r3, [r6, #0]
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	0699      	lsls	r1, r3, #26
 80055ee:	bf42      	ittt	mi
 80055f0:	6833      	ldrmi	r3, [r6, #0]
 80055f2:	3302      	addmi	r3, #2
 80055f4:	6033      	strmi	r3, [r6, #0]
 80055f6:	6825      	ldr	r5, [r4, #0]
 80055f8:	f015 0506 	ands.w	r5, r5, #6
 80055fc:	d106      	bne.n	800560c <_printf_common+0x48>
 80055fe:	f104 0a19 	add.w	sl, r4, #25
 8005602:	68e3      	ldr	r3, [r4, #12]
 8005604:	6832      	ldr	r2, [r6, #0]
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	42ab      	cmp	r3, r5
 800560a:	dc26      	bgt.n	800565a <_printf_common+0x96>
 800560c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005610:	1e13      	subs	r3, r2, #0
 8005612:	6822      	ldr	r2, [r4, #0]
 8005614:	bf18      	it	ne
 8005616:	2301      	movne	r3, #1
 8005618:	0692      	lsls	r2, r2, #26
 800561a:	d42b      	bmi.n	8005674 <_printf_common+0xb0>
 800561c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005620:	4649      	mov	r1, r9
 8005622:	4638      	mov	r0, r7
 8005624:	47c0      	blx	r8
 8005626:	3001      	adds	r0, #1
 8005628:	d01e      	beq.n	8005668 <_printf_common+0xa4>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	68e5      	ldr	r5, [r4, #12]
 800562e:	6832      	ldr	r2, [r6, #0]
 8005630:	f003 0306 	and.w	r3, r3, #6
 8005634:	2b04      	cmp	r3, #4
 8005636:	bf08      	it	eq
 8005638:	1aad      	subeq	r5, r5, r2
 800563a:	68a3      	ldr	r3, [r4, #8]
 800563c:	6922      	ldr	r2, [r4, #16]
 800563e:	bf0c      	ite	eq
 8005640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005644:	2500      	movne	r5, #0
 8005646:	4293      	cmp	r3, r2
 8005648:	bfc4      	itt	gt
 800564a:	1a9b      	subgt	r3, r3, r2
 800564c:	18ed      	addgt	r5, r5, r3
 800564e:	2600      	movs	r6, #0
 8005650:	341a      	adds	r4, #26
 8005652:	42b5      	cmp	r5, r6
 8005654:	d11a      	bne.n	800568c <_printf_common+0xc8>
 8005656:	2000      	movs	r0, #0
 8005658:	e008      	b.n	800566c <_printf_common+0xa8>
 800565a:	2301      	movs	r3, #1
 800565c:	4652      	mov	r2, sl
 800565e:	4649      	mov	r1, r9
 8005660:	4638      	mov	r0, r7
 8005662:	47c0      	blx	r8
 8005664:	3001      	adds	r0, #1
 8005666:	d103      	bne.n	8005670 <_printf_common+0xac>
 8005668:	f04f 30ff 	mov.w	r0, #4294967295
 800566c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005670:	3501      	adds	r5, #1
 8005672:	e7c6      	b.n	8005602 <_printf_common+0x3e>
 8005674:	18e1      	adds	r1, r4, r3
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	2030      	movs	r0, #48	; 0x30
 800567a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800567e:	4422      	add	r2, r4
 8005680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005688:	3302      	adds	r3, #2
 800568a:	e7c7      	b.n	800561c <_printf_common+0x58>
 800568c:	2301      	movs	r3, #1
 800568e:	4622      	mov	r2, r4
 8005690:	4649      	mov	r1, r9
 8005692:	4638      	mov	r0, r7
 8005694:	47c0      	blx	r8
 8005696:	3001      	adds	r0, #1
 8005698:	d0e6      	beq.n	8005668 <_printf_common+0xa4>
 800569a:	3601      	adds	r6, #1
 800569c:	e7d9      	b.n	8005652 <_printf_common+0x8e>
	...

080056a0 <_printf_i>:
 80056a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056a4:	460c      	mov	r4, r1
 80056a6:	4691      	mov	r9, r2
 80056a8:	7e27      	ldrb	r7, [r4, #24]
 80056aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80056ac:	2f78      	cmp	r7, #120	; 0x78
 80056ae:	4680      	mov	r8, r0
 80056b0:	469a      	mov	sl, r3
 80056b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056b6:	d807      	bhi.n	80056c8 <_printf_i+0x28>
 80056b8:	2f62      	cmp	r7, #98	; 0x62
 80056ba:	d80a      	bhi.n	80056d2 <_printf_i+0x32>
 80056bc:	2f00      	cmp	r7, #0
 80056be:	f000 80d8 	beq.w	8005872 <_printf_i+0x1d2>
 80056c2:	2f58      	cmp	r7, #88	; 0x58
 80056c4:	f000 80a3 	beq.w	800580e <_printf_i+0x16e>
 80056c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056d0:	e03a      	b.n	8005748 <_printf_i+0xa8>
 80056d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056d6:	2b15      	cmp	r3, #21
 80056d8:	d8f6      	bhi.n	80056c8 <_printf_i+0x28>
 80056da:	a001      	add	r0, pc, #4	; (adr r0, 80056e0 <_printf_i+0x40>)
 80056dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80056e0:	08005739 	.word	0x08005739
 80056e4:	0800574d 	.word	0x0800574d
 80056e8:	080056c9 	.word	0x080056c9
 80056ec:	080056c9 	.word	0x080056c9
 80056f0:	080056c9 	.word	0x080056c9
 80056f4:	080056c9 	.word	0x080056c9
 80056f8:	0800574d 	.word	0x0800574d
 80056fc:	080056c9 	.word	0x080056c9
 8005700:	080056c9 	.word	0x080056c9
 8005704:	080056c9 	.word	0x080056c9
 8005708:	080056c9 	.word	0x080056c9
 800570c:	08005859 	.word	0x08005859
 8005710:	0800577d 	.word	0x0800577d
 8005714:	0800583b 	.word	0x0800583b
 8005718:	080056c9 	.word	0x080056c9
 800571c:	080056c9 	.word	0x080056c9
 8005720:	0800587b 	.word	0x0800587b
 8005724:	080056c9 	.word	0x080056c9
 8005728:	0800577d 	.word	0x0800577d
 800572c:	080056c9 	.word	0x080056c9
 8005730:	080056c9 	.word	0x080056c9
 8005734:	08005843 	.word	0x08005843
 8005738:	680b      	ldr	r3, [r1, #0]
 800573a:	1d1a      	adds	r2, r3, #4
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	600a      	str	r2, [r1, #0]
 8005740:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005748:	2301      	movs	r3, #1
 800574a:	e0a3      	b.n	8005894 <_printf_i+0x1f4>
 800574c:	6825      	ldr	r5, [r4, #0]
 800574e:	6808      	ldr	r0, [r1, #0]
 8005750:	062e      	lsls	r6, r5, #24
 8005752:	f100 0304 	add.w	r3, r0, #4
 8005756:	d50a      	bpl.n	800576e <_printf_i+0xce>
 8005758:	6805      	ldr	r5, [r0, #0]
 800575a:	600b      	str	r3, [r1, #0]
 800575c:	2d00      	cmp	r5, #0
 800575e:	da03      	bge.n	8005768 <_printf_i+0xc8>
 8005760:	232d      	movs	r3, #45	; 0x2d
 8005762:	426d      	negs	r5, r5
 8005764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005768:	485e      	ldr	r0, [pc, #376]	; (80058e4 <_printf_i+0x244>)
 800576a:	230a      	movs	r3, #10
 800576c:	e019      	b.n	80057a2 <_printf_i+0x102>
 800576e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005772:	6805      	ldr	r5, [r0, #0]
 8005774:	600b      	str	r3, [r1, #0]
 8005776:	bf18      	it	ne
 8005778:	b22d      	sxthne	r5, r5
 800577a:	e7ef      	b.n	800575c <_printf_i+0xbc>
 800577c:	680b      	ldr	r3, [r1, #0]
 800577e:	6825      	ldr	r5, [r4, #0]
 8005780:	1d18      	adds	r0, r3, #4
 8005782:	6008      	str	r0, [r1, #0]
 8005784:	0628      	lsls	r0, r5, #24
 8005786:	d501      	bpl.n	800578c <_printf_i+0xec>
 8005788:	681d      	ldr	r5, [r3, #0]
 800578a:	e002      	b.n	8005792 <_printf_i+0xf2>
 800578c:	0669      	lsls	r1, r5, #25
 800578e:	d5fb      	bpl.n	8005788 <_printf_i+0xe8>
 8005790:	881d      	ldrh	r5, [r3, #0]
 8005792:	4854      	ldr	r0, [pc, #336]	; (80058e4 <_printf_i+0x244>)
 8005794:	2f6f      	cmp	r7, #111	; 0x6f
 8005796:	bf0c      	ite	eq
 8005798:	2308      	moveq	r3, #8
 800579a:	230a      	movne	r3, #10
 800579c:	2100      	movs	r1, #0
 800579e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057a2:	6866      	ldr	r6, [r4, #4]
 80057a4:	60a6      	str	r6, [r4, #8]
 80057a6:	2e00      	cmp	r6, #0
 80057a8:	bfa2      	ittt	ge
 80057aa:	6821      	ldrge	r1, [r4, #0]
 80057ac:	f021 0104 	bicge.w	r1, r1, #4
 80057b0:	6021      	strge	r1, [r4, #0]
 80057b2:	b90d      	cbnz	r5, 80057b8 <_printf_i+0x118>
 80057b4:	2e00      	cmp	r6, #0
 80057b6:	d04d      	beq.n	8005854 <_printf_i+0x1b4>
 80057b8:	4616      	mov	r6, r2
 80057ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80057be:	fb03 5711 	mls	r7, r3, r1, r5
 80057c2:	5dc7      	ldrb	r7, [r0, r7]
 80057c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057c8:	462f      	mov	r7, r5
 80057ca:	42bb      	cmp	r3, r7
 80057cc:	460d      	mov	r5, r1
 80057ce:	d9f4      	bls.n	80057ba <_printf_i+0x11a>
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d10b      	bne.n	80057ec <_printf_i+0x14c>
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	07df      	lsls	r7, r3, #31
 80057d8:	d508      	bpl.n	80057ec <_printf_i+0x14c>
 80057da:	6923      	ldr	r3, [r4, #16]
 80057dc:	6861      	ldr	r1, [r4, #4]
 80057de:	4299      	cmp	r1, r3
 80057e0:	bfde      	ittt	le
 80057e2:	2330      	movle	r3, #48	; 0x30
 80057e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057ec:	1b92      	subs	r2, r2, r6
 80057ee:	6122      	str	r2, [r4, #16]
 80057f0:	f8cd a000 	str.w	sl, [sp]
 80057f4:	464b      	mov	r3, r9
 80057f6:	aa03      	add	r2, sp, #12
 80057f8:	4621      	mov	r1, r4
 80057fa:	4640      	mov	r0, r8
 80057fc:	f7ff fee2 	bl	80055c4 <_printf_common>
 8005800:	3001      	adds	r0, #1
 8005802:	d14c      	bne.n	800589e <_printf_i+0x1fe>
 8005804:	f04f 30ff 	mov.w	r0, #4294967295
 8005808:	b004      	add	sp, #16
 800580a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580e:	4835      	ldr	r0, [pc, #212]	; (80058e4 <_printf_i+0x244>)
 8005810:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	680e      	ldr	r6, [r1, #0]
 8005818:	061f      	lsls	r7, r3, #24
 800581a:	f856 5b04 	ldr.w	r5, [r6], #4
 800581e:	600e      	str	r6, [r1, #0]
 8005820:	d514      	bpl.n	800584c <_printf_i+0x1ac>
 8005822:	07d9      	lsls	r1, r3, #31
 8005824:	bf44      	itt	mi
 8005826:	f043 0320 	orrmi.w	r3, r3, #32
 800582a:	6023      	strmi	r3, [r4, #0]
 800582c:	b91d      	cbnz	r5, 8005836 <_printf_i+0x196>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	f023 0320 	bic.w	r3, r3, #32
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	2310      	movs	r3, #16
 8005838:	e7b0      	b.n	800579c <_printf_i+0xfc>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	f043 0320 	orr.w	r3, r3, #32
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	2378      	movs	r3, #120	; 0x78
 8005844:	4828      	ldr	r0, [pc, #160]	; (80058e8 <_printf_i+0x248>)
 8005846:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800584a:	e7e3      	b.n	8005814 <_printf_i+0x174>
 800584c:	065e      	lsls	r6, r3, #25
 800584e:	bf48      	it	mi
 8005850:	b2ad      	uxthmi	r5, r5
 8005852:	e7e6      	b.n	8005822 <_printf_i+0x182>
 8005854:	4616      	mov	r6, r2
 8005856:	e7bb      	b.n	80057d0 <_printf_i+0x130>
 8005858:	680b      	ldr	r3, [r1, #0]
 800585a:	6826      	ldr	r6, [r4, #0]
 800585c:	6960      	ldr	r0, [r4, #20]
 800585e:	1d1d      	adds	r5, r3, #4
 8005860:	600d      	str	r5, [r1, #0]
 8005862:	0635      	lsls	r5, r6, #24
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	d501      	bpl.n	800586c <_printf_i+0x1cc>
 8005868:	6018      	str	r0, [r3, #0]
 800586a:	e002      	b.n	8005872 <_printf_i+0x1d2>
 800586c:	0671      	lsls	r1, r6, #25
 800586e:	d5fb      	bpl.n	8005868 <_printf_i+0x1c8>
 8005870:	8018      	strh	r0, [r3, #0]
 8005872:	2300      	movs	r3, #0
 8005874:	6123      	str	r3, [r4, #16]
 8005876:	4616      	mov	r6, r2
 8005878:	e7ba      	b.n	80057f0 <_printf_i+0x150>
 800587a:	680b      	ldr	r3, [r1, #0]
 800587c:	1d1a      	adds	r2, r3, #4
 800587e:	600a      	str	r2, [r1, #0]
 8005880:	681e      	ldr	r6, [r3, #0]
 8005882:	6862      	ldr	r2, [r4, #4]
 8005884:	2100      	movs	r1, #0
 8005886:	4630      	mov	r0, r6
 8005888:	f7fa fcaa 	bl	80001e0 <memchr>
 800588c:	b108      	cbz	r0, 8005892 <_printf_i+0x1f2>
 800588e:	1b80      	subs	r0, r0, r6
 8005890:	6060      	str	r0, [r4, #4]
 8005892:	6863      	ldr	r3, [r4, #4]
 8005894:	6123      	str	r3, [r4, #16]
 8005896:	2300      	movs	r3, #0
 8005898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800589c:	e7a8      	b.n	80057f0 <_printf_i+0x150>
 800589e:	6923      	ldr	r3, [r4, #16]
 80058a0:	4632      	mov	r2, r6
 80058a2:	4649      	mov	r1, r9
 80058a4:	4640      	mov	r0, r8
 80058a6:	47d0      	blx	sl
 80058a8:	3001      	adds	r0, #1
 80058aa:	d0ab      	beq.n	8005804 <_printf_i+0x164>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	079b      	lsls	r3, r3, #30
 80058b0:	d413      	bmi.n	80058da <_printf_i+0x23a>
 80058b2:	68e0      	ldr	r0, [r4, #12]
 80058b4:	9b03      	ldr	r3, [sp, #12]
 80058b6:	4298      	cmp	r0, r3
 80058b8:	bfb8      	it	lt
 80058ba:	4618      	movlt	r0, r3
 80058bc:	e7a4      	b.n	8005808 <_printf_i+0x168>
 80058be:	2301      	movs	r3, #1
 80058c0:	4632      	mov	r2, r6
 80058c2:	4649      	mov	r1, r9
 80058c4:	4640      	mov	r0, r8
 80058c6:	47d0      	blx	sl
 80058c8:	3001      	adds	r0, #1
 80058ca:	d09b      	beq.n	8005804 <_printf_i+0x164>
 80058cc:	3501      	adds	r5, #1
 80058ce:	68e3      	ldr	r3, [r4, #12]
 80058d0:	9903      	ldr	r1, [sp, #12]
 80058d2:	1a5b      	subs	r3, r3, r1
 80058d4:	42ab      	cmp	r3, r5
 80058d6:	dcf2      	bgt.n	80058be <_printf_i+0x21e>
 80058d8:	e7eb      	b.n	80058b2 <_printf_i+0x212>
 80058da:	2500      	movs	r5, #0
 80058dc:	f104 0619 	add.w	r6, r4, #25
 80058e0:	e7f5      	b.n	80058ce <_printf_i+0x22e>
 80058e2:	bf00      	nop
 80058e4:	0801b3c9 	.word	0x0801b3c9
 80058e8:	0801b3da 	.word	0x0801b3da

080058ec <_putc_r>:
 80058ec:	b570      	push	{r4, r5, r6, lr}
 80058ee:	460d      	mov	r5, r1
 80058f0:	4614      	mov	r4, r2
 80058f2:	4606      	mov	r6, r0
 80058f4:	b118      	cbz	r0, 80058fe <_putc_r+0x12>
 80058f6:	6983      	ldr	r3, [r0, #24]
 80058f8:	b90b      	cbnz	r3, 80058fe <_putc_r+0x12>
 80058fa:	f7ff fb5b 	bl	8004fb4 <__sinit>
 80058fe:	4b1c      	ldr	r3, [pc, #112]	; (8005970 <_putc_r+0x84>)
 8005900:	429c      	cmp	r4, r3
 8005902:	d124      	bne.n	800594e <_putc_r+0x62>
 8005904:	6874      	ldr	r4, [r6, #4]
 8005906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005908:	07d8      	lsls	r0, r3, #31
 800590a:	d405      	bmi.n	8005918 <_putc_r+0x2c>
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	0599      	lsls	r1, r3, #22
 8005910:	d402      	bmi.n	8005918 <_putc_r+0x2c>
 8005912:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005914:	f7ff fbec 	bl	80050f0 <__retarget_lock_acquire_recursive>
 8005918:	68a3      	ldr	r3, [r4, #8]
 800591a:	3b01      	subs	r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	60a3      	str	r3, [r4, #8]
 8005920:	da05      	bge.n	800592e <_putc_r+0x42>
 8005922:	69a2      	ldr	r2, [r4, #24]
 8005924:	4293      	cmp	r3, r2
 8005926:	db1c      	blt.n	8005962 <_putc_r+0x76>
 8005928:	b2eb      	uxtb	r3, r5
 800592a:	2b0a      	cmp	r3, #10
 800592c:	d019      	beq.n	8005962 <_putc_r+0x76>
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	6022      	str	r2, [r4, #0]
 8005934:	701d      	strb	r5, [r3, #0]
 8005936:	b2ed      	uxtb	r5, r5
 8005938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800593a:	07da      	lsls	r2, r3, #31
 800593c:	d405      	bmi.n	800594a <_putc_r+0x5e>
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	059b      	lsls	r3, r3, #22
 8005942:	d402      	bmi.n	800594a <_putc_r+0x5e>
 8005944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005946:	f7ff fbd4 	bl	80050f2 <__retarget_lock_release_recursive>
 800594a:	4628      	mov	r0, r5
 800594c:	bd70      	pop	{r4, r5, r6, pc}
 800594e:	4b09      	ldr	r3, [pc, #36]	; (8005974 <_putc_r+0x88>)
 8005950:	429c      	cmp	r4, r3
 8005952:	d101      	bne.n	8005958 <_putc_r+0x6c>
 8005954:	68b4      	ldr	r4, [r6, #8]
 8005956:	e7d6      	b.n	8005906 <_putc_r+0x1a>
 8005958:	4b07      	ldr	r3, [pc, #28]	; (8005978 <_putc_r+0x8c>)
 800595a:	429c      	cmp	r4, r3
 800595c:	bf08      	it	eq
 800595e:	68f4      	ldreq	r4, [r6, #12]
 8005960:	e7d1      	b.n	8005906 <_putc_r+0x1a>
 8005962:	4629      	mov	r1, r5
 8005964:	4622      	mov	r2, r4
 8005966:	4630      	mov	r0, r6
 8005968:	f7ff f94a 	bl	8004c00 <__swbuf_r>
 800596c:	4605      	mov	r5, r0
 800596e:	e7e3      	b.n	8005938 <_putc_r+0x4c>
 8005970:	0801b378 	.word	0x0801b378
 8005974:	0801b398 	.word	0x0801b398
 8005978:	0801b358 	.word	0x0801b358

0800597c <_sbrk_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	4d06      	ldr	r5, [pc, #24]	; (8005998 <_sbrk_r+0x1c>)
 8005980:	2300      	movs	r3, #0
 8005982:	4604      	mov	r4, r0
 8005984:	4608      	mov	r0, r1
 8005986:	602b      	str	r3, [r5, #0]
 8005988:	f7fb facc 	bl	8000f24 <_sbrk>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_sbrk_r+0x1a>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_sbrk_r+0x1a>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	20000144 	.word	0x20000144

0800599c <__sread>:
 800599c:	b510      	push	{r4, lr}
 800599e:	460c      	mov	r4, r1
 80059a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a4:	f000 f8a0 	bl	8005ae8 <_read_r>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	bfab      	itete	ge
 80059ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059ae:	89a3      	ldrhlt	r3, [r4, #12]
 80059b0:	181b      	addge	r3, r3, r0
 80059b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059b6:	bfac      	ite	ge
 80059b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80059ba:	81a3      	strhlt	r3, [r4, #12]
 80059bc:	bd10      	pop	{r4, pc}

080059be <__swrite>:
 80059be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c2:	461f      	mov	r7, r3
 80059c4:	898b      	ldrh	r3, [r1, #12]
 80059c6:	05db      	lsls	r3, r3, #23
 80059c8:	4605      	mov	r5, r0
 80059ca:	460c      	mov	r4, r1
 80059cc:	4616      	mov	r6, r2
 80059ce:	d505      	bpl.n	80059dc <__swrite+0x1e>
 80059d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d4:	2302      	movs	r3, #2
 80059d6:	2200      	movs	r2, #0
 80059d8:	f000 f868 	bl	8005aac <_lseek_r>
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059e6:	81a3      	strh	r3, [r4, #12]
 80059e8:	4632      	mov	r2, r6
 80059ea:	463b      	mov	r3, r7
 80059ec:	4628      	mov	r0, r5
 80059ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059f2:	f000 b817 	b.w	8005a24 <_write_r>

080059f6 <__sseek>:
 80059f6:	b510      	push	{r4, lr}
 80059f8:	460c      	mov	r4, r1
 80059fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059fe:	f000 f855 	bl	8005aac <_lseek_r>
 8005a02:	1c43      	adds	r3, r0, #1
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	bf15      	itete	ne
 8005a08:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a12:	81a3      	strheq	r3, [r4, #12]
 8005a14:	bf18      	it	ne
 8005a16:	81a3      	strhne	r3, [r4, #12]
 8005a18:	bd10      	pop	{r4, pc}

08005a1a <__sclose>:
 8005a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1e:	f000 b813 	b.w	8005a48 <_close_r>
	...

08005a24 <_write_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	4d07      	ldr	r5, [pc, #28]	; (8005a44 <_write_r+0x20>)
 8005a28:	4604      	mov	r4, r0
 8005a2a:	4608      	mov	r0, r1
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	2200      	movs	r2, #0
 8005a30:	602a      	str	r2, [r5, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	f7fb fa25 	bl	8000e82 <_write>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d102      	bne.n	8005a42 <_write_r+0x1e>
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	b103      	cbz	r3, 8005a42 <_write_r+0x1e>
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	20000144 	.word	0x20000144

08005a48 <_close_r>:
 8005a48:	b538      	push	{r3, r4, r5, lr}
 8005a4a:	4d06      	ldr	r5, [pc, #24]	; (8005a64 <_close_r+0x1c>)
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	4604      	mov	r4, r0
 8005a50:	4608      	mov	r0, r1
 8005a52:	602b      	str	r3, [r5, #0]
 8005a54:	f7fb fa31 	bl	8000eba <_close>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	d102      	bne.n	8005a62 <_close_r+0x1a>
 8005a5c:	682b      	ldr	r3, [r5, #0]
 8005a5e:	b103      	cbz	r3, 8005a62 <_close_r+0x1a>
 8005a60:	6023      	str	r3, [r4, #0]
 8005a62:	bd38      	pop	{r3, r4, r5, pc}
 8005a64:	20000144 	.word	0x20000144

08005a68 <_fstat_r>:
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	4d07      	ldr	r5, [pc, #28]	; (8005a88 <_fstat_r+0x20>)
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	4604      	mov	r4, r0
 8005a70:	4608      	mov	r0, r1
 8005a72:	4611      	mov	r1, r2
 8005a74:	602b      	str	r3, [r5, #0]
 8005a76:	f7fb fa2c 	bl	8000ed2 <_fstat>
 8005a7a:	1c43      	adds	r3, r0, #1
 8005a7c:	d102      	bne.n	8005a84 <_fstat_r+0x1c>
 8005a7e:	682b      	ldr	r3, [r5, #0]
 8005a80:	b103      	cbz	r3, 8005a84 <_fstat_r+0x1c>
 8005a82:	6023      	str	r3, [r4, #0]
 8005a84:	bd38      	pop	{r3, r4, r5, pc}
 8005a86:	bf00      	nop
 8005a88:	20000144 	.word	0x20000144

08005a8c <_isatty_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	4d06      	ldr	r5, [pc, #24]	; (8005aa8 <_isatty_r+0x1c>)
 8005a90:	2300      	movs	r3, #0
 8005a92:	4604      	mov	r4, r0
 8005a94:	4608      	mov	r0, r1
 8005a96:	602b      	str	r3, [r5, #0]
 8005a98:	f7fb fa2b 	bl	8000ef2 <_isatty>
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	d102      	bne.n	8005aa6 <_isatty_r+0x1a>
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	b103      	cbz	r3, 8005aa6 <_isatty_r+0x1a>
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	bd38      	pop	{r3, r4, r5, pc}
 8005aa8:	20000144 	.word	0x20000144

08005aac <_lseek_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	4d07      	ldr	r5, [pc, #28]	; (8005acc <_lseek_r+0x20>)
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	4608      	mov	r0, r1
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	602a      	str	r2, [r5, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	f7fb fa24 	bl	8000f08 <_lseek>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d102      	bne.n	8005aca <_lseek_r+0x1e>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	b103      	cbz	r3, 8005aca <_lseek_r+0x1e>
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	20000144 	.word	0x20000144

08005ad0 <__malloc_lock>:
 8005ad0:	4801      	ldr	r0, [pc, #4]	; (8005ad8 <__malloc_lock+0x8>)
 8005ad2:	f7ff bb0d 	b.w	80050f0 <__retarget_lock_acquire_recursive>
 8005ad6:	bf00      	nop
 8005ad8:	2000013c 	.word	0x2000013c

08005adc <__malloc_unlock>:
 8005adc:	4801      	ldr	r0, [pc, #4]	; (8005ae4 <__malloc_unlock+0x8>)
 8005ade:	f7ff bb08 	b.w	80050f2 <__retarget_lock_release_recursive>
 8005ae2:	bf00      	nop
 8005ae4:	2000013c 	.word	0x2000013c

08005ae8 <_read_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	4d07      	ldr	r5, [pc, #28]	; (8005b08 <_read_r+0x20>)
 8005aec:	4604      	mov	r4, r0
 8005aee:	4608      	mov	r0, r1
 8005af0:	4611      	mov	r1, r2
 8005af2:	2200      	movs	r2, #0
 8005af4:	602a      	str	r2, [r5, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	f7fb f9a6 	bl	8000e48 <_read>
 8005afc:	1c43      	adds	r3, r0, #1
 8005afe:	d102      	bne.n	8005b06 <_read_r+0x1e>
 8005b00:	682b      	ldr	r3, [r5, #0]
 8005b02:	b103      	cbz	r3, 8005b06 <_read_r+0x1e>
 8005b04:	6023      	str	r3, [r4, #0]
 8005b06:	bd38      	pop	{r3, r4, r5, pc}
 8005b08:	20000144 	.word	0x20000144

08005b0c <_init>:
 8005b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0e:	bf00      	nop
 8005b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b12:	bc08      	pop	{r3}
 8005b14:	469e      	mov	lr, r3
 8005b16:	4770      	bx	lr

08005b18 <_fini>:
 8005b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1a:	bf00      	nop
 8005b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1e:	bc08      	pop	{r3}
 8005b20:	469e      	mov	lr, r3
 8005b22:	4770      	bx	lr
