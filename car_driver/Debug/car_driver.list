
car_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007318  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001589c  080074b8  080074b8  000174b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cd54  0801cd54  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  0801cd54  0801cd54  0002cd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cd5c  0801cd5c  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cd5c  0801cd5c  0002cd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cd60  0801cd60  0002cd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0801cd64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  0801cdd4  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  0801cdd4  0003021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fd0  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281f  00000000  00000000  00045070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00047890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00048958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001840a  00000000  00000000  00049960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013720  00000000  00000000  00061d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094224  00000000  00000000  0007548a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001096ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005138  00000000  00000000  00109704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080074a0 	.word	0x080074a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080074a0 	.word	0x080074a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	f6ad 5dcc 	subw	sp, sp, #3532	; 0xdcc
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f002 fdce 	bl	8003120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f93a 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 faac 	bl	8000ae4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058c:	f000 fa80 	bl	8000a90 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000590:	f000 f9a0 	bl	80008d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000594:	f000 f9f8 	bl	8000988 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000598:	f000 fa50 	bl	8000a3c <MX_USART1_UART_Init>
  BSP_I2C1_Init();
 800059c:	f000 fe4c 	bl	8001238 <BSP_I2C1_Init>

  /* USER CODE BEGIN 2 */

  VL53L5CX_Platform plat;
  plat.GetTick = (VL53L5CX_get_tick_Func) BSP_GetTick;
 80005a0:	4b8e      	ldr	r3, [pc, #568]	; (80007dc <main+0x264>)
 80005a2:	f8c7 3da8 	str.w	r3, [r7, #3496]	; 0xda8
  plat.Read = (VL53L5CX_read_Func) CUSTOM_VL53L5CX_I2C_ReadReg ;
 80005a6:	4b8e      	ldr	r3, [pc, #568]	; (80007e0 <main+0x268>)
 80005a8:	f8c7 3da4 	str.w	r3, [r7, #3492]	; 0xda4
  plat.Write = (VL53L5CX_write_Func) CUSTOM_VL53L5CX_I2C_WriteReg;
 80005ac:	4b8d      	ldr	r3, [pc, #564]	; (80007e4 <main+0x26c>)
 80005ae:	f8c7 3da0 	str.w	r3, [r7, #3488]	; 0xda0
  VL53L5CX_Configuration conf;
  conf.platform = plat;
 80005b2:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80005b6:	461c      	mov	r4, r3
 80005b8:	f607 539c 	addw	r3, r7, #3484	; 0xd9c
 80005bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  initSensor(&conf);
 80005c2:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fc2a 	bl	8000e20 <initSensor>

  // start PWM
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80005cc:	2104      	movs	r1, #4
 80005ce:	4886      	ldr	r0, [pc, #536]	; (80007e8 <main+0x270>)
 80005d0:	f004 fd68 	bl	80050a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80005d4:	2100      	movs	r1, #0
 80005d6:	4885      	ldr	r0, [pc, #532]	; (80007ec <main+0x274>)
 80005d8:	f004 fd64 	bl	80050a4 <HAL_TIM_PWM_Start>

  uint16_t angle = ANGLE_BEGIN;
 80005dc:	f240 53f5 	movw	r3, #1525	; 0x5f5
 80005e0:	f8a7 3dbe 	strh.w	r3, [r7, #3518]	; 0xdbe
  uint16_t speed = MIN_SPEED;
 80005e4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005e8:	f8a7 3dbc 	strh.w	r3, [r7, #3516]	; 0xdbc

  // + angle: left, - angle: right

  // set to beginning speed and angle
  htim4.Instance->CCR1 = angle;
 80005ec:	4b7f      	ldr	r3, [pc, #508]	; (80007ec <main+0x274>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f8b7 2dbe 	ldrh.w	r2, [r7, #3518]	; 0xdbe
 80005f4:	635a      	str	r2, [r3, #52]	; 0x34
  htim3.Instance->CCR2 = speed;
 80005f6:	4b7c      	ldr	r3, [pc, #496]	; (80007e8 <main+0x270>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f8b7 2dbc 	ldrh.w	r2, [r7, #3516]	; 0xdbc
 80005fe:	639a      	str	r2, [r3, #56]	; 0x38

  // start PWM
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000600:	2104      	movs	r1, #4
 8000602:	4879      	ldr	r0, [pc, #484]	; (80007e8 <main+0x270>)
 8000604:	f004 fdfe 	bl	8005204 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000608:	2100      	movs	r1, #0
 800060a:	4878      	ldr	r0, [pc, #480]	; (80007ec <main+0x274>)
 800060c:	f004 fdfa 	bl	8005204 <HAL_TIM_PWM_Stop>

  uint8_t buffer[8]; // command buffer
  uint16_t bufSize = 8 * sizeof(uint8_t); // buffer size
 8000610:	2308      	movs	r3, #8
 8000612:	f8a7 3dba 	strh.w	r3, [r7, #3514]	; 0xdba
  uint8_t delim = '\r'; // delimiter
 8000616:	230d      	movs	r3, #13
 8000618:	f887 3db9 	strb.w	r3, [r7, #3513]	; 0xdb9
  uint8_t preamble[6] = {'s', 't', 'a', 'r', 't', '\n'}; // preamble
 800061c:	f207 4364 	addw	r3, r7, #1124	; 0x464
 8000620:	4a73      	ldr	r2, [pc, #460]	; (80007f0 <main+0x278>)
 8000622:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000626:	6018      	str	r0, [r3, #0]
 8000628:	3304      	adds	r3, #4
 800062a:	8019      	strh	r1, [r3, #0]
  uint8_t stop[5] = {'s', 't', 'o', 'p', '\n'}; // stop condition
 800062c:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8000630:	4a70      	ldr	r2, [pc, #448]	; (80007f4 <main+0x27c>)
 8000632:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000636:	6018      	str	r0, [r3, #0]
 8000638:	3304      	adds	r3, #4
 800063a:	7019      	strb	r1, [r3, #0]
//  uint8_t ack[4] = {'g', 'e', 't', '\n'};

//  char buf[10];

  int start = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	f8c7 3dc4 	str.w	r3, [r7, #3524]	; 0xdc4
  uint8_t ready = 0;
 8000642:	f207 435b 	addw	r3, r7, #1115	; 0x45b
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
  VL53L5CX_ResultsData data;
  uint8_t rangeData[130];
  memset(rangeData, 0, 130*sizeof(uint8_t));
 800064a:	f107 0308 	add.w	r3, r7, #8
 800064e:	2282      	movs	r2, #130	; 0x82
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 fd8c 	bl	8006170 <memset>
  rangeData[0] = '\r';
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	220d      	movs	r2, #13
 800065e:	701a      	strb	r2, [r3, #0]
  rangeData[129] = '\r';
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	220d      	movs	r2, #13
 8000666:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  uint8_t lower, upper;
  uint16_t pSize = 130 * sizeof(uint8_t);
 800066a:	2382      	movs	r3, #130	; 0x82
 800066c:	f8a7 3db6 	strh.w	r3, [r7, #3510]	; 0xdb6

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	while (!start) {
 8000670:	e027      	b.n	80006c2 <main+0x14a>
		int ret = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 3dac 	str.w	r3, [r7, #3500]	; 0xdac
		HAL_UART_Receive(&huart1, buffer, 8, 100);
 8000678:	f207 416c 	addw	r1, r7, #1132	; 0x46c
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	2208      	movs	r2, #8
 8000680:	485d      	ldr	r0, [pc, #372]	; (80007f8 <main+0x280>)
 8000682:	f005 fa64 	bl	8005b4e <HAL_UART_Receive>
		ret = searchKeyword(buffer, preamble, 8, 6);
 8000686:	f207 4164 	addw	r1, r7, #1124	; 0x464
 800068a:	f207 406c 	addw	r0, r7, #1132	; 0x46c
 800068e:	2306      	movs	r3, #6
 8000690:	2208      	movs	r2, #8
 8000692:	f000 fb95 	bl	8000dc0 <searchKeyword>
 8000696:	f8c7 0dac 	str.w	r0, [r7, #3500]	; 0xdac
		if (ret) {
 800069a:	f8d7 3dac 	ldr.w	r3, [r7, #3500]	; 0xdac
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d00f      	beq.n	80006c2 <main+0x14a>
//			HAL_Delay(2000);
//			HAL_UART_Transmit(&huart1, ack, 4, 100);
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006a2:	2104      	movs	r1, #4
 80006a4:	4850      	ldr	r0, [pc, #320]	; (80007e8 <main+0x270>)
 80006a6:	f004 fcfd 	bl	80050a4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80006aa:	2100      	movs	r1, #0
 80006ac:	484f      	ldr	r0, [pc, #316]	; (80007ec <main+0x274>)
 80006ae:	f004 fcf9 	bl	80050a4 <HAL_TIM_PWM_Start>
			start = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	f8c7 3dc4 	str.w	r3, [r7, #3524]	; 0xdc4
			vl53l5cx_start_ranging(&conf);
 80006b8:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fec9 	bl	8002454 <vl53l5cx_start_ranging>
	while (!start) {
 80006c2:	f8d7 3dc4 	ldr.w	r3, [r7, #3524]	; 0xdc4
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d0d3      	beq.n	8000672 <main+0xfa>
		}
	}

	while (start) {
 80006ca:	e080      	b.n	80007ce <main+0x256>
		int ret = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8c7 3db0 	str.w	r3, [r7, #3504]	; 0xdb0
		HAL_UART_Receive(&huart1, buffer, 8, 100);
 80006d2:	f207 416c 	addw	r1, r7, #1132	; 0x46c
 80006d6:	2364      	movs	r3, #100	; 0x64
 80006d8:	2208      	movs	r2, #8
 80006da:	4847      	ldr	r0, [pc, #284]	; (80007f8 <main+0x280>)
 80006dc:	f005 fa37 	bl	8005b4e <HAL_UART_Receive>
		parseString(buffer, 8, delim);
 80006e0:	f897 2db9 	ldrb.w	r2, [r7, #3513]	; 0xdb9
 80006e4:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 80006e8:	2108      	movs	r1, #8
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fab2 	bl	8000c54 <parseString>
		ret = searchKeyword(buffer, stop, 8, 5);
 80006f0:	f207 415c 	addw	r1, r7, #1116	; 0x45c
 80006f4:	f207 406c 	addw	r0, r7, #1132	; 0x46c
 80006f8:	2305      	movs	r3, #5
 80006fa:	2208      	movs	r2, #8
 80006fc:	f000 fb60 	bl	8000dc0 <searchKeyword>
 8000700:	f8c7 0db0 	str.w	r0, [r7, #3504]	; 0xdb0

		// check for ranging data
		while (!ready) {
 8000704:	e00a      	b.n	800071c <main+0x1a4>
			vl53l5cx_check_data_ready(&conf, &ready);
 8000706:	f207 425b 	addw	r2, r7, #1115	; 0x45b
 800070a:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800070e:	4611      	mov	r1, r2
 8000710:	4618      	mov	r0, r3
 8000712:	f002 f897 	bl	8002844 <vl53l5cx_check_data_ready>
			HAL_Delay(100);
 8000716:	2064      	movs	r0, #100	; 0x64
 8000718:	f002 fd74 	bl	8003204 <HAL_Delay>
		while (!ready) {
 800071c:	f207 435b 	addw	r3, r7, #1115	; 0x45b
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d0ef      	beq.n	8000706 <main+0x18e>
		}
		// get ranging data
		vl53l5cx_get_ranging_data(&conf, &data);
 8000726:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800072a:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f002 f8cf 	bl	80028d4 <vl53l5cx_get_ranging_data>

		// convert data to unsigned character
		for (int i=1; i<65; i++) {
 8000736:	2301      	movs	r3, #1
 8000738:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
 800073c:	e023      	b.n	8000786 <main+0x20e>
			U16_2_U8(data.distance_mm[i-1], &upper, &lower);
 800073e:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8000742:	1e5a      	subs	r2, r3, #1
 8000744:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000748:	f502 7290 	add.w	r2, r2, #288	; 0x120
 800074c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000750:	1dfa      	adds	r2, r7, #7
 8000752:	1db9      	adds	r1, r7, #6
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fbc7 	bl	8000ee8 <U16_2_U8>
			rangeData[i] = lower;
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	7819      	ldrb	r1, [r3, #0]
 800075e:	f107 0208 	add.w	r2, r7, #8
 8000762:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8000766:	4413      	add	r3, r2
 8000768:	460a      	mov	r2, r1
 800076a:	701a      	strb	r2, [r3, #0]
			rangeData[i+64] = upper;
 800076c:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8000770:	3340      	adds	r3, #64	; 0x40
 8000772:	1dba      	adds	r2, r7, #6
 8000774:	7811      	ldrb	r1, [r2, #0]
 8000776:	f107 0208 	add.w	r2, r7, #8
 800077a:	54d1      	strb	r1, [r2, r3]
		for (int i=1; i<65; i++) {
 800077c:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 8000780:	3301      	adds	r3, #1
 8000782:	f8c7 3dc0 	str.w	r3, [r7, #3520]	; 0xdc0
 8000786:	f8d7 3dc0 	ldr.w	r3, [r7, #3520]	; 0xdc0
 800078a:	2b40      	cmp	r3, #64	; 0x40
 800078c:	ddd7      	ble.n	800073e <main+0x1c6>
		}

		// send ranging data
		HAL_UART_Transmit(&huart1, rangeData,
 800078e:	f8b7 2db6 	ldrh.w	r2, [r7, #3510]	; 0xdb6
 8000792:	f107 0108 	add.w	r1, r7, #8
 8000796:	2364      	movs	r3, #100	; 0x64
 8000798:	4817      	ldr	r0, [pc, #92]	; (80007f8 <main+0x280>)
 800079a:	f005 f946 	bl	8005a2a <HAL_UART_Transmit>
				pSize, 100);
		ready = 0;
 800079e:	f207 435b 	addw	r3, r7, #1115	; 0x45b
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]

		if (ret) {
 80007a6:	f8d7 3db0 	ldr.w	r3, [r7, #3504]	; 0xdb0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00f      	beq.n	80007ce <main+0x256>
//			HAL_Delay(2000);
//			HAL_UART_Transmit(&huart1, ack, 4, 100);
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80007ae:	2104      	movs	r1, #4
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <main+0x270>)
 80007b2:	f004 fd27 	bl	8005204 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80007b6:	2100      	movs	r1, #0
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <main+0x274>)
 80007ba:	f004 fd23 	bl	8005204 <HAL_TIM_PWM_Stop>
			start = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	f8c7 3dc4 	str.w	r3, [r7, #3524]	; 0xdc4
			vl53l5cx_stop_ranging(&conf);
 80007c4:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 ff99 	bl	8002700 <vl53l5cx_stop_ranging>
	while (start) {
 80007ce:	f8d7 3dc4 	ldr.w	r3, [r7, #3524]	; 0xdc4
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f47f af7a 	bne.w	80006cc <main+0x154>
	while (!start) {
 80007d8:	e773      	b.n	80006c2 <main+0x14a>
 80007da:	bf00      	nop
 80007dc:	08001365 	.word	0x08001365
 80007e0:	08001301 	.word	0x08001301
 80007e4:	0800129d 	.word	0x0800129d
 80007e8:	200000e4 	.word	0x200000e4
 80007ec:	2000009c 	.word	0x2000009c
 80007f0:	080074b8 	.word	0x080074b8
 80007f4:	080074c0 	.word	0x080074c0
 80007f8:	2000012c 	.word	0x2000012c

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	; 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f005 fcb0 	bl	8006170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b29      	ldr	r3, [pc, #164]	; (80008cc <SystemClock_Config+0xd0>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	4a28      	ldr	r2, [pc, #160]	; (80008cc <SystemClock_Config+0xd0>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082e:	6413      	str	r3, [r2, #64]	; 0x40
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <SystemClock_Config+0xd0>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <SystemClock_Config+0xd4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000848:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <SystemClock_Config+0xd4>)
 800084a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <SystemClock_Config+0xd4>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000864:	2310      	movs	r3, #16
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000868:	2302      	movs	r3, #2
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000870:	2310      	movs	r3, #16
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000874:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000878:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800087a:	2304      	movs	r3, #4
 800087c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800087e:	2307      	movs	r3, #7
 8000880:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	4618      	mov	r0, r3
 8000888:	f003 ff48 	bl	800471c <HAL_RCC_OscConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000892:	f000 fb44 	bl	8000f1e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	230f      	movs	r3, #15
 8000898:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089a:	2302      	movs	r3, #2
 800089c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2102      	movs	r1, #2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f004 f9aa 	bl	8004c0c <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008be:	f000 fb2e 	bl	8000f1e <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3750      	adds	r7, #80	; 0x50
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_TIM3_Init+0xac>)
 80008f8:	4a22      	ldr	r2, [pc, #136]	; (8000984 <MX_TIM3_Init+0xb0>)
 80008fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 80008fc:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_TIM3_Init+0xac>)
 80008fe:	2254      	movs	r2, #84	; 0x54
 8000900:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_TIM3_Init+0xac>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000908:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_TIM3_Init+0xac>)
 800090a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800090e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_TIM3_Init+0xac>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_TIM3_Init+0xac>)
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800091c:	4818      	ldr	r0, [pc, #96]	; (8000980 <MX_TIM3_Init+0xac>)
 800091e:	f004 fb71 	bl	8005004 <HAL_TIM_PWM_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000928:	f000 faf9 	bl	8000f1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000934:	f107 0320 	add.w	r3, r7, #32
 8000938:	4619      	mov	r1, r3
 800093a:	4811      	ldr	r0, [pc, #68]	; (8000980 <MX_TIM3_Init+0xac>)
 800093c:	f004 ffba 	bl	80058b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000946:	f000 faea 	bl	8000f1e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800094a:	2360      	movs	r3, #96	; 0x60
 800094c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2204      	movs	r2, #4
 800095e:	4619      	mov	r1, r3
 8000960:	4807      	ldr	r0, [pc, #28]	; (8000980 <MX_TIM3_Init+0xac>)
 8000962:	f004 fcb3 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800096c:	f000 fad7 	bl	8000f1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <MX_TIM3_Init+0xac>)
 8000972:	f000 fb39 	bl	8000fe8 <HAL_TIM_MspPostInit>

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000e4 	.word	0x200000e4
 8000984:	40000400 	.word	0x40000400

08000988 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098e:	f107 0320 	add.w	r3, r7, #32
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_TIM4_Init+0xac>)
 80009ac:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <MX_TIM4_Init+0xb0>)
 80009ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 80009b0:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <MX_TIM4_Init+0xac>)
 80009b2:	2254      	movs	r2, #84	; 0x54
 80009b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_TIM4_Init+0xac>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_TIM4_Init+0xac>)
 80009be:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80009c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_TIM4_Init+0xac>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_TIM4_Init+0xac>)
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009d0:	4818      	ldr	r0, [pc, #96]	; (8000a34 <MX_TIM4_Init+0xac>)
 80009d2:	f004 fb17 	bl	8005004 <HAL_TIM_PWM_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80009dc:	f000 fa9f 	bl	8000f1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	4619      	mov	r1, r3
 80009ee:	4811      	ldr	r0, [pc, #68]	; (8000a34 <MX_TIM4_Init+0xac>)
 80009f0:	f004 ff60 	bl	80058b4 <HAL_TIMEx_MasterConfigSynchronization>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80009fa:	f000 fa90 	bl	8000f1e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fe:	2360      	movs	r3, #96	; 0x60
 8000a00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2200      	movs	r2, #0
 8000a12:	4619      	mov	r1, r3
 8000a14:	4807      	ldr	r0, [pc, #28]	; (8000a34 <MX_TIM4_Init+0xac>)
 8000a16:	f004 fc59 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000a20:	f000 fa7d 	bl	8000f1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <MX_TIM4_Init+0xac>)
 8000a26:	f000 fadf 	bl	8000fe8 <HAL_TIM_MspPostInit>

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	; 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000009c 	.word	0x2000009c
 8000a38:	40000800 	.word	0x40000800

08000a3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <MX_USART1_UART_Init+0x50>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a74:	f004 ff8c 	bl	8005990 <HAL_UART_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a7e:	f000 fa4e 	bl	8000f1e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	2000012c 	.word	0x2000012c
 8000a8c:	40011000 	.word	0x40011000

08000a90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_USART2_UART_Init+0x50>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000ac8:	f004 ff62 	bl	8005990 <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ad2:	f000 fa24 	bl	8000f1e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000170 	.word	0x20000170
 8000ae0:	40004400 	.word	0x40004400

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b41      	ldr	r3, [pc, #260]	; (8000c04 <MX_GPIO_Init+0x120>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a40      	ldr	r2, [pc, #256]	; (8000c04 <MX_GPIO_Init+0x120>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b3e      	ldr	r3, [pc, #248]	; (8000c04 <MX_GPIO_Init+0x120>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b3a      	ldr	r3, [pc, #232]	; (8000c04 <MX_GPIO_Init+0x120>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a39      	ldr	r2, [pc, #228]	; (8000c04 <MX_GPIO_Init+0x120>)
 8000b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b37      	ldr	r3, [pc, #220]	; (8000c04 <MX_GPIO_Init+0x120>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <MX_GPIO_Init+0x120>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a32      	ldr	r2, [pc, #200]	; (8000c04 <MX_GPIO_Init+0x120>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <MX_GPIO_Init+0x120>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <MX_GPIO_Init+0x120>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a2b      	ldr	r2, [pc, #172]	; (8000c04 <MX_GPIO_Init+0x120>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <MX_GPIO_Init+0x120>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4826      	ldr	r0, [pc, #152]	; (8000c08 <MX_GPIO_Init+0x124>)
 8000b70:	f002 fdd6 	bl	8003720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2120      	movs	r1, #32
 8000b78:	4824      	ldr	r0, [pc, #144]	; (8000c0c <MX_GPIO_Init+0x128>)
 8000b7a:	f002 fdd1 	bl	8003720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f240 4131 	movw	r1, #1073	; 0x431
 8000b84:	4822      	ldr	r0, [pc, #136]	; (8000c10 <MX_GPIO_Init+0x12c>)
 8000b86:	f002 fdcb 	bl	8003720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b90:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4819      	ldr	r0, [pc, #100]	; (8000c08 <MX_GPIO_Init+0x124>)
 8000ba2:	f002 fc39 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4812      	ldr	r0, [pc, #72]	; (8000c08 <MX_GPIO_Init+0x124>)
 8000bbe:	f002 fc2b 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bc2:	2320      	movs	r3, #32
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <MX_GPIO_Init+0x128>)
 8000bda:	f002 fc1d 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000bde:	f240 4331 	movw	r3, #1073	; 0x431
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <MX_GPIO_Init+0x12c>)
 8000bf8:	f002 fc0e 	bl	8003418 <HAL_GPIO_Init>

}
 8000bfc:	bf00      	nop
 8000bfe:	3728      	adds	r7, #40	; 0x28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020800 	.word	0x40020800
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40020400 	.word	0x40020400

08000c14 <CheckSum>:

/* USER CODE BEGIN 4 */

int CheckSum(uint8_t* data) {
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	uint8_t checksum = data[3]; // byte after data is checksum
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	78db      	ldrb	r3, [r3, #3]
 8000c20:	73fb      	strb	r3, [r7, #15]
	uint8_t encoded = data[0] | data[1] | data[2]; // checksum should be bitwise of data
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3302      	adds	r3, #2
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	73bb      	strb	r3, [r7, #14]
	if (encoded == checksum) {
 8000c3a:	7bba      	ldrb	r2, [r7, #14]
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d101      	bne.n	8000c46 <CheckSum+0x32>
		return 1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e000      	b.n	8000c48 <CheckSum+0x34>
	}
	return 0;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <parseString>:

void parseString(const uint8_t* data, int len, uint8_t delim) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08e      	sub	sp, #56	; 0x38
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	71fb      	strb	r3, [r7, #7]
	uint8_t currData[5] = {0}; // command data
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
 8000c66:	2300      	movs	r3, #0
 8000c68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	char buf[10];
	int l = len - 5 + 1;
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int i=0; i<l; i++) {
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c76:	e03c      	b.n	8000cf2 <parseString+0x9e>
		memcpy(currData, &data[i], 5);
 8000c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	441a      	add	r2, r3
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	6810      	ldr	r0, [r2, #0]
 8000c84:	6018      	str	r0, [r3, #0]
 8000c86:	7912      	ldrb	r2, [r2, #4]
 8000c88:	711a      	strb	r2, [r3, #4]
		if (CheckSum(currData) && currData[4] == delim) {
 8000c8a:	f107 0320 	add.w	r3, r7, #32
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ffc0 	bl	8000c14 <CheckSum>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d028      	beq.n	8000cec <parseString+0x98>
 8000c9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c9e:	79fa      	ldrb	r2, [r7, #7]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d123      	bne.n	8000cec <parseString+0x98>
			changeSpeed(currData[1], currData[2]);
 8000ca4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000ca8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f842 	bl	8000d38 <changeSpeed>
			changeAngle(currData[0]);
 8000cb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f827 	bl	8000d0c <changeAngle>
			sprintf(buf, "%d,%d,%d\n\r", currData[0],
 8000cbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cc2:	461a      	mov	r2, r3
					currData[1], currData[2]);
 8000cc4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
			sprintf(buf, "%d,%d,%d\n\r", currData[0],
 8000cc8:	4619      	mov	r1, r3
					currData[1], currData[2]);
 8000cca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
			sprintf(buf, "%d,%d,%d\n\r", currData[0],
 8000cce:	f107 0014 	add.w	r0, r7, #20
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	490b      	ldr	r1, [pc, #44]	; (8000d04 <parseString+0xb0>)
 8000cd8:	f005 fae0 	bl	800629c <siprintf>
			HAL_UART_Transmit(&huart2, buf,
 8000cdc:	f107 0114 	add.w	r1, r7, #20
 8000ce0:	2364      	movs	r3, #100	; 0x64
 8000ce2:	220a      	movs	r2, #10
 8000ce4:	4808      	ldr	r0, [pc, #32]	; (8000d08 <parseString+0xb4>)
 8000ce6:	f004 fea0 	bl	8005a2a <HAL_UART_Transmit>
					sizeof(char)*10, 100);
			break;
 8000cea:	e007      	b.n	8000cfc <parseString+0xa8>
	for (int i=0; i<l; i++) {
 8000cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cee:	3301      	adds	r3, #1
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	dbbe      	blt.n	8000c78 <parseString+0x24>
		}
	}
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	3730      	adds	r7, #48	; 0x30
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	080074c8 	.word	0x080074c8
 8000d08:	20000170 	.word	0x20000170

08000d0c <changeAngle>:

void changeAngle(uint8_t angle) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
	uint16_t deg = MIN_ANGLE + angle;
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	f203 5376 	addw	r3, r3, #1398	; 0x576
 8000d1e:	81fb      	strh	r3, [r7, #14]
	htim4.Instance->CCR1 = deg;
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <changeAngle+0x28>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	89fa      	ldrh	r2, [r7, #14]
 8000d26:	635a      	str	r2, [r3, #52]	; 0x34
//	HAL_Delay(200);
	return;
 8000d28:	bf00      	nop
}
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	2000009c 	.word	0x2000009c

08000d38 <changeSpeed>:

void changeSpeed(uint8_t speed, uint8_t direction) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	460a      	mov	r2, r1
 8000d42:	71fb      	strb	r3, [r7, #7]
 8000d44:	4613      	mov	r3, r2
 8000d46:	71bb      	strb	r3, [r7, #6]
	uint16_t mapped = (uint16_t)(speed) << 4;
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	81fb      	strh	r3, [r7, #14]
	uint16_t vel  = MIN_SPEED + mapped;
 8000d50:	89fb      	ldrh	r3, [r7, #14]
 8000d52:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000d56:	81bb      	strh	r3, [r7, #12]
	vel %= MAX_SPEED;
 8000d58:	89bb      	ldrh	r3, [r7, #12]
 8000d5a:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <changeSpeed+0x7c>)
 8000d5c:	fba2 1203 	umull	r1, r2, r2, r3
 8000d60:	0b12      	lsrs	r2, r2, #12
 8000d62:	f641 3158 	movw	r1, #7000	; 0x1b58
 8000d66:	fb01 f202 	mul.w	r2, r1, r2
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	81bb      	strh	r3, [r7, #12]
	htim3.Instance->CCR2 = vel;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <changeSpeed+0x80>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	89ba      	ldrh	r2, [r7, #12]
 8000d74:	639a      	str	r2, [r3, #56]	; 0x38

	if (direction) {
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d00b      	beq.n	8000d94 <changeSpeed+0x5c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d82:	480e      	ldr	r0, [pc, #56]	; (8000dbc <changeSpeed+0x84>)
 8000d84:	f002 fccc 	bl	8003720 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <changeSpeed+0x84>)
 8000d8e:	f002 fcc7 	bl	8003720 <HAL_GPIO_WritePin>
	else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
	}
//	HAL_Delay(500);
}
 8000d92:	e00a      	b.n	8000daa <changeSpeed+0x72>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d9a:	4808      	ldr	r0, [pc, #32]	; (8000dbc <changeSpeed+0x84>)
 8000d9c:	f002 fcc0 	bl	8003720 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2110      	movs	r1, #16
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <changeSpeed+0x84>)
 8000da6:	f002 fcbb 	bl	8003720 <HAL_GPIO_WritePin>
}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	95cbec1b 	.word	0x95cbec1b
 8000db8:	200000e4 	.word	0x200000e4
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <searchKeyword>:

int searchKeyword(const uint8_t* data, uint8_t* pat, int m, int n) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	603b      	str	r3, [r7, #0]
	int k = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
	for (int i=0; i<m; i++) {
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	e017      	b.n	8000e08 <searchKeyword+0x48>
		// check for matching character
		if (data[i] == pat[k]) {
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781a      	ldrb	r2, [r3, #0]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	68b9      	ldr	r1, [r7, #8]
 8000de4:	440b      	add	r3, r1
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d108      	bne.n	8000dfe <searchKeyword+0x3e>
			k++;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	3301      	adds	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
			if (k == n) {
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d103      	bne.n	8000e02 <searchKeyword+0x42>
				return 1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e009      	b.n	8000e12 <searchKeyword+0x52>
			}
		}
		// if unmatched return match to idx 0
		else {
			k = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
	for (int i=0; i<m; i++) {
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	3301      	adds	r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbe3      	blt.n	8000dd8 <searchKeyword+0x18>
		}
	}
	return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	371c      	adds	r7, #28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <initSensor>:

uint8_t initSensor(VL53L5CX_Configuration* conf) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	uint8_t isAlive = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73bb      	strb	r3, [r7, #14]
	uint8_t status = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]
	conf->platform.address = VL53L5CX_DEFAULT_I2C_ADDRESS;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2252      	movs	r2, #82	; 0x52
 8000e34:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(CUSTOM_VL53L5CX_I2C_RST_PORT, CUSTOM_VL53L5CX_I2C_RST_PIN, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2120      	movs	r1, #32
 8000e3a:	4827      	ldr	r0, [pc, #156]	; (8000ed8 <initSensor+0xb8>)
 8000e3c:	f002 fc70 	bl	8003720 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e40:	2014      	movs	r0, #20
 8000e42:	f002 f9df 	bl	8003204 <HAL_Delay>
	HAL_GPIO_WritePin(CUSTOM_VL53L5CX_PWR_EN_PORT, CUSTOM_VL53L5CX_PWR_EN_PIN , GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4824      	ldr	r0, [pc, #144]	; (8000edc <initSensor+0xbc>)
 8000e4c:	f002 fc68 	bl	8003720 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e50:	2014      	movs	r0, #20
 8000e52:	f002 f9d7 	bl	8003204 <HAL_Delay>
	HAL_GPIO_WritePin(CUSTOM_VL53L5CX_LPn_PORT, CUSTOM_VL53L5CX_LPn_PIN, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2101      	movs	r1, #1
 8000e5a:	481f      	ldr	r0, [pc, #124]	; (8000ed8 <initSensor+0xb8>)
 8000e5c:	f002 fc60 	bl	8003720 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e60:	2014      	movs	r0, #20
 8000e62:	f002 f9cf 	bl	8003204 <HAL_Delay>
	HAL_GPIO_WritePin(CUSTOM_VL53L5CX_PWR_EN_PORT, CUSTOM_VL53L5CX_PWR_EN_PIN, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	2101      	movs	r1, #1
 8000e6a:	481c      	ldr	r0, [pc, #112]	; (8000edc <initSensor+0xbc>)
 8000e6c:	f002 fc58 	bl	8003720 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e70:	2014      	movs	r0, #20
 8000e72:	f002 f9c7 	bl	8003204 <HAL_Delay>
	HAL_GPIO_WritePin(CUSTOM_VL53L5CX_LPn_PORT, CUSTOM_VL53L5CX_LPn_PIN, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2101      	movs	r1, #1
 8000e7a:	4817      	ldr	r0, [pc, #92]	; (8000ed8 <initSensor+0xb8>)
 8000e7c:	f002 fc50 	bl	8003720 <HAL_GPIO_WritePin>
	status = vl53l5cx_is_alive(conf, &isAlive);
 8000e80:	f107 030e 	add.w	r3, r7, #14
 8000e84:	4619      	mov	r1, r3
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 fe9e 	bl	8001bc8 <vl53l5cx_is_alive>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	73fb      	strb	r3, [r7, #15]
	if(!isAlive)
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d107      	bne.n	8000ea6 <initSensor+0x86>
	{
		printf("VL53L5CXV0 not detected at requested address (0x%x)\n", conf->platform.address);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4810      	ldr	r0, [pc, #64]	; (8000ee0 <initSensor+0xc0>)
 8000e9e:	f005 f96f 	bl	8006180 <iprintf>
		return 255;
 8000ea2:	23ff      	movs	r3, #255	; 0xff
 8000ea4:	e014      	b.n	8000ed0 <initSensor+0xb0>
	}
	printf("Sensor initializing, please wait few seconds\n");
 8000ea6:	480f      	ldr	r0, [pc, #60]	; (8000ee4 <initSensor+0xc4>)
 8000ea8:	f005 f9f0 	bl	800628c <puts>
	status = vl53l5cx_init(conf);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 fed5 	bl	8001c5c <vl53l5cx_init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]
	status = vl53l5cx_set_ranging_frequency_hz(conf, 2);				// Set 2Hz ranging frequency
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f001 feba 	bl	8002c32 <vl53l5cx_set_ranging_frequency_hz>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	73fb      	strb	r3, [r7, #15]
	status = vl53l5cx_set_ranging_mode(conf, VL53L5CX_RANGING_MODE_CONTINUOUS);  // Set mode continuous
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f001 fed5 	bl	8002c74 <vl53l5cx_set_ranging_mode>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	73fb      	strb	r3, [r7, #15]
	return status;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	080074d4 	.word	0x080074d4
 8000ee4:	0800750c 	.word	0x0800750c

08000ee8 <U16_2_U8>:

void U16_2_U8(const int16_t src, uint8_t* upper, uint8_t* lower) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	81fb      	strh	r3, [r7, #14]
	*upper = (uint8_t) (src >> 8);
 8000ef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000efa:	121b      	asrs	r3, r3, #8
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	701a      	strb	r2, [r3, #0]
	*lower = (uint8_t) ((src << 8) >> 8);
 8000f04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	121b      	asrs	r3, r3, #8
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	701a      	strb	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f22:	b672      	cpsid	i
}
 8000f24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <Error_Handler+0x8>

08000f28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f66:	2007      	movs	r0, #7
 8000f68:	f002 fa22 	bl	80033b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800

08000f78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a15      	ldr	r2, [pc, #84]	; (8000fdc <HAL_TIM_PWM_MspInit+0x64>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10e      	bne.n	8000fa8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_TIM_PWM_MspInit+0x68>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a13      	ldr	r2, [pc, #76]	; (8000fe0 <HAL_TIM_PWM_MspInit+0x68>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_TIM_PWM_MspInit+0x68>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fa6:	e012      	b.n	8000fce <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <HAL_TIM_PWM_MspInit+0x6c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d10d      	bne.n	8000fce <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_TIM_PWM_MspInit+0x68>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <HAL_TIM_PWM_MspInit+0x68>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <HAL_TIM_PWM_MspInit+0x68>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40000400 	.word	0x40000400
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40000800 	.word	0x40000800

08000fe8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a24      	ldr	r2, [pc, #144]	; (8001098 <HAL_TIM_MspPostInit+0xb0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d11e      	bne.n	8001048 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b23      	ldr	r3, [pc, #140]	; (800109c <HAL_TIM_MspPostInit+0xb4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a22      	ldr	r2, [pc, #136]	; (800109c <HAL_TIM_MspPostInit+0xb4>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_TIM_MspPostInit+0xb4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001036:	2302      	movs	r3, #2
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4817      	ldr	r0, [pc, #92]	; (80010a0 <HAL_TIM_MspPostInit+0xb8>)
 8001042:	f002 f9e9 	bl	8003418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001046:	e022      	b.n	800108e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a15      	ldr	r2, [pc, #84]	; (80010a4 <HAL_TIM_MspPostInit+0xbc>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d11d      	bne.n	800108e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_TIM_MspPostInit+0xb4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <HAL_TIM_MspPostInit+0xb4>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_TIM_MspPostInit+0xb4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800106e:	2340      	movs	r3, #64	; 0x40
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800107e:	2302      	movs	r3, #2
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4807      	ldr	r0, [pc, #28]	; (80010a8 <HAL_TIM_MspPostInit+0xc0>)
 800108a:	f002 f9c5 	bl	8003418 <HAL_GPIO_Init>
}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40000400 	.word	0x40000400
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40000800 	.word	0x40000800
 80010a8:	40020400 	.word	0x40020400

080010ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a41      	ldr	r2, [pc, #260]	; (80011d0 <HAL_UART_MspInit+0x124>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d14b      	bne.n	8001166 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	4b40      	ldr	r3, [pc, #256]	; (80011d4 <HAL_UART_MspInit+0x128>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a3f      	ldr	r2, [pc, #252]	; (80011d4 <HAL_UART_MspInit+0x128>)
 80010d8:	f043 0310 	orr.w	r3, r3, #16
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b3d      	ldr	r3, [pc, #244]	; (80011d4 <HAL_UART_MspInit+0x128>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	61bb      	str	r3, [r7, #24]
 80010e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	4b39      	ldr	r3, [pc, #228]	; (80011d4 <HAL_UART_MspInit+0x128>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a38      	ldr	r2, [pc, #224]	; (80011d4 <HAL_UART_MspInit+0x128>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <HAL_UART_MspInit+0x128>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b32      	ldr	r3, [pc, #200]	; (80011d4 <HAL_UART_MspInit+0x128>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a31      	ldr	r2, [pc, #196]	; (80011d4 <HAL_UART_MspInit+0x128>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <HAL_UART_MspInit+0x128>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001134:	2307      	movs	r3, #7
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	4826      	ldr	r0, [pc, #152]	; (80011d8 <HAL_UART_MspInit+0x12c>)
 8001140:	f002 f96a 	bl	8003418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001154:	2307      	movs	r3, #7
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	481f      	ldr	r0, [pc, #124]	; (80011dc <HAL_UART_MspInit+0x130>)
 8001160:	f002 f95a 	bl	8003418 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001164:	e030      	b.n	80011c8 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <HAL_UART_MspInit+0x134>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d12b      	bne.n	80011c8 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_UART_MspInit+0x128>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	4a16      	ldr	r2, [pc, #88]	; (80011d4 <HAL_UART_MspInit+0x128>)
 800117a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117e:	6413      	str	r3, [r2, #64]	; 0x40
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_UART_MspInit+0x128>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_UART_MspInit+0x128>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <HAL_UART_MspInit+0x128>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6313      	str	r3, [r2, #48]	; 0x30
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <HAL_UART_MspInit+0x128>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011a8:	230c      	movs	r3, #12
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b8:	2307      	movs	r3, #7
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4619      	mov	r1, r3
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_UART_MspInit+0x12c>)
 80011c4:	f002 f928 	bl	8003418 <HAL_GPIO_Init>
}
 80011c8:	bf00      	nop
 80011ca:	3730      	adds	r7, #48	; 0x30
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40011000 	.word	0x40011000
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40004400 	.word	0x40004400

080011e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <NMI_Handler+0x4>

080011ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <HardFault_Handler+0x4>

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <MemManage_Handler+0x4>

080011f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <BusFault_Handler+0x4>

080011fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <UsageFault_Handler+0x4>

08001202 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001230:	f001 ffc8 	bl	80031c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <BSP_I2C1_Init+0x58>)
 8001244:	4a13      	ldr	r2, [pc, #76]	; (8001294 <BSP_I2C1_Init+0x5c>)
 8001246:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <BSP_I2C1_Init+0x60>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	4912      	ldr	r1, [pc, #72]	; (8001298 <BSP_I2C1_Init+0x60>)
 8001250:	600a      	str	r2, [r1, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d117      	bne.n	8001286 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001256:	480e      	ldr	r0, [pc, #56]	; (8001290 <BSP_I2C1_Init+0x58>)
 8001258:	f002 feea 	bl	8004030 <HAL_I2C_GetState>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d111      	bne.n	8001286 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001262:	480b      	ldr	r0, [pc, #44]	; (8001290 <BSP_I2C1_Init+0x58>)
 8001264:	f000 f8ba 	bl	80013dc <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10b      	bne.n	8001286 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800126e:	4808      	ldr	r0, [pc, #32]	; (8001290 <BSP_I2C1_Init+0x58>)
 8001270:	f000 f880 	bl	8001374 <MX_I2C1_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800127a:	f06f 0307 	mvn.w	r3, #7
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	e001      	b.n	8001286 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001286:	687b      	ldr	r3, [r7, #4]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200001b4 	.word	0x200001b4
 8001294:	40005400 	.word	0x40005400
 8001298:	2000008c 	.word	0x2000008c

0800129c <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af04      	add	r7, sp, #16
 80012a2:	60ba      	str	r2, [r7, #8]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4603      	mov	r3, r0
 80012a8:	81fb      	strh	r3, [r7, #14]
 80012aa:	460b      	mov	r3, r1
 80012ac:	81bb      	strh	r3, [r7, #12]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80012b6:	89ba      	ldrh	r2, [r7, #12]
 80012b8:	89f9      	ldrh	r1, [r7, #14]
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	9302      	str	r3, [sp, #8]
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	2310      	movs	r3, #16
 80012ca:	480c      	ldr	r0, [pc, #48]	; (80012fc <BSP_I2C1_WriteReg16+0x60>)
 80012cc:	f002 fb90 	bl	80039f0 <HAL_I2C_Mem_Write>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00c      	beq.n	80012f0 <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80012d6:	4809      	ldr	r0, [pc, #36]	; (80012fc <BSP_I2C1_WriteReg16+0x60>)
 80012d8:	f002 feb8 	bl	800404c <HAL_I2C_GetError>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d103      	bne.n	80012ea <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80012e2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	e002      	b.n	80012f0 <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80012ea:	f06f 0303 	mvn.w	r3, #3
 80012ee:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80012f0:	697b      	ldr	r3, [r7, #20]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001b4 	.word	0x200001b4

08001300 <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af04      	add	r7, sp, #16
 8001306:	60ba      	str	r2, [r7, #8]
 8001308:	461a      	mov	r2, r3
 800130a:	4603      	mov	r3, r0
 800130c:	81fb      	strh	r3, [r7, #14]
 800130e:	460b      	mov	r3, r1
 8001310:	81bb      	strh	r3, [r7, #12]
 8001312:	4613      	mov	r3, r2
 8001314:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800131a:	89ba      	ldrh	r2, [r7, #12]
 800131c:	89f9      	ldrh	r1, [r7, #14]
 800131e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2310      	movs	r3, #16
 800132e:	480c      	ldr	r0, [pc, #48]	; (8001360 <BSP_I2C1_ReadReg16+0x60>)
 8001330:	f002 fc58 	bl	8003be4 <HAL_I2C_Mem_Read>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00c      	beq.n	8001354 <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800133a:	4809      	ldr	r0, [pc, #36]	; (8001360 <BSP_I2C1_ReadReg16+0x60>)
 800133c:	f002 fe86 	bl	800404c <HAL_I2C_GetError>
 8001340:	4603      	mov	r3, r0
 8001342:	2b04      	cmp	r3, #4
 8001344:	d003      	beq.n	800134e <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001346:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	e002      	b.n	8001354 <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800134e:	f06f 0303 	mvn.w	r3, #3
 8001352:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001354:	697b      	ldr	r3, [r7, #20]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200001b4 	.word	0x200001b4

08001364 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001368:	f001 ff40 	bl	80031ec <HAL_GetTick>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <MX_I2C1_Init+0x60>)
 8001384:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <MX_I2C1_Init+0x64>)
 800138a:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800139e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f002 f9cb 	bl	8003754 <HAL_I2C_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40005400 	.word	0x40005400
 80013d8:	000186a0 	.word	0x000186a0

080013dc <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <I2C1_MspInit+0x8c>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <I2C1_MspInit+0x8c>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	6313      	str	r3, [r2, #48]	; 0x30
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <I2C1_MspInit+0x8c>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001406:	2312      	movs	r3, #18
 8001408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001412:	2304      	movs	r3, #4
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	4813      	ldr	r0, [pc, #76]	; (800146c <I2C1_MspInit+0x90>)
 800141e:	f001 fffb 	bl	8003418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001428:	2312      	movs	r3, #18
 800142a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001434:	2304      	movs	r3, #4
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	480b      	ldr	r0, [pc, #44]	; (800146c <I2C1_MspInit+0x90>)
 8001440:	f001 ffea 	bl	8003418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <I2C1_MspInit+0x8c>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <I2C1_MspInit+0x8c>)
 800144e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001452:	6413      	str	r3, [r2, #64]	; 0x40
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <I2C1_MspInit+0x8c>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	; 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40023800 	.word	0x40023800
 800146c:	40020400 	.word	0x40020400

08001470 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e00a      	b.n	8001498 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001482:	f3af 8000 	nop.w
 8001486:	4601      	mov	r1, r0
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	b2ca      	uxtb	r2, r1
 8001490:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	dbf0      	blt.n	8001482 <_read+0x12>
	}

return len;
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e009      	b.n	80014d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	60ba      	str	r2, [r7, #8]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf1      	blt.n	80014bc <_write+0x12>
	}
	return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_close>:

int _close(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	return -1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150a:	605a      	str	r2, [r3, #4]
	return 0;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <_isatty>:

int _isatty(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	return 1;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
	return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <_sbrk+0x5c>)
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <_sbrk+0x60>)
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <_sbrk+0x64>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <_sbrk+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	429a      	cmp	r2, r3
 800157a:	d207      	bcs.n	800158c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800157c:	f004 fdc0 	bl	8006100 <__errno>
 8001580:	4603      	mov	r3, r0
 8001582:	220c      	movs	r2, #12
 8001584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	e009      	b.n	80015a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <_sbrk+0x64>)
 800159c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20018000 	.word	0x20018000
 80015ac:	00000400 	.word	0x00000400
 80015b0:	20000090 	.word	0x20000090
 80015b4:	20000220 	.word	0x20000220

080015b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <SystemInit+0x20>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <SystemInit+0x20>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001614 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e0:	480d      	ldr	r0, [pc, #52]	; (8001618 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015e2:	490e      	ldr	r1, [pc, #56]	; (800161c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015e4:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015f8:	4c0b      	ldr	r4, [pc, #44]	; (8001628 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001606:	f7ff ffd7 	bl	80015b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160a:	f004 fd7f 	bl	800610c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160e:	f7fe ffb3 	bl	8000578 <main>
  bx  lr    
 8001612:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001614:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001620:	0801cd64 	.word	0x0801cd64
  ldr r2, =_sbss
 8001624:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001628:	2000021c 	.word	0x2000021c

0800162c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC_IRQHandler>

0800162e <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	4608      	mov	r0, r1
 8001638:	4611      	mov	r1, r2
 800163a:	461a      	mov	r2, r3
 800163c:	4603      	mov	r3, r0
 800163e:	70fb      	strb	r3, [r7, #3]
 8001640:	460b      	mov	r3, r1
 8001642:	70bb      	strb	r3, [r7, #2]
 8001644:	4613      	mov	r3, r2
 8001646:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8001650:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), address,
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	8839      	ldrh	r1, [r7, #0]
 800165c:	f001 fcf9 	bl	8003052 <RdMulti>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	4313      	orrs	r3, r2
 8001668:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	210a      	movs	r1, #10
 800166e:	4618      	mov	r0, r3
 8001670:	f001 fd3c 	bl	80030ec <WaitMs>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	4313      	orrs	r3, r2
 800167c:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 800167e:	7bbb      	ldrb	r3, [r7, #14]
 8001680:	2bc7      	cmp	r3, #199	; 0xc7
 8001682:	d906      	bls.n	8001692 <_vl53l5cx_poll_for_answer+0x64>
		{
			status |= p_dev->temp_buffer[2];
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	4313      	orrs	r3, r2
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	e00f      	b.n	80016b2 <_vl53l5cx_poll_for_answer+0x84>
		}else if((size >= (uint8_t)4) 
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	2b03      	cmp	r3, #3
 8001696:	d909      	bls.n	80016ac <_vl53l5cx_poll_for_answer+0x7e>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 800169e:	2b7e      	cmp	r3, #126	; 0x7e
 80016a0:	d904      	bls.n	80016ac <_vl53l5cx_poll_for_answer+0x7e>
		{
			status |= VL53L5CX_MCU_ERROR;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80016a8:	73fb      	strb	r3, [r7, #15]
 80016aa:	e002      	b.n	80016b2 <_vl53l5cx_poll_for_answer+0x84>
		}
		else
		{
			timeout++;
 80016ac:	7bbb      	ldrb	r3, [r7, #14]
 80016ae:	3301      	adds	r3, #1
 80016b0:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 80016b2:	78bb      	ldrb	r3, [r7, #2]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 80016bc:	7e3b      	ldrb	r3, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	7f3a      	ldrb	r2, [r7, #28]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d1c3      	bne.n	8001650 <_vl53l5cx_poll_for_answer+0x22>

	return status;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0ea      	sub	sp, #424	; 0x1a8
 80016d8:	af02      	add	r7, sp, #8
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	6018      	str	r0, [r3, #0]
 80016de:	460a      	mov	r2, r1
 80016e0:	1cfb      	adds	r3, r7, #3
 80016e2:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4aab      	ldr	r2, [pc, #684]	; (800199c <_vl53l5cx_send_offset_data+0x2c8>)
 80016f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016f4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	4aa8      	ldr	r2, [pc, #672]	; (80019a0 <_vl53l5cx_send_offset_data+0x2cc>)
 80016fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001702:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer,
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 8001714:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001718:	4619      	mov	r1, r3
 800171a:	f004 fd1b 	bl	8006154 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 800171e:	1cfb      	adds	r3, r7, #3
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b10      	cmp	r3, #16
 8001724:	f040 80f7 	bne.w	8001916 <_vl53l5cx_send_offset_data+0x242>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	cb03      	ldmia	r3!, {r0, r1}
 8001736:	6010      	str	r0, [r2, #0]
 8001738:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001742:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fc9a 	bl	8003080 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f203 514c 	addw	r1, r3, #1356	; 0x54c
 8001754:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175c:	4618      	mov	r0, r3
 800175e:	f004 fcf9 	bl	8006154 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f503 61ca 	add.w	r1, r3, #1616	; 0x650
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	2280      	movs	r2, #128	; 0x80
 8001770:	4618      	mov	r0, r3
 8001772:	f004 fcef 	bl	8006154 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8001776:	2300      	movs	r3, #0
 8001778:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800177c:	e098      	b.n	80018b0 <_vl53l5cx_send_offset_data+0x1dc>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 800177e:	2300      	movs	r3, #0
 8001780:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8001784:	e088      	b.n	8001898 <_vl53l5cx_send_offset_data+0x1c4>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8001786:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800178a:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	4413      	add	r3, r2
 8001792:	005a      	lsls	r2, r3, #1
 8001794:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001798:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 800179c:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80017a0:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	1c59      	adds	r1, r3, #1
 80017ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80017b4:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 80017b6:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80017ba:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	3304      	adds	r3, #4
 80017c4:	0059      	lsls	r1, r3, #1
 80017c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80017ce:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 80017d0:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80017d4:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	f103 0109 	add.w	r1, r3, #9
 80017e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80017ea:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80017ec:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80017f0:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	440a      	add	r2, r1
                                  /(uint32_t)4;
 80017f8:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80017fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8001802:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8001806:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	005a      	lsls	r2, r3, #1
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001818:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 800181a:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800181e:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001832:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8001834:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001838:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 800183c:	00d2      	lsls	r2, r2, #3
 800183e:	440a      	add	r2, r1
 8001840:	3204      	adds	r2, #4
 8001842:	0051      	lsls	r1, r2, #1
 8001844:	f107 021c 	add.w	r2, r7, #28
 8001848:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800184c:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 800184e:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001852:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8001856:	00d2      	lsls	r2, r2, #3
 8001858:	440a      	add	r2, r1
 800185a:	0052      	lsls	r2, r2, #1
 800185c:	f102 0109 	add.w	r1, r2, #9
 8001860:	f107 021c 	add.w	r2, r7, #28
 8001864:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001868:	4413      	add	r3, r2
                                  /(int16_t)4;
 800186a:	2b00      	cmp	r3, #0
 800186c:	da00      	bge.n	8001870 <_vl53l5cx_send_offset_data+0x19c>
 800186e:	3303      	adds	r3, #3
 8001870:	109b      	asrs	r3, r3, #2
 8001872:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8001874:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8001878:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	441a      	add	r2, r3
 8001880:	b209      	sxth	r1, r1
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 800188a:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 800188e:	b2db      	uxtb	r3, r3
 8001890:	3301      	adds	r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8001898:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 800189c:	2b03      	cmp	r3, #3
 800189e:	f77f af72 	ble.w	8001786 <_vl53l5cx_send_offset_data+0xb2>
		for (j = 0; j < (int8_t)4; j++)
 80018a2:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	3301      	adds	r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80018b0:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	f77f af62 	ble.w	800177e <_vl53l5cx_send_offset_data+0xaa>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	3320      	adds	r3, #32
 80018c0:	2260      	movs	r2, #96	; 0x60
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 fc53 	bl	8006170 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 80018ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018ce:	3340      	adds	r3, #64	; 0x40
 80018d0:	22c0      	movs	r2, #192	; 0xc0
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f004 fc4b 	bl	8006170 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 80018e2:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80018e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ea:	4618      	mov	r0, r3
 80018ec:	f004 fc32 	bl	8006154 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 80018f8:	f107 011c 	add.w	r1, r7, #28
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	4618      	mov	r0, r3
 8001900:	f004 fc28 	bl	8006154 <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800190c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8001910:	4618      	mov	r0, r3
 8001912:	f001 fbb5 	bl	8003080 <SwapBuffer>
	}

	(void)memcpy(p_dev->temp_buffer, &(p_dev->temp_buffer[8]),
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8001926:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800192a:	4619      	mov	r1, r3
 800192c:	f004 fc12 	bl	8006154 <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4);
	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f503 62de 	add.w	r2, r3, #1776	; 0x6f0
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	cb03      	ldmia	r3!, {r0, r1}
 800193e:	6010      	str	r0, [r2, #0]
 8001940:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 800194e:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8001952:	f642 6118 	movw	r1, #11800	; 0x2e18
 8001956:	f001 fb65 	bl	8003024 <WrMulti>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8001962:	4313      	orrs	r3, r2
 8001964:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8001968:	1d38      	adds	r0, r7, #4
 800196a:	2303      	movs	r3, #3
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	23ff      	movs	r3, #255	; 0xff
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001976:	2201      	movs	r2, #1
 8001978:	2104      	movs	r1, #4
 800197a:	6800      	ldr	r0, [r0, #0]
 800197c:	f7ff fe57 	bl	800162e <_vl53l5cx_poll_for_answer>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8001988:	4313      	orrs	r3, r2
 800198a:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 800198e:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
}
 8001992:	4618      	mov	r0, r3
 8001994:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	0800753c 	.word	0x0800753c
 80019a0:	08007544 	.word	0x08007544

080019a4 <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0ca      	sub	sp, #296	; 0x128
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	6018      	str	r0, [r3, #0]
 80019ae:	460a      	mov	r2, r1
 80019b0:	1cfb      	adds	r3, r7, #3
 80019b2:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 80019ba:	4a80      	ldr	r2, [pc, #512]	; (8001bbc <_vl53l5cx_send_xtalk_data+0x218>)
 80019bc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80019c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019c4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 80019c8:	4a7d      	ldr	r2, [pc, #500]	; (8001bc0 <_vl53l5cx_send_xtalk_data+0x21c>)
 80019ca:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80019ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019d2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 80019d6:	4b7b      	ldr	r3, [pc, #492]	; (8001bc4 <_vl53l5cx_send_xtalk_data+0x220>)
 80019d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019ec:	f44f 7242 	mov.w	r2, #776	; 0x308
 80019f0:	4619      	mov	r1, r3
 80019f2:	f004 fbaf 	bl	8006154 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 80019f6:	1cfb      	adds	r3, r7, #3
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b10      	cmp	r3, #16
 80019fc:	f040 80b0 	bne.w	8001b60 <_vl53l5cx_send_xtalk_data+0x1bc>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001a0e:	cb03      	ldmia	r3!, {r0, r1}
 8001a10:	6010      	str	r0, [r2, #0]
 8001a12:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001a22:	cb03      	ldmia	r3!, {r0, r1}
 8001a24:	6010      	str	r0, [r2, #0]
 8001a26:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001a30:	f44f 7142 	mov.w	r1, #776	; 0x308
 8001a34:	4618      	mov	r0, r3
 8001a36:	f001 fb23 	bl	8003080 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f203 5144 	addw	r1, r3, #1348	; 0x544
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f004 fb82 	bl	8006154 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8001a56:	e053      	b.n	8001b00 <_vl53l5cx_send_xtalk_data+0x15c>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8001a5e:	e044      	b.n	8001aea <_vl53l5cx_send_xtalk_data+0x146>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8001a60:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 8001a64:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	005a      	lsls	r2, r3, #1
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8001a76:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8001a7a:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	440b      	add	r3, r1
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	1c59      	adds	r1, r3, #1
 8001a86:	f107 0308 	add.w	r3, r7, #8
 8001a8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a8e:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8001a90:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8001a94:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	0059      	lsls	r1, r3, #1
 8001aa0:	f107 0308 	add.w	r3, r7, #8
 8001aa4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001aa8:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001aaa:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8001aae:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	f103 0109 	add.w	r1, r3, #9
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ac4:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8001ac6:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8001aca:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 8001ace:	0092      	lsls	r2, r2, #2
 8001ad0:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001ad2:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8001ad4:	f107 0308 	add.w	r3, r7, #8
 8001ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 8001adc:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8001aea:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	ddb6      	ble.n	8001a60 <_vl53l5cx_send_xtalk_data+0xbc>
		for (j = 0; j < (int8_t)4; j++)
 8001af2:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	3301      	adds	r3, #1
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8001b00:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	dda7      	ble.n	8001a58 <_vl53l5cx_send_xtalk_data+0xb4>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8001b08:	f107 0308 	add.w	r3, r7, #8
 8001b0c:	3340      	adds	r3, #64	; 0x40
 8001b0e:	22c0      	movs	r2, #192	; 0xc0
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 fb2c 	bl	8006170 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f203 5344 	addw	r3, r3, #1348	; 0x544
 8001b20:	f107 0108 	add.w	r1, r7, #8
 8001b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f004 fb13 	bl	8006154 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001b36:	f44f 7142 	mov.w	r1, #776	; 0x308
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f001 faa0 	bl	8003080 <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f203 6344 	addw	r3, r3, #1604	; 0x644
 8001b48:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001b4c:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 , 
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8001b56:	2204      	movs	r2, #4
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f004 fb08 	bl	8006170 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8001b6c:	f44f 7342 	mov.w	r3, #776	; 0x308
 8001b70:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 8001b74:	f001 fa56 	bl	8003024 <WrMulti>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001b80:	4313      	orrs	r3, r2
 8001b82:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8001b86:	1d38      	adds	r0, r7, #4
 8001b88:	2303      	movs	r3, #3
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	23ff      	movs	r3, #255	; 0xff
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001b94:	2201      	movs	r2, #1
 8001b96:	2104      	movs	r1, #4
 8001b98:	6800      	ldr	r0, [r0, #0]
 8001b9a:	f7ff fd48 	bl	800162e <_vl53l5cx_poll_for_answer>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8001bac:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	0800754c 	.word	0x0800754c
 8001bc0:	08007554 	.word	0x08007554
 8001bc4:	0001fca0 	.word	0x0001fca0

08001bc8 <vl53l5cx_is_alive>:

uint8_t vl53l5cx_is_alive(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_is_alive)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	73fb      	strb	r3, [r7, #15]
	uint8_t device_id, revision_id;

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001bde:	4618      	mov	r0, r3
 8001be0:	f001 fa0a 	bl	8002ff8 <WrByte>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0, &device_id);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f107 020e 	add.w	r2, r7, #14
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f001 f9e9 	bl	8002fce <RdByte>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 1, &revision_id);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f107 020d 	add.w	r2, r7, #13
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 f9dd 	bl	8002fce <RdByte>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2202      	movs	r2, #2
 8001c22:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 f9e6 	bl	8002ff8 <WrByte>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	73fb      	strb	r3, [r7, #15]

	if((device_id == (uint8_t)0xF0) && (revision_id == (uint8_t)0x02))
 8001c36:	7bbb      	ldrb	r3, [r7, #14]
 8001c38:	2bf0      	cmp	r3, #240	; 0xf0
 8001c3a:	d106      	bne.n	8001c4a <vl53l5cx_is_alive+0x82>
 8001c3c:	7b7b      	ldrb	r3, [r7, #13]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d103      	bne.n	8001c4a <vl53l5cx_is_alive+0x82>
	{
		*p_is_alive = 1;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	e002      	b.n	8001c50 <vl53l5cx_is_alive+0x88>
	}
	else
	{
		*p_is_alive = 0;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <vl53l5cx_init>:

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8001c68:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001c6c:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4ae6      	ldr	r2, [pc, #920]	; (8002010 <vl53l5cx_init+0x3b4>)
 8001c76:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4ae6      	ldr	r2, [pc, #920]	; (8002014 <vl53l5cx_init+0x3b8>)
 8001c7c:	619a      	str	r2, [r3, #24]
        
	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001c86:	4618      	mov	r0, r3
 8001c88:	f001 f9b6 	bl	8002ff8 <WrByte>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2204      	movs	r2, #4
 8001c9a:	2109      	movs	r1, #9
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f001 f9ab 	bl	8002ff8 <WrByte>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2240      	movs	r2, #64	; 0x40
 8001cb0:	210f      	movs	r1, #15
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 f9a0 	bl	8002ff8 <WrByte>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	210a      	movs	r1, #10
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f001 f995 	bl	8002ff8 <WrByte>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f107 0216 	add.w	r2, r7, #22
 8001cde:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 f973 	bl	8002fce <RdByte>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	7dfb      	ldrb	r3, [r7, #23]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	210c      	movs	r1, #12
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 f97d 	bl	8002ff8 <WrByte>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	461a      	mov	r2, r3
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f240 1101 	movw	r1, #257	; 0x101
 8001d10:	4618      	mov	r0, r3
 8001d12:	f001 f971 	bl	8002ff8 <WrByte>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f001 f965 	bl	8002ff8 <WrByte>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001d40:	4618      	mov	r0, r3
 8001d42:	f001 f959 	bl	8002ff8 <WrByte>
 8001d46:	4603      	mov	r3, r0
 8001d48:	461a      	mov	r2, r3
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f244 0102 	movw	r1, #16386	; 0x4002
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f001 f94d 	bl	8002ff8 <WrByte>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	7dfb      	ldrb	r3, [r7, #23]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f244 0102 	movw	r1, #16386	; 0x4002
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 f941 	bl	8002ff8 <WrByte>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2203      	movs	r2, #3
 8001d84:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f001 f935 	bl	8002ff8 <WrByte>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	461a      	mov	r2, r3
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f240 1103 	movw	r1, #259	; 0x103
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 f929 	bl	8002ff8 <WrByte>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461a      	mov	r2, r3
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	210c      	movs	r1, #12
 8001db6:	4618      	mov	r0, r3
 8001db8:	f001 f91e 	bl	8002ff8 <WrByte>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	7dfb      	ldrb	r3, [r7, #23]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2243      	movs	r2, #67	; 0x43
 8001dca:	210f      	movs	r1, #15
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 f913 	bl	8002ff8 <WrByte>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2101      	movs	r1, #1
 8001de0:	4618      	mov	r0, r3
 8001de2:	f001 f983 	bl	80030ec <WaitMs>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2240      	movs	r2, #64	; 0x40
 8001df4:	210f      	movs	r1, #15
 8001df6:	4618      	mov	r0, r3
 8001df8:	f001 f8fe 	bl	8002ff8 <WrByte>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	210a      	movs	r1, #10
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f001 f8f3 	bl	8002ff8 <WrByte>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2164      	movs	r1, #100	; 0x64
 8001e20:	4618      	mov	r0, r3
 8001e22:	f001 f963 	bl	80030ec <WaitMs>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 f8dd 	bl	8002ff8 <WrByte>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8001e48:	2301      	movs	r3, #1
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	23ff      	movs	r3, #255	; 0xff
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2306      	movs	r3, #6
 8001e52:	2200      	movs	r2, #0
 8001e54:	2101      	movs	r1, #1
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff fbe9 	bl	800162e <_vl53l5cx_poll_for_answer>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461a      	mov	r2, r3
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	210e      	movs	r1, #14
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f001 f8c3 	bl	8002ff8 <WrByte>
 8001e72:	4603      	mov	r3, r0
 8001e74:	461a      	mov	r2, r3
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001e84:	4618      	mov	r0, r3
 8001e86:	f001 f8b7 	bl	8002ff8 <WrByte>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	220d      	movs	r2, #13
 8001e98:	2103      	movs	r1, #3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 f8ac 	bl	8002ff8 <WrByte>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	7dfb      	ldrb	r3, [r7, #23]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f001 f8a0 	bl	8002ff8 <WrByte>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461a      	mov	r2, r3
 8001ebc:	7dfb      	ldrb	r3, [r7, #23]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8001ec2:	2310      	movs	r3, #16
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	2310      	movs	r3, #16
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2321      	movs	r3, #33	; 0x21
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2101      	movs	r1, #1
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff fbac 	bl	800162e <_vl53l5cx_poll_for_answer>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	461a      	mov	r2, r3
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f001 f885 	bl	8002ff8 <WrByte>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	210c      	movs	r1, #12
 8001efe:	4618      	mov	r0, r3
 8001f00:	f001 f87a 	bl	8002ff8 <WrByte>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001f16:	4618      	mov	r0, r3
 8001f18:	f001 f86e 	bl	8002ff8 <WrByte>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f240 1101 	movw	r1, #257	; 0x101
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f001 f862 	bl	8002ff8 <WrByte>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	7dfb      	ldrb	r3, [r7, #23]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001f46:	4618      	mov	r0, r3
 8001f48:	f001 f856 	bl	8002ff8 <WrByte>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f001 f84a 	bl	8002ff8 <WrByte>
 8001f64:	4603      	mov	r3, r0
 8001f66:	461a      	mov	r2, r3
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f244 0102 	movw	r1, #16386	; 0x4002
 8001f76:	4618      	mov	r0, r3
 8001f78:	f001 f83e 	bl	8002ff8 <WrByte>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	7dfb      	ldrb	r3, [r7, #23]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f244 0102 	movw	r1, #16386	; 0x4002
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 f832 	bl	8002ff8 <WrByte>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f001 f826 	bl	8002ff8 <WrByte>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f240 1103 	movw	r1, #259	; 0x103
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f001 f81a 	bl	8002ff8 <WrByte>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f244 010f 	movw	r1, #16399	; 0x400f
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f001 f80e 	bl	8002ff8 <WrByte>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2243      	movs	r2, #67	; 0x43
 8001fea:	f240 211a 	movw	r1, #538	; 0x21a
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f001 f802 	bl	8002ff8 <WrByte>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2203      	movs	r2, #3
 8002002:	f240 211a 	movw	r1, #538	; 0x21a
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fff6 	bl	8002ff8 <WrByte>
 800200c:	e004      	b.n	8002018 <vl53l5cx_init+0x3bc>
 800200e:	bf00      	nop
 8002010:	0801c98c 	.word	0x0801c98c
 8002014:	0801c5c0 	.word	0x0801c5c0
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	4313      	orrs	r3, r2
 8002020:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f240 211a 	movw	r1, #538	; 0x21a
 800202a:	4618      	mov	r0, r3
 800202c:	f000 ffe4 	bl	8002ff8 <WrByte>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	7dfb      	ldrb	r3, [r7, #23]
 8002036:	4313      	orrs	r3, r2
 8002038:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f240 211a 	movw	r1, #538	; 0x21a
 8002042:	4618      	mov	r0, r3
 8002044:	f000 ffd8 	bl	8002ff8 <WrByte>
 8002048:	4603      	mov	r3, r0
 800204a:	461a      	mov	r2, r3
 800204c:	7dfb      	ldrb	r3, [r7, #23]
 800204e:	4313      	orrs	r3, r2
 8002050:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f240 2119 	movw	r1, #537	; 0x219
 800205a:	4618      	mov	r0, r3
 800205c:	f000 ffcc 	bl	8002ff8 <WrByte>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	4313      	orrs	r3, r2
 8002068:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f240 211b 	movw	r1, #539	; 0x21b
 8002072:	4618      	mov	r0, r3
 8002074:	f000 ffc0 	bl	8002ff8 <WrByte>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	7dfb      	ldrb	r3, [r7, #23]
 800207e:	4313      	orrs	r3, r2
 8002080:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800208a:	4618      	mov	r0, r3
 800208c:	f000 ffb4 	bl	8002ff8 <WrByte>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	4313      	orrs	r3, r2
 8002098:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	210c      	movs	r1, #12
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 ffa9 	bl	8002ff8 <WrByte>
 80020a6:	4603      	mov	r3, r0
 80020a8:	461a      	mov	r2, r3
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 ff9d 	bl	8002ff8 <WrByte>
 80020be:	4603      	mov	r3, r0
 80020c0:	461a      	mov	r2, r3
 80020c2:	7dfb      	ldrb	r3, [r7, #23]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2207      	movs	r2, #7
 80020cc:	2120      	movs	r1, #32
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 ff92 	bl	8002ff8 <WrByte>
 80020d4:	4603      	mov	r3, r0
 80020d6:	461a      	mov	r2, r3
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	4313      	orrs	r3, r2
 80020dc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2206      	movs	r2, #6
 80020e2:	2120      	movs	r1, #32
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 ff87 	bl	8002ff8 <WrByte>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461a      	mov	r2, r3
 80020ee:	7dfb      	ldrb	r3, [r7, #23]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2209      	movs	r2, #9
 80020f8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 ff7b 	bl	8002ff8 <WrByte>
 8002102:	4603      	mov	r3, r0
 8002104:	461a      	mov	r2, r3
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	4313      	orrs	r3, r2
 800210a:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002112:	4acb      	ldr	r2, [pc, #812]	; (8002440 <vl53l5cx_init+0x7e4>)
 8002114:	2100      	movs	r1, #0
 8002116:	f000 ff85 	bl	8003024 <WrMulti>
 800211a:	4603      	mov	r3, r0
 800211c:	461a      	mov	r2, r3
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	4313      	orrs	r3, r2
 8002122:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	220a      	movs	r2, #10
 8002128:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800212c:	4618      	mov	r0, r3
 800212e:	f000 ff63 	bl	8002ff8 <WrByte>
 8002132:	4603      	mov	r3, r0
 8002134:	461a      	mov	r2, r3
 8002136:	7dfb      	ldrb	r3, [r7, #23]
 8002138:	4313      	orrs	r3, r2
 800213a:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002142:	4ac0      	ldr	r2, [pc, #768]	; (8002444 <vl53l5cx_init+0x7e8>)
 8002144:	2100      	movs	r1, #0
 8002146:	f000 ff6d 	bl	8003024 <WrMulti>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	4313      	orrs	r3, r2
 8002152:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	220b      	movs	r2, #11
 8002158:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800215c:	4618      	mov	r0, r3
 800215e:	f000 ff4b 	bl	8002ff8 <WrByte>
 8002162:	4603      	mov	r3, r0
 8002164:	461a      	mov	r2, r3
 8002166:	7dfb      	ldrb	r3, [r7, #23]
 8002168:	4313      	orrs	r3, r2
 800216a:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002172:	4ab5      	ldr	r2, [pc, #724]	; (8002448 <vl53l5cx_init+0x7ec>)
 8002174:	2100      	movs	r1, #0
 8002176:	f000 ff55 	bl	8003024 <WrMulti>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	7dfb      	ldrb	r3, [r7, #23]
 8002180:	4313      	orrs	r3, r2
 8002182:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800218c:	4618      	mov	r0, r3
 800218e:	f000 ff33 	bl	8002ff8 <WrByte>
 8002192:	4603      	mov	r3, r0
 8002194:	461a      	mov	r2, r3
 8002196:	7dfb      	ldrb	r3, [r7, #23]
 8002198:	4313      	orrs	r3, r2
 800219a:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 ff27 	bl	8002ff8 <WrByte>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461a      	mov	r2, r3
 80021ae:	7dfb      	ldrb	r3, [r7, #23]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	220d      	movs	r2, #13
 80021b8:	2103      	movs	r1, #3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 ff1c 	bl	8002ff8 <WrByte>
 80021c0:	4603      	mov	r3, r0
 80021c2:	461a      	mov	r2, r3
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 ff10 	bl	8002ff8 <WrByte>
 80021d8:	4603      	mov	r3, r0
 80021da:	461a      	mov	r2, r3
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
 80021de:	4313      	orrs	r3, r2
 80021e0:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80021e2:	2310      	movs	r3, #16
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	2310      	movs	r3, #16
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2321      	movs	r3, #33	; 0x21
 80021ec:	2200      	movs	r2, #0
 80021ee:	2101      	movs	r1, #1
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fa1c 	bl	800162e <_vl53l5cx_poll_for_answer>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	7dfb      	ldrb	r3, [r7, #23]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002208:	4618      	mov	r0, r3
 800220a:	f000 fef5 	bl	8002ff8 <WrByte>
 800220e:	4603      	mov	r3, r0
 8002210:	461a      	mov	r2, r3
 8002212:	7dfb      	ldrb	r3, [r7, #23]
 8002214:	4313      	orrs	r3, r2
 8002216:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	210c      	movs	r1, #12
 800221e:	4618      	mov	r0, r3
 8002220:	f000 feea 	bl	8002ff8 <WrByte>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	7dfb      	ldrb	r3, [r7, #23]
 800222a:	4313      	orrs	r3, r2
 800222c:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002236:	4618      	mov	r0, r3
 8002238:	f000 fede 	bl	8002ff8 <WrByte>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	4313      	orrs	r3, r2
 8002244:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f44f 718a 	mov.w	r1, #276	; 0x114
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fed2 	bl	8002ff8 <WrByte>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	7dfb      	ldrb	r3, [r7, #23]
 800225a:	4313      	orrs	r3, r2
 800225c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f240 1115 	movw	r1, #277	; 0x115
 8002266:	4618      	mov	r0, r3
 8002268:	f000 fec6 	bl	8002ff8 <WrByte>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	7dfb      	ldrb	r3, [r7, #23]
 8002272:	4313      	orrs	r3, r2
 8002274:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2242      	movs	r2, #66	; 0x42
 800227a:	f44f 718b 	mov.w	r1, #278	; 0x116
 800227e:	4618      	mov	r0, r3
 8002280:	f000 feba 	bl	8002ff8 <WrByte>
 8002284:	4603      	mov	r3, r0
 8002286:	461a      	mov	r2, r3
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	4313      	orrs	r3, r2
 800228c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f240 1117 	movw	r1, #279	; 0x117
 8002296:	4618      	mov	r0, r3
 8002298:	f000 feae 	bl	8002ff8 <WrByte>
 800229c:	4603      	mov	r3, r0
 800229e:	461a      	mov	r2, r3
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	210b      	movs	r1, #11
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fea3 	bl	8002ff8 <WrByte>
 80022b2:	4603      	mov	r3, r0
 80022b4:	461a      	mov	r2, r3
 80022b6:	7dfb      	ldrb	r3, [r7, #23]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	210c      	movs	r1, #12
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fe98 	bl	8002ff8 <WrByte>
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	210b      	movs	r1, #11
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fe8d 	bl	8002ff8 <WrByte>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 0x00);
 80022e8:	2300      	movs	r3, #0
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	23ff      	movs	r3, #255	; 0xff
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	2306      	movs	r3, #6
 80022f2:	2200      	movs	r2, #0
 80022f4:	2101      	movs	r1, #1
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff f999 	bl	800162e <_vl53l5cx_poll_for_answer>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	7dfb      	ldrb	r3, [r7, #23]
 8002302:	4313      	orrs	r3, r2
 8002304:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800230e:	4618      	mov	r0, r3
 8002310:	f000 fe72 	bl	8002ff8 <WrByte>
 8002314:	4603      	mov	r3, r0
 8002316:	461a      	mov	r2, r3
 8002318:	7dfb      	ldrb	r3, [r7, #23]
 800231a:	4313      	orrs	r3, r2
 800231c:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	2328      	movs	r3, #40	; 0x28
 8002322:	4a4a      	ldr	r2, [pc, #296]	; (800244c <vl53l5cx_init+0x7f0>)
 8002324:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 8002328:	f000 fe7c 	bl	8003024 <WrMulti>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	4313      	orrs	r3, r2
 8002334:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 8002336:	2302      	movs	r3, #2
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	23ff      	movs	r3, #255	; 0xff
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002342:	2200      	movs	r2, #0
 8002344:	2104      	movs	r1, #4
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff f971 	bl	800162e <_vl53l5cx_poll_for_answer>
 800234c:	4603      	mov	r3, r0
 800234e:	461a      	mov	r2, r3
 8002350:	7dfb      	ldrb	r3, [r7, #23]
 8002352:	4313      	orrs	r3, r2
 8002354:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8002356:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 800235e:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8002362:	f642 4104 	movw	r1, #11268	; 0x2c04
 8002366:	f000 fe74 	bl	8003052 <RdMulti>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	7dfb      	ldrb	r3, [r7, #23]
 8002370:	4313      	orrs	r3, r2
 8002372:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f103 0020 	add.w	r0, r3, #32
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002380:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8002384:	4619      	mov	r1, r3
 8002386:	f003 fee5 	bl	8006154 <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 800238a:	2110      	movs	r1, #16
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff f9a1 	bl	80016d4 <_vl53l5cx_send_offset_data>
 8002392:	4603      	mov	r3, r0
 8002394:	461a      	mov	r2, r3
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	4313      	orrs	r3, r2
 800239a:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023a2:	4a2b      	ldr	r2, [pc, #172]	; (8002450 <vl53l5cx_init+0x7f4>)
 80023a4:	4618      	mov	r0, r3
 80023a6:	4611      	mov	r1, r2
 80023a8:	f44f 7342 	mov.w	r3, #776	; 0x308
 80023ac:	461a      	mov	r2, r3
 80023ae:	f003 fed1 	bl	8006154 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 80023b2:	2110      	movs	r1, #16
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff faf5 	bl	80019a4 <_vl53l5cx_send_xtalk_data>
 80023ba:	4603      	mov	r3, r0
 80023bc:	461a      	mov	r2, r3
 80023be:	7dfb      	ldrb	r3, [r7, #23]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5 firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 80023ce:	f642 4134 	movw	r1, #11316	; 0x2c34
 80023d2:	f000 fe27 	bl	8003024 <WrMulti>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	7dfb      	ldrb	r3, [r7, #23]
 80023dc:	4313      	orrs	r3, r2
 80023de:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80023e0:	2303      	movs	r3, #3
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	23ff      	movs	r3, #255	; 0xff
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80023ec:	2201      	movs	r2, #1
 80023ee:	2104      	movs	r1, #4
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff f91c 	bl	800162e <_vl53l5cx_poll_for_answer>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8002400:	f107 0110 	add.w	r1, r7, #16
 8002404:	2304      	movs	r3, #4
 8002406:	f64c 7278 	movw	r2, #53112	; 0xcf78
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fd14 	bl	8002e38 <vl53l5cx_dci_write_data>
 8002410:	4603      	mov	r3, r0
 8002412:	461a      	mov	r2, r3
 8002414:	7dfb      	ldrb	r3, [r7, #23]
 8002416:	4313      	orrs	r3, r2
 8002418:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 800241a:	f107 010c 	add.w	r1, r7, #12
 800241e:	2304      	movs	r3, #4
 8002420:	f64c 525c 	movw	r2, #52572	; 0xcd5c
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fd07 	bl	8002e38 <vl53l5cx_dci_write_data>
 800242a:	4603      	mov	r3, r0
 800242c:	461a      	mov	r2, r3
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	4313      	orrs	r3, r2
 8002432:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_DCI_SINGLE_RANGE, 
			(uint16_t)sizeof(single_range));
	return status;
 8002434:	7dfb      	ldrb	r3, [r7, #23]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	080075c0 	.word	0x080075c0
 8002444:	0800f5c0 	.word	0x0800f5c0
 8002448:	080175c0 	.word	0x080175c0
 800244c:	0801cc94 	.word	0x0801cc94
 8002450:	0801c98c 	.word	0x0801c98c

08002454 <vl53l5cx_start_ranging>:
	return status;
}

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8002454:	b5b0      	push	{r4, r5, r7, lr}
 8002456:	b09c      	sub	sp, #112	; 0x70
 8002458:	af02      	add	r7, sp, #8
 800245a:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8002462:	2300      	movs	r3, #0
 8002464:	653b      	str	r3, [r7, #80]	; 0x50
 8002466:	2300      	movs	r3, #0
 8002468:	657b      	str	r3, [r7, #84]	; 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 800246a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800246e:	64fb      	str	r3, [r7, #76]	; 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 8002470:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8002474:	4619      	mov	r1, r3
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fbb6 	bl	8002be8 <vl53l5cx_get_resolution>
 800247c:	4603      	mov	r3, r0
 800247e:	461a      	mov	r2, r3
 8002480:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002484:	4313      	orrs	r3, r2
 8002486:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	p_dev->data_read_size = 0;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	22ff      	movs	r2, #255	; 0xff
 8002494:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8002496:	4b98      	ldr	r3, [pc, #608]	; (80026f8 <vl53l5cx_start_ranging+0x2a4>)
 8002498:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800249c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800249e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 80024a2:	4b96      	ldr	r3, [pc, #600]	; (80026fc <vl53l5cx_start_ranging+0x2a8>)
 80024a4:	f107 040c 	add.w	r4, r7, #12
 80024a8:	461d      	mov	r5, r3
 80024aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 80024ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024bc:	3308      	adds	r3, #8
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 80024c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c2:	3320      	adds	r3, #32
 80024c4:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 80024c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c8:	3340      	adds	r3, #64	; 0x40
 80024ca:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 80024cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80024d2:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 80024d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80024da:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 80024dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 80024e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ea:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80024ec:	2300      	movs	r3, #0
 80024ee:	667b      	str	r3, [r7, #100]	; 0x64
 80024f0:	e075      	b.n	80025de <vl53l5cx_start_ranging+0x18a>
	{
		if ((output[i] == (uint8_t)0) 
 80024f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80024fa:	4413      	add	r3, r2
 80024fc:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d068      	beq.n	80025d6 <vl53l5cx_start_ranging+0x182>
                    || ((output_bh_enable[i/(uint32_t)32]
 8002504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800250e:	4413      	add	r3, r2
 8002510:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8002514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	fa22 f303 	lsr.w	r3, r2, r3
 800251e:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d057      	beq.n	80025d6 <vl53l5cx_start_ranging+0x182>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8002526:	f107 020c 	add.w	r2, r7, #12
 800252a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8002532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d03a      	beq.n	80025b6 <vl53l5cx_start_ranging+0x162>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8002540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d833      	bhi.n	80025b6 <vl53l5cx_start_ranging+0x162>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 800254e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002550:	885b      	ldrh	r3, [r3, #2]
 8002552:	f245 42cf 	movw	r2, #21711	; 0x54cf
 8002556:	4293      	cmp	r3, r2
 8002558:	d910      	bls.n	800257c <vl53l5cx_start_ranging+0x128>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 800255a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255c:	885b      	ldrh	r3, [r3, #2]
 800255e:	f645 028f 	movw	r2, #22671	; 0x588f
 8002562:	4293      	cmp	r3, r2
 8002564:	d80a      	bhi.n	800257c <vl53l5cx_start_ranging+0x128>
			{
				bh_ptr->size = resolution;
 8002566:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800256a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256e:	b299      	uxth	r1, r3
 8002570:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002572:	8813      	ldrh	r3, [r2, #0]
 8002574:	f361 130f 	bfi	r3, r1, #4, #12
 8002578:	8013      	strh	r3, [r2, #0]
 800257a:	e009      	b.n	8002590 <vl53l5cx_start_ranging+0x13c>
			}	
			else
			{
				bh_ptr->size = (uint8_t)(resolution 
 800257c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002584:	b299      	uxth	r1, r3
 8002586:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002588:	8813      	ldrh	r3, [r2, #0]
 800258a:	f361 130f 	bfi	r3, r1, #4, #12
 800258e:	8013      	strh	r3, [r2, #0]
                                  * (uint8_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002596:	7812      	ldrb	r2, [r2, #0]
 8002598:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	4611      	mov	r1, r2
 80025a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80025a2:	8812      	ldrh	r2, [r2, #0]
 80025a4:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80025a8:	b292      	uxth	r2, r2
 80025aa:	fb02 f201 	mul.w	r2, r2, r1
 80025ae:	441a      	add	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	615a      	str	r2, [r3, #20]
 80025b4:	e009      	b.n	80025ca <vl53l5cx_start_ranging+0x176>
		}
		else
		{	
			p_dev->data_read_size += bh_ptr->size;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80025bc:	8812      	ldrh	r2, [r2, #0]
 80025be:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80025c2:	b292      	uxth	r2, r2
 80025c4:	441a      	add	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	1d1a      	adds	r2, r3, #4
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	615a      	str	r2, [r3, #20]
 80025d4:	e000      	b.n	80025d8 <vl53l5cx_start_ranging+0x184>
			continue;
 80025d6:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80025d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025da:	3301      	adds	r3, #1
 80025dc:	667b      	str	r3, [r7, #100]	; 0x64
 80025de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025e0:	2b0b      	cmp	r3, #11
 80025e2:	d986      	bls.n	80024f2 <vl53l5cx_start_ranging+0x9e>
	}
	p_dev->data_read_size += (uint32_t)20;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	f103 0214 	add.w	r2, r3, #20
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	615a      	str	r2, [r3, #20]

	status |= vl53l5cx_dci_write_data(p_dev,
 80025f0:	f107 010c 	add.w	r1, r7, #12
 80025f4:	2330      	movs	r3, #48	; 0x30
 80025f6:	f64c 5278 	movw	r2, #52600	; 0xcd78
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fc1c 	bl	8002e38 <vl53l5cx_dci_write_data>
 8002600:	4603      	mov	r3, r0
 8002602:	461a      	mov	r2, r3
 8002604:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002608:	4313      	orrs	r3, r2
 800260a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

    header_config[0] = p_dev->data_read_size;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	653b      	str	r3, [r7, #80]	; 0x50
    header_config[1] = i + (uint32_t)1;
 8002614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002616:	3301      	adds	r3, #1
 8002618:	657b      	str	r3, [r7, #84]	; 0x54
        
	status |= vl53l5cx_dci_write_data(p_dev,
 800261a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800261e:	2308      	movs	r3, #8
 8002620:	f64c 5260 	movw	r2, #52576	; 0xcd60
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fc07 	bl	8002e38 <vl53l5cx_dci_write_data>
 800262a:	4603      	mov	r3, r0
 800262c:	461a      	mov	r2, r3
 800262e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002632:	4313      	orrs	r3, r2
 8002634:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 8002638:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800263c:	2310      	movs	r3, #16
 800263e:	f64c 5268 	movw	r2, #52584	; 0xcd68
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fbf8 	bl	8002e38 <vl53l5cx_dci_write_data>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002650:	4313      	orrs	r3, r2
 8002652:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fcca 	bl	8002ff8 <WrByte>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800266c:	4313      	orrs	r3, r2
 800266e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2205      	movs	r2, #5
 8002676:	2109      	movs	r1, #9
 8002678:	4618      	mov	r0, r3
 800267a:	f000 fcbd 	bl	8002ff8 <WrByte>
 800267e:	4603      	mov	r3, r0
 8002680:	461a      	mov	r2, r3
 8002682:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002686:	4313      	orrs	r3, r2
 8002688:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fcaf 	bl	8002ff8 <WrByte>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END - 
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80026ae:	2304      	movs	r3, #4
 80026b0:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 80026b4:	f000 fcb6 	bl	8003024 <WrMulti>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80026c6:	2303      	movs	r3, #3
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	23ff      	movs	r3, #255	; 0xff
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80026d2:	2201      	movs	r2, #1
 80026d4:	2104      	movs	r1, #4
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe ffa9 	bl	800162e <_vl53l5cx_poll_for_answer>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80026ea:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3768      	adds	r7, #104	; 0x68
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bdb0      	pop	{r4, r5, r7, pc}
 80026f6:	bf00      	nop
 80026f8:	0800755c 	.word	0x0800755c
 80026fc:	0800756c 	.word	0x0800756c

08002700 <vl53l5cx_stop_ranging>:

uint8_t vl53l5cx_stop_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L5CX_STATUS_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	74fb      	strb	r3, [r7, #19]
 800270c:	2300      	movs	r3, #0
 800270e:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f107 020c 	add.w	r2, r7, #12
 800271e:	2304      	movs	r3, #4
 8002720:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8002724:	f000 fc95 	bl	8003052 <RdMulti>
 8002728:	4603      	mov	r3, r0
 800272a:	461a      	mov	r2, r3
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	4313      	orrs	r3, r2
 8002730:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if(auto_stop_flag != (uint32_t)0x4FF)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8002738:	4293      	cmp	r3, r2
 800273a:	d045      	beq.n	80027c8 <vl53l5cx_stop_ranging+0xc8>
	{
	        status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fc57 	bl	8002ff8 <WrByte>
 800274a:	4603      	mov	r3, r0
 800274c:	461a      	mov	r2, r3
 800274e:	7dfb      	ldrb	r3, [r7, #23]
 8002750:	4313      	orrs	r3, r2
 8002752:	75fb      	strb	r3, [r7, #23]

	        /* Provoke MCU stop */
	        status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2216      	movs	r2, #22
 8002758:	2115      	movs	r1, #21
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fc4c 	bl	8002ff8 <WrByte>
 8002760:	4603      	mov	r3, r0
 8002762:	461a      	mov	r2, r3
 8002764:	7dfb      	ldrb	r3, [r7, #23]
 8002766:	4313      	orrs	r3, r2
 8002768:	75fb      	strb	r3, [r7, #23]
	        status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	2114      	movs	r1, #20
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fc41 	bl	8002ff8 <WrByte>
 8002776:	4603      	mov	r3, r0
 8002778:	461a      	mov	r2, r3
 800277a:	7dfb      	ldrb	r3, [r7, #23]
 800277c:	4313      	orrs	r3, r2
 800277e:	75fb      	strb	r3, [r7, #23]

	        /* Poll for G02 status 0 MCU stop */
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8002780:	e01e      	b.n	80027c0 <vl53l5cx_stop_ranging+0xc0>
	        {
	        	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f107 0213 	add.w	r2, r7, #19
 8002788:	2106      	movs	r1, #6
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fc1f 	bl	8002fce <RdByte>
 8002790:	4603      	mov	r3, r0
 8002792:	461a      	mov	r2, r3
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	4313      	orrs	r3, r2
 8002798:	75fb      	strb	r3, [r7, #23]
	        	status |= WaitMs(&(p_dev->platform), 10);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	210a      	movs	r1, #10
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fca4 	bl	80030ec <WaitMs>
 80027a4:	4603      	mov	r3, r0
 80027a6:	461a      	mov	r2, r3
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	75fb      	strb	r3, [r7, #23]
	        	timeout++;
 80027ae:	8abb      	ldrh	r3, [r7, #20]
 80027b0:	3301      	adds	r3, #1
 80027b2:	82bb      	strh	r3, [r7, #20]
                        /* Timeout reached after 5 seconds */
	        	if(timeout > (uint16_t)500)
 80027b4:	8abb      	ldrh	r3, [r7, #20]
 80027b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027ba:	d901      	bls.n	80027c0 <vl53l5cx_stop_ranging+0xc0>
				{
					status = VL53L5CX_STATUS_ERROR;
 80027bc:	23ff      	movs	r3, #255	; 0xff
 80027be:	75fb      	strb	r3, [r7, #23]
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 80027c0:	7cfb      	ldrb	r3, [r7, #19]
 80027c2:	b25b      	sxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	dadc      	bge.n	8002782 <vl53l5cx_stop_ranging+0x82>
				}
        	}
        }
	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fc11 	bl	8002ff8 <WrByte>
 80027d6:	4603      	mov	r3, r0
 80027d8:	461a      	mov	r2, r3
 80027da:	7dfb      	ldrb	r3, [r7, #23]
 80027dc:	4313      	orrs	r3, r2
 80027de:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	2114      	movs	r1, #20
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fc06 	bl	8002ff8 <WrByte>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461a      	mov	r2, r3
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	2115      	movs	r1, #21
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fbfb 	bl	8002ff8 <WrByte>
 8002802:	4603      	mov	r3, r0
 8002804:	461a      	mov	r2, r3
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	4313      	orrs	r3, r2
 800280a:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2204      	movs	r2, #4
 8002810:	2109      	movs	r1, #9
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fbf0 	bl	8002ff8 <WrByte>
 8002818:	4603      	mov	r3, r0
 800281a:	461a      	mov	r2, r3
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	4313      	orrs	r3, r2
 8002820:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fbe4 	bl	8002ff8 <WrByte>
 8002830:	4603      	mov	r3, r0
 8002832:	461a      	mov	r2, r3
 8002834:	7dfb      	ldrb	r3, [r7, #23]
 8002836:	4313      	orrs	r3, r2
 8002838:	75fb      	strb	r3, [r7, #23]

	return status;
 800283a:	7dfb      	ldrb	r3, [r7, #23]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <vl53l5cx_check_data_ready>:

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	73fb      	strb	r3, [r7, #15]

	*p_isReady = 0;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8002860:	2304      	movs	r3, #4
 8002862:	2100      	movs	r1, #0
 8002864:	f000 fbf5 	bl	8003052 <RdMulti>
 8002868:	4603      	mov	r3, r0
 800286a:	461a      	mov	r2, r3
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	4313      	orrs	r3, r2
 8002870:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7c1b      	ldrb	r3, [r3, #16]
 800287c:	429a      	cmp	r2, r3
 800287e:	d020      	beq.n	80028c2 <vl53l5cx_check_data_ready+0x7e>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8002886:	2bff      	cmp	r3, #255	; 0xff
 8002888:	d01b      	beq.n	80028c2 <vl53l5cx_check_data_ready+0x7e>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8002890:	2b05      	cmp	r3, #5
 8002892:	d116      	bne.n	80028c2 <vl53l5cx_check_data_ready+0x7e>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 800289a:	f003 0305 	and.w	r3, r3, #5
 800289e:	2b05      	cmp	r3, #5
 80028a0:	d10f      	bne.n	80028c2 <vl53l5cx_check_data_ready+0x7e>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <vl53l5cx_check_data_ready+0x7e>
			)
	{
		*p_isReady = (uint8_t)1;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	741a      	strb	r2, [r3, #16]
 80028c0:	e002      	b.n	80028c8 <vl53l5cx_check_data_ready+0x84>
	}
	else
	{
		*p_isReady = 0;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	74fb      	strb	r3, [r7, #19]
        union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= RdMulti(&(p_dev->platform), 0x0,
 80028e2:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), 0x0,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	2100      	movs	r1, #0
 80028f0:	f000 fbaf 	bl	8003052 <RdMulti>
 80028f4:	4603      	mov	r3, r0
 80028f6:	461a      	mov	r2, r3
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	74fb      	strb	r3, [r7, #19]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	b29b      	uxth	r3, r3
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f000 fbb7 	bl	8003080 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8002912:	2310      	movs	r3, #16
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	e0d9      	b.n	8002acc <vl53l5cx_get_ranging_data+0x1f8>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d915      	bls.n	800295e <vl53l5cx_get_ranging_data+0x8a>
                    && (bh_ptr->type < (uint32_t)0xd))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b0c      	cmp	r3, #12
 800293e:	d80e      	bhi.n	800295e <vl53l5cx_get_ranging_data+0x8a>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8002954:	b29b      	uxth	r3, r3
 8002956:	fb03 f302 	mul.w	r3, r3, r2
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e005      	b.n	800296a <vl53l5cx_get_ranging_data+0x96>
		}
		else
		{
			msize = bh_ptr->size;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8002966:	b29b      	uxth	r3, r3
 8002968:	617b      	str	r3, [r7, #20]
		}

		switch(bh_ptr->idx){
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	885b      	ldrh	r3, [r3, #2]
 800296e:	f24d 427c 	movw	r2, #54396	; 0xd47c
 8002972:	4293      	cmp	r3, r2
 8002974:	f000 8086 	beq.w	8002a84 <vl53l5cx_get_ranging_data+0x1b0>
 8002978:	f24d 427c 	movw	r2, #54396	; 0xd47c
 800297c:	4293      	cmp	r3, r2
 800297e:	f300 809d 	bgt.w	8002abc <vl53l5cx_get_ranging_data+0x1e8>
 8002982:	f24d 423c 	movw	r2, #54332	; 0xd43c
 8002986:	4293      	cmp	r3, r2
 8002988:	d06e      	beq.n	8002a68 <vl53l5cx_get_ranging_data+0x194>
 800298a:	f24d 423c 	movw	r2, #54332	; 0xd43c
 800298e:	4293      	cmp	r3, r2
 8002990:	f300 8094 	bgt.w	8002abc <vl53l5cx_get_ranging_data+0x1e8>
 8002994:	f24d 323c 	movw	r2, #54076	; 0xd33c
 8002998:	4293      	cmp	r3, r2
 800299a:	d057      	beq.n	8002a4c <vl53l5cx_get_ranging_data+0x178>
 800299c:	f24d 323c 	movw	r2, #54076	; 0xd33c
 80029a0:	4293      	cmp	r3, r2
 80029a2:	f300 808b 	bgt.w	8002abc <vl53l5cx_get_ranging_data+0x1e8>
 80029a6:	f64c 72bc 	movw	r2, #53180	; 0xcfbc
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d040      	beq.n	8002a30 <vl53l5cx_get_ranging_data+0x15c>
 80029ae:	f64c 72bc 	movw	r2, #53180	; 0xcfbc
 80029b2:	4293      	cmp	r3, r2
 80029b4:	f300 8082 	bgt.w	8002abc <vl53l5cx_get_ranging_data+0x1e8>
 80029b8:	f64c 727c 	movw	r2, #53116	; 0xcf7c
 80029bc:	4293      	cmp	r3, r2
 80029be:	d029      	beq.n	8002a14 <vl53l5cx_get_ranging_data+0x140>
 80029c0:	f64c 727c 	movw	r2, #53116	; 0xcf7c
 80029c4:	4293      	cmp	r3, r2
 80029c6:	dc79      	bgt.n	8002abc <vl53l5cx_get_ranging_data+0x1e8>
 80029c8:	f64c 4250 	movw	r2, #52304	; 0xcc50
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d067      	beq.n	8002aa0 <vl53l5cx_get_ranging_data+0x1cc>
 80029d0:	f64c 4250 	movw	r2, #52304	; 0xcc50
 80029d4:	4293      	cmp	r3, r2
 80029d6:	dc71      	bgt.n	8002abc <vl53l5cx_get_ranging_data+0x1e8>
 80029d8:	f245 42b4 	movw	r2, #21684	; 0x54b4
 80029dc:	4293      	cmp	r3, r2
 80029de:	d004      	beq.n	80029ea <vl53l5cx_get_ranging_data+0x116>
 80029e0:	f245 42d0 	movw	r2, #21712	; 0x54d0
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d009      	beq.n	80029fc <vl53l5cx_get_ranging_data+0x128>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 80029e8:	e068      	b.n	8002abc <vl53l5cx_get_ranging_data+0x1e8>
				p_dev->temp_buffer[i + (uint32_t)(4 + 7)];
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	330b      	adds	r3, #11
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
				p_dev->streamcount =
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	741a      	strb	r2, [r3, #16]
				break;
 80029fa:	e060      	b.n	8002abe <vl53l5cx_get_ranging_data+0x1ea>
				(void)memcpy(p_results->ambient_per_spad,
 80029fc:	6838      	ldr	r0, [r7, #0]
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3304      	adds	r3, #4
 8002a02:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f003 fba1 	bl	8006154 <memcpy>
				break;
 8002a12:	e054      	b.n	8002abe <vl53l5cx_get_ranging_data+0x1ea>
				(void)memcpy(p_results->nb_target_detected,
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	f503 7080 	add.w	r0, r3, #256	; 0x100
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f003 fb93 	bl	8006154 <memcpy>
				break;
 8002a2e:	e046      	b.n	8002abe <vl53l5cx_get_ranging_data+0x1ea>
				(void)memcpy(p_results->signal_per_spad,
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	f503 70a0 	add.w	r0, r3, #320	; 0x140
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4619      	mov	r1, r3
 8002a46:	f003 fb85 	bl	8006154 <memcpy>
				break;
 8002a4a:	e038      	b.n	8002abe <vl53l5cx_get_ranging_data+0x1ea>
				(void)memcpy(p_results->distance_mm,
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	f503 7010 	add.w	r0, r3, #576	; 0x240
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3304      	adds	r3, #4
 8002a56:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4619      	mov	r1, r3
 8002a62:	f003 fb77 	bl	8006154 <memcpy>
				break;
 8002a66:	e02a      	b.n	8002abe <vl53l5cx_get_ranging_data+0x1ea>
				(void)memcpy(p_results->reflectance,
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3304      	adds	r3, #4
 8002a72:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f003 fb69 	bl	8006154 <memcpy>
				break;
 8002a82:	e01c      	b.n	8002abe <vl53l5cx_get_ranging_data+0x1ea>
				(void)memcpy(p_results->target_status,
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	f503 7040 	add.w	r0, r3, #768	; 0x300
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f003 fb5b 	bl	8006154 <memcpy>
				break;
 8002a9e:	e00e      	b.n	8002abe <vl53l5cx_get_ranging_data+0x1ea>
				(void)memcpy(&p_results->motion_indicator,
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	f503 7050 	add.w	r0, r3, #832	; 0x340
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f003 fb4d 	bl	8006154 <memcpy>
				break;
 8002aba:	e000      	b.n	8002abe <vl53l5cx_get_ranging_data+0x1ea>
				break;
 8002abc:	bf00      	nop
		}
		i += msize;
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	61fb      	str	r3, [r7, #28]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	695b      	ldr	r3, [r3, #20]
	for (i = (uint32_t)16; i 
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	f4ff af20 	bcc.w	8002918 <vl53l5cx_get_ranging_data+0x44>
	}

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	e00b      	b.n	8002af6 <vl53l5cx_get_ranging_data+0x222>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae6:	0ad9      	lsrs	r1, r3, #11
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	3301      	adds	r3, #1
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	2b3f      	cmp	r3, #63	; 0x3f
 8002afa:	d9f0      	bls.n	8002ade <vl53l5cx_get_ranging_data+0x20a>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
 8002b00:	e02d      	b.n	8002b5e <vl53l5cx_get_ranging_data+0x28a>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	f502 7290 	add.w	r2, r2, #288	; 0x120
 8002b0a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	da00      	bge.n	8002b14 <vl53l5cx_get_ranging_data+0x240>
 8002b12:	3303      	adds	r3, #3
 8002b14:	109b      	asrs	r3, r3, #2
 8002b16:	b219      	sxth	r1, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	f502 7290 	add.w	r2, r2, #288	; 0x120
 8002b20:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if(p_results->distance_mm[i] < 0)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	f502 7290 	add.w	r2, r2, #288	; 0x120
 8002b2c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	da06      	bge.n	8002b42 <vl53l5cx_get_ranging_data+0x26e>
		{
			p_results->distance_mm[i] = 0;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	f502 7290 	add.w	r2, r2, #288	; 0x120
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	69fa      	ldr	r2, [r7, #28]
 8002b46:	3250      	adds	r2, #80	; 0x50
 8002b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b4c:	0ad9      	lsrs	r1, r3, #11
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	3250      	adds	r2, #80	; 0x50
 8002b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	2b3f      	cmp	r3, #63	; 0x3f
 8002b62:	d9ce      	bls.n	8002b02 <vl53l5cx_get_ranging_data+0x22e>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	e01b      	b.n	8002ba2 <vl53l5cx_get_ranging_data+0x2ce>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d110      	bne.n	8002b9c <vl53l5cx_get_ranging_data+0x2c8>
			for(j = 0; j < (uint32_t)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	e00a      	b.n	8002b96 <vl53l5cx_get_ranging_data+0x2c2>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	4413      	add	r3, r2
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	4413      	add	r3, r2
 8002b8a:	22ff      	movs	r2, #255	; 0xff
 8002b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	3301      	adds	r3, #1
 8002b94:	61bb      	str	r3, [r7, #24]
			for(j = 0; j < (uint32_t)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f1      	beq.n	8002b80 <vl53l5cx_get_ranging_data+0x2ac>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	2b3f      	cmp	r3, #63	; 0x3f
 8002ba6:	d9e0      	bls.n	8002b6a <vl53l5cx_get_ranging_data+0x296>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]
 8002bac:	e012      	b.n	8002bd4 <vl53l5cx_get_ranging_data+0x300>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	33d2      	adds	r3, #210	; 0xd2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <vl53l5cx_get_ranging_data+0x310>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	0bda      	lsrs	r2, r3, #15
 8002bc2:	6839      	ldr	r1, [r7, #0]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	33d2      	adds	r3, #210	; 0xd2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)32; i++)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b1f      	cmp	r3, #31
 8002bd8:	d9e9      	bls.n	8002bae <vl53l5cx_get_ranging_data+0x2da>
	}
#endif

	return status;
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	80008001 	.word	0x80008001

08002be8 <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002bfc:	2308      	movs	r3, #8
 8002bfe:	f245 4250 	movw	r2, #21584	; 0x5450
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f88e 	bl	8002d24 <vl53l5cx_dci_read_data>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8002c1e:	fb12 f303 	smulbb	r3, r2, r3
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	701a      	strb	r2, [r3, #0]

	return status;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b088      	sub	sp, #32
 8002c36:	af04      	add	r7, sp, #16
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002c48:	2301      	movs	r3, #1
 8002c4a:	9302      	str	r3, [sp, #8]
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	1cfb      	adds	r3, r7, #3
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	2304      	movs	r3, #4
 8002c56:	f245 4258 	movw	r2, #21592	; 0x5458
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f98b 	bl	8002f76 <vl53l5cx_dci_replace_data>
 8002c60:	4603      	mov	r3, r0
 8002c62:	461a      	mov	r2, r3
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <vl53l5cx_set_ranging_mode>:
}

uint8_t vl53l5cx_set_ranging_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002c8e:	2308      	movs	r3, #8
 8002c90:	f64a 5230 	movw	r2, #44336	; 0xad30
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f845 	bl	8002d24 <vl53l5cx_dci_read_data>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d002      	beq.n	8002cb0 <vl53l5cx_set_ranging_mode+0x3c>
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d00b      	beq.n	8002cc6 <vl53l5cx_set_ranging_mode+0x52>
 8002cae:	e015      	b.n	8002cdc <vl53l5cx_set_ranging_mode+0x68>
	{
		case VL53L5CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2203      	movs	r2, #3
 8002cbc:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x00;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]
			break;
 8002cc4:	e00d      	b.n	8002ce2 <vl53l5cx_set_ranging_mode+0x6e>

		case VL53L5CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2203      	movs	r2, #3
 8002cca:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x01;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
			break;
 8002cda:	e002      	b.n	8002ce2 <vl53l5cx_set_ranging_mode+0x6e>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8002cdc:	237f      	movs	r3, #127	; 0x7f
 8002cde:	73fb      	strb	r3, [r7, #15]
			break;
 8002ce0:	bf00      	nop
	}

	status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002ce8:	2308      	movs	r3, #8
 8002cea:	f64a 5230 	movw	r2, #44336	; 0xad30
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f8a2 	bl	8002e38 <vl53l5cx_dci_write_data>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8002cfe:	f107 0108 	add.w	r1, r7, #8
 8002d02:	2304      	movs	r3, #4
 8002d04:	f64c 525c 	movw	r2, #52572	; 0xcd5c
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f895 	bl	8002e38 <vl53l5cx_dci_write_data>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_SINGLE_RANGE, 
                        (uint16_t)sizeof(single_range));

	return status;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08c      	sub	sp, #48	; 0x30
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8002d38:	887b      	ldrh	r3, [r7, #2]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8002d3e:	4a3d      	ldr	r2, [pc, #244]	; (8002e34 <vl53l5cx_dci_read_data+0x110>)
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 8002d4a:	887b      	ldrh	r3, [r7, #2]
 8002d4c:	f240 420c 	movw	r2, #1036	; 0x40c
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d903      	bls.n	8002d5c <vl53l5cx_dci_read_data+0x38>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8002d54:	23ff      	movs	r3, #255	; 0xff
 8002d56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002d5a:	e065      	b.n	8002e28 <vl53l5cx_dci_read_data+0x104>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8002d6a:	887b      	ldrh	r3, [r7, #2]
 8002d6c:	111b      	asrs	r3, r3, #4
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f107 0214 	add.w	r2, r7, #20
 8002d82:	230c      	movs	r3, #12
 8002d84:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 8002d88:	f000 f94c 	bl	8003024 <WrMulti>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	23ff      	movs	r3, #255	; 0xff
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002da6:	2201      	movs	r2, #1
 8002da8:	2104      	movs	r1, #4
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f7fe fc3f 	bl	800162e <_vl53l5cx_poll_for_answer>
 8002db0:	4603      	mov	r3, r0
 8002db2:	461a      	mov	r2, r3
 8002db4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8002dbe:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	f642 4104 	movw	r1, #11268	; 0x2c04
 8002dcc:	f000 f941 	bl	8003052 <RdMulti>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8002de4:	887b      	ldrh	r3, [r7, #2]
 8002de6:	330c      	adds	r3, #12
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	4619      	mov	r1, r3
 8002dec:	4610      	mov	r0, r2
 8002dee:	f000 f947 	bl	8003080 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002df2:	2300      	movs	r3, #0
 8002df4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002df6:	e011      	b.n	8002e1c <vl53l5cx_dci_read_data+0xf8>
			data[i] = p_dev->temp_buffer[i + 4];
 8002df8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002dfc:	1d1a      	adds	r2, r3, #4
 8002dfe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	440b      	add	r3, r1
 8002e06:	68f9      	ldr	r1, [r7, #12]
 8002e08:	440a      	add	r2, r1
 8002e0a:	f892 2510 	ldrb.w	r2, [r2, #1296]	; 0x510
 8002e0e:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002e10:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e20:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002e24:	429a      	cmp	r2, r3
 8002e26:	dbe7      	blt.n	8002df8 <vl53l5cx_dci_read_data+0xd4>
		}
	}

	return status;
 8002e28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3728      	adds	r7, #40	; 0x28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	0800759c 	.word	0x0800759c

08002e38 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08c      	sub	sp, #48	; 0x30
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002e50:	2300      	movs	r3, #0
 8002e52:	753b      	strb	r3, [r7, #20]
 8002e54:	2300      	movs	r3, #0
 8002e56:	757b      	strb	r3, [r7, #21]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	75bb      	strb	r3, [r7, #22]
 8002e5c:	230f      	movs	r3, #15
 8002e5e:	75fb      	strb	r3, [r7, #23]
 8002e60:	2305      	movs	r3, #5
 8002e62:	763b      	strb	r3, [r7, #24]
 8002e64:	2301      	movs	r3, #1
 8002e66:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8002e68:	887b      	ldrh	r3, [r7, #2]
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	121b      	asrs	r3, r3, #8
 8002e6e:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002e70:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8002e72:	887b      	ldrh	r3, [r7, #2]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	3308      	adds	r3, #8
 8002e78:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002e7a:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 8002e7c:	887b      	ldrh	r3, [r7, #2]
 8002e7e:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 8002e82:	3334      	adds	r3, #52	; 0x34
 8002e84:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8002e86:	887b      	ldrh	r3, [r7, #2]
 8002e88:	f240 420c 	movw	r2, #1036	; 0x40c
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d903      	bls.n	8002e98 <vl53l5cx_dci_write_data+0x60>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 8002e90:	23ff      	movs	r3, #255	; 0xff
 8002e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e96:	e068      	b.n	8002f6a <vl53l5cx_dci_write_data+0x132>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	0a1b      	lsrs	r3, r3, #8
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	111b      	asrs	r3, r3, #4
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8002eae:	887b      	ldrh	r3, [r7, #2]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8002eb8:	887b      	ldrh	r3, [r7, #2]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	68b8      	ldr	r0, [r7, #8]
 8002ebe:	f000 f8df 	bl	8003080 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8002ec2:	887b      	ldrh	r3, [r7, #2]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002eca:	e012      	b.n	8002ef2 <vl53l5cx_dci_write_data+0xba>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8002ecc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	441a      	add	r2, r3
 8002ed4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002ed8:	3304      	adds	r3, #4
 8002eda:	7811      	ldrb	r1, [r2, #0]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	460a      	mov	r2, r1
 8002ee2:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8002ee6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002ef2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	dae8      	bge.n	8002ecc <vl53l5cx_dci_write_data+0x94>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8002f04:	887b      	ldrh	r3, [r7, #2]
 8002f06:	3304      	adds	r3, #4
 8002f08:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	461a      	mov	r2, r3
 8002f12:	f107 0314 	add.w	r3, r7, #20
 8002f16:	cb03      	ldmia	r3!, {r0, r1}
 8002f18:	6010      	str	r0, [r2, #0]
 8002f1a:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8002f1c:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8002f24:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 8002f26:	330c      	adds	r3, #12
 8002f28:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8002f2a:	f000 f87b 	bl	8003024 <WrMulti>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	461a      	mov	r2, r3
 8002f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	23ff      	movs	r3, #255	; 0xff
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002f48:	2201      	movs	r2, #1
 8002f4a:	2104      	movs	r1, #4
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f7fe fb6e 	bl	800162e <_vl53l5cx_poll_for_answer>
 8002f52:	4603      	mov	r3, r0
 8002f54:	461a      	mov	r2, r3
 8002f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8002f60:	887b      	ldrh	r3, [r7, #2]
 8002f62:	4619      	mov	r1, r3
 8002f64:	68b8      	ldr	r0, [r7, #8]
 8002f66:	f000 f88b 	bl	8003080 <SwapBuffer>
	}

	return status;
 8002f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3728      	adds	r7, #40	; 0x28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 8002f88:	887b      	ldrh	r3, [r7, #2]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f7ff fec8 	bl	8002d24 <vl53l5cx_dci_read_data>
 8002f94:	4603      	mov	r3, r0
 8002f96:	461a      	mov	r2, r3
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8002f9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fa6:	6a39      	ldr	r1, [r7, #32]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f003 f8d3 	bl	8006154 <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 8002fae:	887b      	ldrh	r3, [r7, #2]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f7ff ff3f 	bl	8002e38 <vl53l5cx_dci_write_data>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	7dfb      	ldrb	r3, [r7, #23]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	75fb      	strb	r3, [r7, #23]

	return status;
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <RdByte>:

uint8_t RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8002fce:	b590      	push	{r4, r7, lr}
 8002fd0:	b085      	sub	sp, #20
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689c      	ldr	r4, [r3, #8]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8818      	ldrh	r0, [r3, #0]
 8002fe4:	8979      	ldrh	r1, [r7, #10]
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	47a0      	blx	r4
 8002fec:	4603      	mov	r3, r0
 8002fee:	b2db      	uxtb	r3, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd90      	pop	{r4, r7, pc}

08002ff8 <WrByte>:

uint8_t WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8002ff8:	b590      	push	{r4, r7, lr}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	807b      	strh	r3, [r7, #2]
 8003004:	4613      	mov	r3, r2
 8003006:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685c      	ldr	r4, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8818      	ldrh	r0, [r3, #0]
 8003010:	1c7a      	adds	r2, r7, #1
 8003012:	8879      	ldrh	r1, [r7, #2]
 8003014:	2301      	movs	r3, #1
 8003016:	47a0      	blx	r4
 8003018:	4603      	mov	r3, r0
 800301a:	b2db      	uxtb	r3, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}

08003024 <WrMulti>:
uint8_t WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	460b      	mov	r3, r1
 8003032:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685c      	ldr	r4, [r3, #4]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8818      	ldrh	r0, [r3, #0]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	8979      	ldrh	r1, [r7, #10]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	47a0      	blx	r4
 8003046:	4603      	mov	r3, r0
 8003048:	b2db      	uxtb	r3, r3
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	bd90      	pop	{r4, r7, pc}

08003052 <RdMulti>:
uint8_t RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8003052:	b590      	push	{r4, r7, lr}
 8003054:	b085      	sub	sp, #20
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	460b      	mov	r3, r1
 8003060:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	689c      	ldr	r4, [r3, #8]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8818      	ldrh	r0, [r3, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	8979      	ldrh	r1, [r7, #10]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	47a0      	blx	r4
 8003074:	4603      	mov	r3, r0
 8003076:	b2db      	uxtb	r3, r3
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bd90      	pop	{r4, r7, pc}

08003080 <SwapBuffer>:

void SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;

  /* Example of possible implementation using <string.h> */
  for(i = 0; i < size; i = i + 4)
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e021      	b.n	80030d6 <SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3301      	adds	r3, #1
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	440b      	add	r3, r1
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3302      	adds	r3, #2
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	440b      	add	r3, r1
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	3203      	adds	r2, #3
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	440a      	add	r2, r1
 80030c0:	7812      	ldrb	r2, [r2, #0]
 80030c2:	4313      	orrs	r3, r2
    tmp = (
 80030c4:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3304      	adds	r3, #4
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	887b      	ldrh	r3, [r7, #2]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d3d9      	bcc.n	8003092 <SwapBuffer+0x12>
  }
}
 80030de:	bf00      	nop
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <WaitMs>:

uint8_t WaitMs(
		VL53L5CX_Platform *p_platform,
		uint32_t TimeMs)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	4798      	blx	r3
 80030fc:	4603      	mov	r3, r0
 80030fe:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 8003100:	bf00      	nop
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	4798      	blx	r3
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d8f5      	bhi.n	8003102 <WaitMs+0x16>

  return 0;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003124:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <HAL_Init+0x40>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0d      	ldr	r2, [pc, #52]	; (8003160 <HAL_Init+0x40>)
 800312a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800312e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_Init+0x40>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <HAL_Init+0x40>)
 8003136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800313a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800313c:	4b08      	ldr	r3, [pc, #32]	; (8003160 <HAL_Init+0x40>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a07      	ldr	r2, [pc, #28]	; (8003160 <HAL_Init+0x40>)
 8003142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003148:	2003      	movs	r0, #3
 800314a:	f000 f931 	bl	80033b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800314e:	2000      	movs	r0, #0
 8003150:	f000 f808 	bl	8003164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003154:	f7fd fee8 	bl	8000f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023c00 	.word	0x40023c00

08003164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800316c:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <HAL_InitTick+0x54>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_InitTick+0x58>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	4619      	mov	r1, r3
 8003176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800317a:	fbb3 f3f1 	udiv	r3, r3, r1
 800317e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f93b 	bl	80033fe <HAL_SYSTICK_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e00e      	b.n	80031b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b0f      	cmp	r3, #15
 8003196:	d80a      	bhi.n	80031ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003198:	2200      	movs	r2, #0
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	f04f 30ff 	mov.w	r0, #4294967295
 80031a0:	f000 f911 	bl	80033c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031a4:	4a06      	ldr	r2, [pc, #24]	; (80031c0 <HAL_InitTick+0x5c>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000000 	.word	0x20000000
 80031bc:	20000008 	.word	0x20000008
 80031c0:	20000004 	.word	0x20000004

080031c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_IncTick+0x20>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_IncTick+0x24>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <HAL_IncTick+0x24>)
 80031d6:	6013      	str	r3, [r2, #0]
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000008 	.word	0x20000008
 80031e8:	20000208 	.word	0x20000208

080031ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return uwTick;
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <HAL_GetTick+0x14>)
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000208 	.word	0x20000208

08003204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800320c:	f7ff ffee 	bl	80031ec <HAL_GetTick>
 8003210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d005      	beq.n	800322a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_Delay+0x44>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800322a:	bf00      	nop
 800322c:	f7ff ffde 	bl	80031ec <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	429a      	cmp	r2, r3
 800323a:	d8f7      	bhi.n	800322c <HAL_Delay+0x28>
  {
  }
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000008 	.word	0x20000008

0800324c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003268:	4013      	ands	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327e:	4a04      	ldr	r2, [pc, #16]	; (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	60d3      	str	r3, [r2, #12]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003298:	4b04      	ldr	r3, [pc, #16]	; (80032ac <__NVIC_GetPriorityGrouping+0x18>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	0a1b      	lsrs	r3, r3, #8
 800329e:	f003 0307 	and.w	r3, r3, #7
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	6039      	str	r1, [r7, #0]
 80032ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	db0a      	blt.n	80032da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	490c      	ldr	r1, [pc, #48]	; (80032fc <__NVIC_SetPriority+0x4c>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	0112      	lsls	r2, r2, #4
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	440b      	add	r3, r1
 80032d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d8:	e00a      	b.n	80032f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	4908      	ldr	r1, [pc, #32]	; (8003300 <__NVIC_SetPriority+0x50>)
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	3b04      	subs	r3, #4
 80032e8:	0112      	lsls	r2, r2, #4
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	440b      	add	r3, r1
 80032ee:	761a      	strb	r2, [r3, #24]
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000e100 	.word	0xe000e100
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f1c3 0307 	rsb	r3, r3, #7
 800331e:	2b04      	cmp	r3, #4
 8003320:	bf28      	it	cs
 8003322:	2304      	movcs	r3, #4
 8003324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3304      	adds	r3, #4
 800332a:	2b06      	cmp	r3, #6
 800332c:	d902      	bls.n	8003334 <NVIC_EncodePriority+0x30>
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3b03      	subs	r3, #3
 8003332:	e000      	b.n	8003336 <NVIC_EncodePriority+0x32>
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003338:	f04f 32ff 	mov.w	r2, #4294967295
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43da      	mvns	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	401a      	ands	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800334c:	f04f 31ff 	mov.w	r1, #4294967295
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	fa01 f303 	lsl.w	r3, r1, r3
 8003356:	43d9      	mvns	r1, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800335c:	4313      	orrs	r3, r2
         );
}
 800335e:	4618      	mov	r0, r3
 8003360:	3724      	adds	r7, #36	; 0x24
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3b01      	subs	r3, #1
 8003378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800337c:	d301      	bcc.n	8003382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800337e:	2301      	movs	r3, #1
 8003380:	e00f      	b.n	80033a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003382:	4a0a      	ldr	r2, [pc, #40]	; (80033ac <SysTick_Config+0x40>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3b01      	subs	r3, #1
 8003388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800338a:	210f      	movs	r1, #15
 800338c:	f04f 30ff 	mov.w	r0, #4294967295
 8003390:	f7ff ff8e 	bl	80032b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <SysTick_Config+0x40>)
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800339a:	4b04      	ldr	r3, [pc, #16]	; (80033ac <SysTick_Config+0x40>)
 800339c:	2207      	movs	r2, #7
 800339e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	e000e010 	.word	0xe000e010

080033b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff ff47 	bl	800324c <__NVIC_SetPriorityGrouping>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b086      	sub	sp, #24
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	4603      	mov	r3, r0
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033d8:	f7ff ff5c 	bl	8003294 <__NVIC_GetPriorityGrouping>
 80033dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	6978      	ldr	r0, [r7, #20]
 80033e4:	f7ff ff8e 	bl	8003304 <NVIC_EncodePriority>
 80033e8:	4602      	mov	r2, r0
 80033ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff5d 	bl	80032b0 <__NVIC_SetPriority>
}
 80033f6:	bf00      	nop
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff ffb0 	bl	800336c <SysTick_Config>
 800340c:	4603      	mov	r3, r0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800342a:	2300      	movs	r3, #0
 800342c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	e159      	b.n	80036e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003434:	2201      	movs	r2, #1
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4013      	ands	r3, r2
 8003446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	429a      	cmp	r2, r3
 800344e:	f040 8148 	bne.w	80036e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d005      	beq.n	800346a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003466:	2b02      	cmp	r3, #2
 8003468:	d130      	bne.n	80034cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	2203      	movs	r2, #3
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4013      	ands	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a0:	2201      	movs	r2, #1
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 0201 	and.w	r2, r3, #1
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d017      	beq.n	8003508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	2203      	movs	r2, #3
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d123      	bne.n	800355c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	08da      	lsrs	r2, r3, #3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3208      	adds	r2, #8
 800351c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	220f      	movs	r2, #15
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	08da      	lsrs	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3208      	adds	r2, #8
 8003556:	69b9      	ldr	r1, [r7, #24]
 8003558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	2203      	movs	r2, #3
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0203 	and.w	r2, r3, #3
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80a2 	beq.w	80036e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	4b57      	ldr	r3, [pc, #348]	; (8003700 <HAL_GPIO_Init+0x2e8>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	4a56      	ldr	r2, [pc, #344]	; (8003700 <HAL_GPIO_Init+0x2e8>)
 80035a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ac:	6453      	str	r3, [r2, #68]	; 0x44
 80035ae:	4b54      	ldr	r3, [pc, #336]	; (8003700 <HAL_GPIO_Init+0x2e8>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035ba:	4a52      	ldr	r2, [pc, #328]	; (8003704 <HAL_GPIO_Init+0x2ec>)
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	089b      	lsrs	r3, r3, #2
 80035c0:	3302      	adds	r3, #2
 80035c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	220f      	movs	r2, #15
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a49      	ldr	r2, [pc, #292]	; (8003708 <HAL_GPIO_Init+0x2f0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d019      	beq.n	800361a <HAL_GPIO_Init+0x202>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a48      	ldr	r2, [pc, #288]	; (800370c <HAL_GPIO_Init+0x2f4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_GPIO_Init+0x1fe>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a47      	ldr	r2, [pc, #284]	; (8003710 <HAL_GPIO_Init+0x2f8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00d      	beq.n	8003612 <HAL_GPIO_Init+0x1fa>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a46      	ldr	r2, [pc, #280]	; (8003714 <HAL_GPIO_Init+0x2fc>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <HAL_GPIO_Init+0x1f6>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a45      	ldr	r2, [pc, #276]	; (8003718 <HAL_GPIO_Init+0x300>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_GPIO_Init+0x1f2>
 8003606:	2304      	movs	r3, #4
 8003608:	e008      	b.n	800361c <HAL_GPIO_Init+0x204>
 800360a:	2307      	movs	r3, #7
 800360c:	e006      	b.n	800361c <HAL_GPIO_Init+0x204>
 800360e:	2303      	movs	r3, #3
 8003610:	e004      	b.n	800361c <HAL_GPIO_Init+0x204>
 8003612:	2302      	movs	r3, #2
 8003614:	e002      	b.n	800361c <HAL_GPIO_Init+0x204>
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_GPIO_Init+0x204>
 800361a:	2300      	movs	r3, #0
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	f002 0203 	and.w	r2, r2, #3
 8003622:	0092      	lsls	r2, r2, #2
 8003624:	4093      	lsls	r3, r2
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800362c:	4935      	ldr	r1, [pc, #212]	; (8003704 <HAL_GPIO_Init+0x2ec>)
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	089b      	lsrs	r3, r3, #2
 8003632:	3302      	adds	r3, #2
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800363a:	4b38      	ldr	r3, [pc, #224]	; (800371c <HAL_GPIO_Init+0x304>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800365e:	4a2f      	ldr	r2, [pc, #188]	; (800371c <HAL_GPIO_Init+0x304>)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003664:	4b2d      	ldr	r3, [pc, #180]	; (800371c <HAL_GPIO_Init+0x304>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003688:	4a24      	ldr	r2, [pc, #144]	; (800371c <HAL_GPIO_Init+0x304>)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800368e:	4b23      	ldr	r3, [pc, #140]	; (800371c <HAL_GPIO_Init+0x304>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	43db      	mvns	r3, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4013      	ands	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036b2:	4a1a      	ldr	r2, [pc, #104]	; (800371c <HAL_GPIO_Init+0x304>)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036b8:	4b18      	ldr	r3, [pc, #96]	; (800371c <HAL_GPIO_Init+0x304>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036dc:	4a0f      	ldr	r2, [pc, #60]	; (800371c <HAL_GPIO_Init+0x304>)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3301      	adds	r3, #1
 80036e6:	61fb      	str	r3, [r7, #28]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	2b0f      	cmp	r3, #15
 80036ec:	f67f aea2 	bls.w	8003434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036f0:	bf00      	nop
 80036f2:	bf00      	nop
 80036f4:	3724      	adds	r7, #36	; 0x24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800
 8003704:	40013800 	.word	0x40013800
 8003708:	40020000 	.word	0x40020000
 800370c:	40020400 	.word	0x40020400
 8003710:	40020800 	.word	0x40020800
 8003714:	40020c00 	.word	0x40020c00
 8003718:	40021000 	.word	0x40021000
 800371c:	40013c00 	.word	0x40013c00

08003720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
 800372c:	4613      	mov	r3, r2
 800372e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003730:	787b      	ldrb	r3, [r7, #1]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003736:	887a      	ldrh	r2, [r7, #2]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800373c:	e003      	b.n	8003746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800373e:	887b      	ldrh	r3, [r7, #2]
 8003740:	041a      	lsls	r2, r3, #16
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	619a      	str	r2, [r3, #24]
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e12b      	b.n	80039be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f92e 	bl	80039dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2224      	movs	r2, #36	; 0x24
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0201 	bic.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037b8:	f001 fbfc 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 80037bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4a81      	ldr	r2, [pc, #516]	; (80039c8 <HAL_I2C_Init+0x274>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d807      	bhi.n	80037d8 <HAL_I2C_Init+0x84>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a80      	ldr	r2, [pc, #512]	; (80039cc <HAL_I2C_Init+0x278>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	bf94      	ite	ls
 80037d0:	2301      	movls	r3, #1
 80037d2:	2300      	movhi	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	e006      	b.n	80037e6 <HAL_I2C_Init+0x92>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a7d      	ldr	r2, [pc, #500]	; (80039d0 <HAL_I2C_Init+0x27c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	bf94      	ite	ls
 80037e0:	2301      	movls	r3, #1
 80037e2:	2300      	movhi	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e0e7      	b.n	80039be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4a78      	ldr	r2, [pc, #480]	; (80039d4 <HAL_I2C_Init+0x280>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	0c9b      	lsrs	r3, r3, #18
 80037f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4a6a      	ldr	r2, [pc, #424]	; (80039c8 <HAL_I2C_Init+0x274>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d802      	bhi.n	8003828 <HAL_I2C_Init+0xd4>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	3301      	adds	r3, #1
 8003826:	e009      	b.n	800383c <HAL_I2C_Init+0xe8>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800382e:	fb02 f303 	mul.w	r3, r2, r3
 8003832:	4a69      	ldr	r2, [pc, #420]	; (80039d8 <HAL_I2C_Init+0x284>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	099b      	lsrs	r3, r3, #6
 800383a:	3301      	adds	r3, #1
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	430b      	orrs	r3, r1
 8003842:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800384e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	495c      	ldr	r1, [pc, #368]	; (80039c8 <HAL_I2C_Init+0x274>)
 8003858:	428b      	cmp	r3, r1
 800385a:	d819      	bhi.n	8003890 <HAL_I2C_Init+0x13c>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1e59      	subs	r1, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	fbb1 f3f3 	udiv	r3, r1, r3
 800386a:	1c59      	adds	r1, r3, #1
 800386c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003870:	400b      	ands	r3, r1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_I2C_Init+0x138>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1e59      	subs	r1, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	fbb1 f3f3 	udiv	r3, r1, r3
 8003884:	3301      	adds	r3, #1
 8003886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388a:	e051      	b.n	8003930 <HAL_I2C_Init+0x1dc>
 800388c:	2304      	movs	r3, #4
 800388e:	e04f      	b.n	8003930 <HAL_I2C_Init+0x1dc>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d111      	bne.n	80038bc <HAL_I2C_Init+0x168>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1e58      	subs	r0, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	440b      	add	r3, r1
 80038a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038aa:	3301      	adds	r3, #1
 80038ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf0c      	ite	eq
 80038b4:	2301      	moveq	r3, #1
 80038b6:	2300      	movne	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	e012      	b.n	80038e2 <HAL_I2C_Init+0x18e>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1e58      	subs	r0, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	0099      	lsls	r1, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d2:	3301      	adds	r3, #1
 80038d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d8:	2b00      	cmp	r3, #0
 80038da:	bf0c      	ite	eq
 80038dc:	2301      	moveq	r3, #1
 80038de:	2300      	movne	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_I2C_Init+0x196>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e022      	b.n	8003930 <HAL_I2C_Init+0x1dc>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10e      	bne.n	8003910 <HAL_I2C_Init+0x1bc>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1e58      	subs	r0, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6859      	ldr	r1, [r3, #4]
 80038fa:	460b      	mov	r3, r1
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	440b      	add	r3, r1
 8003900:	fbb0 f3f3 	udiv	r3, r0, r3
 8003904:	3301      	adds	r3, #1
 8003906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800390e:	e00f      	b.n	8003930 <HAL_I2C_Init+0x1dc>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1e58      	subs	r0, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	0099      	lsls	r1, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	fbb0 f3f3 	udiv	r3, r0, r3
 8003926:	3301      	adds	r3, #1
 8003928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	6809      	ldr	r1, [r1, #0]
 8003934:	4313      	orrs	r3, r2
 8003936:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69da      	ldr	r2, [r3, #28]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800395e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6911      	ldr	r1, [r2, #16]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68d2      	ldr	r2, [r2, #12]
 800396a:	4311      	orrs	r1, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	430b      	orrs	r3, r1
 8003972:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	000186a0 	.word	0x000186a0
 80039cc:	001e847f 	.word	0x001e847f
 80039d0:	003d08ff 	.word	0x003d08ff
 80039d4:	431bde83 	.word	0x431bde83
 80039d8:	10624dd3 	.word	0x10624dd3

080039dc <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	4608      	mov	r0, r1
 80039fa:	4611      	mov	r1, r2
 80039fc:	461a      	mov	r2, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	817b      	strh	r3, [r7, #10]
 8003a02:	460b      	mov	r3, r1
 8003a04:	813b      	strh	r3, [r7, #8]
 8003a06:	4613      	mov	r3, r2
 8003a08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a0a:	f7ff fbef 	bl	80031ec <HAL_GetTick>
 8003a0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	f040 80d9 	bne.w	8003bd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2319      	movs	r3, #25
 8003a24:	2201      	movs	r2, #1
 8003a26:	496d      	ldr	r1, [pc, #436]	; (8003bdc <HAL_I2C_Mem_Write+0x1ec>)
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 fc99 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a34:	2302      	movs	r3, #2
 8003a36:	e0cc      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_I2C_Mem_Write+0x56>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e0c5      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d007      	beq.n	8003a6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2221      	movs	r2, #33	; 0x21
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2240      	movs	r2, #64	; 0x40
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a3a      	ldr	r2, [r7, #32]
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4a4d      	ldr	r2, [pc, #308]	; (8003be0 <HAL_I2C_Mem_Write+0x1f0>)
 8003aac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aae:	88f8      	ldrh	r0, [r7, #6]
 8003ab0:	893a      	ldrh	r2, [r7, #8]
 8003ab2:	8979      	ldrh	r1, [r7, #10]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	4603      	mov	r3, r0
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fad0 	bl	8004064 <I2C_RequestMemoryWrite>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d052      	beq.n	8003b70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e081      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fd1a 	bl	800450c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00d      	beq.n	8003afa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d107      	bne.n	8003af6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e06b      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	781a      	ldrb	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d11b      	bne.n	8003b70 <HAL_I2C_Mem_Write+0x180>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d017      	beq.n	8003b70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	781a      	ldrb	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1aa      	bne.n	8003ace <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fd06 	bl	800458e <I2C_WaitOnBTFFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00d      	beq.n	8003ba4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d107      	bne.n	8003ba0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e016      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	00100002 	.word	0x00100002
 8003be0:	ffff0000 	.word	0xffff0000

08003be4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08c      	sub	sp, #48	; 0x30
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	4608      	mov	r0, r1
 8003bee:	4611      	mov	r1, r2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	817b      	strh	r3, [r7, #10]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	813b      	strh	r3, [r7, #8]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bfe:	f7ff faf5 	bl	80031ec <HAL_GetTick>
 8003c02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	f040 8208 	bne.w	8004022 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	2319      	movs	r3, #25
 8003c18:	2201      	movs	r2, #1
 8003c1a:	497b      	ldr	r1, [pc, #492]	; (8003e08 <HAL_I2C_Mem_Read+0x224>)
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 fb9f 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e1fb      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_I2C_Mem_Read+0x56>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e1f4      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d007      	beq.n	8003c60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2222      	movs	r2, #34	; 0x22
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2240      	movs	r2, #64	; 0x40
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4a5b      	ldr	r2, [pc, #364]	; (8003e0c <HAL_I2C_Mem_Read+0x228>)
 8003ca0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ca2:	88f8      	ldrh	r0, [r7, #6]
 8003ca4:	893a      	ldrh	r2, [r7, #8]
 8003ca6:	8979      	ldrh	r1, [r7, #10]
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fa6c 	bl	8004190 <I2C_RequestMemoryRead>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e1b0      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d113      	bne.n	8003cf2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	623b      	str	r3, [r7, #32]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	623b      	str	r3, [r7, #32]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e184      	b.n	8003ffc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d11b      	bne.n	8003d32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e164      	b.n	8003ffc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d11b      	bne.n	8003d72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	e144      	b.n	8003ffc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d88:	e138      	b.n	8003ffc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	f200 80f1 	bhi.w	8003f76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d123      	bne.n	8003de4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fc35 	bl	8004610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e139      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003de2:	e10b      	b.n	8003ffc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d14e      	bne.n	8003e8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	2200      	movs	r2, #0
 8003df4:	4906      	ldr	r1, [pc, #24]	; (8003e10 <HAL_I2C_Mem_Read+0x22c>)
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fab2 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e10e      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
 8003e06:	bf00      	nop
 8003e08:	00100002 	.word	0x00100002
 8003e0c:	ffff0000 	.word	0xffff0000
 8003e10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e88:	e0b8      	b.n	8003ffc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	2200      	movs	r2, #0
 8003e92:	4966      	ldr	r1, [pc, #408]	; (800402c <HAL_I2C_Mem_Read+0x448>)
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fa63 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0bf      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	2200      	movs	r2, #0
 8003eee:	494f      	ldr	r1, [pc, #316]	; (800402c <HAL_I2C_Mem_Read+0x448>)
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fa35 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e091      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f74:	e042      	b.n	8003ffc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fb48 	bl	8004610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e04c      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d118      	bne.n	8003ffc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	2b00      	cmp	r3, #0
 8004002:	f47f aec2 	bne.w	8003d8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	e000      	b.n	8004024 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004022:	2302      	movs	r3, #2
  }
}
 8004024:	4618      	mov	r0, r3
 8004026:	3728      	adds	r7, #40	; 0x28
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	00010004 	.word	0x00010004

08004030 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403e:	b2db      	uxtb	r3, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	461a      	mov	r2, r3
 8004072:	4603      	mov	r3, r0
 8004074:	817b      	strh	r3, [r7, #10]
 8004076:	460b      	mov	r3, r1
 8004078:	813b      	strh	r3, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800408c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	2200      	movs	r2, #0
 8004096:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f960 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b4:	d103      	bne.n	80040be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e05f      	b.n	8004182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040c2:	897b      	ldrh	r3, [r7, #10]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	492d      	ldr	r1, [pc, #180]	; (800418c <I2C_RequestMemoryWrite+0x128>)
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f998 	bl	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e04c      	b.n	8004182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004100:	6a39      	ldr	r1, [r7, #32]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fa02 	bl	800450c <I2C_WaitOnTXEFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00d      	beq.n	800412a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	2b04      	cmp	r3, #4
 8004114:	d107      	bne.n	8004126 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004124:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e02b      	b.n	8004182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d105      	bne.n	800413c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004130:	893b      	ldrh	r3, [r7, #8]
 8004132:	b2da      	uxtb	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	611a      	str	r2, [r3, #16]
 800413a:	e021      	b.n	8004180 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800413c:	893b      	ldrh	r3, [r7, #8]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	b29b      	uxth	r3, r3
 8004142:	b2da      	uxtb	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800414a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414c:	6a39      	ldr	r1, [r7, #32]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f9dc 	bl	800450c <I2C_WaitOnTXEFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00d      	beq.n	8004176 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	2b04      	cmp	r3, #4
 8004160:	d107      	bne.n	8004172 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004170:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e005      	b.n	8004182 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004176:	893b      	ldrh	r3, [r7, #8]
 8004178:	b2da      	uxtb	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	00010002 	.word	0x00010002

08004190 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	4608      	mov	r0, r1
 800419a:	4611      	mov	r1, r2
 800419c:	461a      	mov	r2, r3
 800419e:	4603      	mov	r3, r0
 80041a0:	817b      	strh	r3, [r7, #10]
 80041a2:	460b      	mov	r3, r1
 80041a4:	813b      	strh	r3, [r7, #8]
 80041a6:	4613      	mov	r3, r2
 80041a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f8c2 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00d      	beq.n	80041fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f0:	d103      	bne.n	80041fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e0aa      	b.n	8004354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041fe:	897b      	ldrh	r3, [r7, #10]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800420c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	6a3a      	ldr	r2, [r7, #32]
 8004212:	4952      	ldr	r1, [pc, #328]	; (800435c <I2C_RequestMemoryRead+0x1cc>)
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f8fa 	bl	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e097      	b.n	8004354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800423a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423c:	6a39      	ldr	r1, [r7, #32]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f964 	bl	800450c <I2C_WaitOnTXEFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00d      	beq.n	8004266 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	2b04      	cmp	r3, #4
 8004250:	d107      	bne.n	8004262 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004260:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e076      	b.n	8004354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d105      	bne.n	8004278 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800426c:	893b      	ldrh	r3, [r7, #8]
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	611a      	str	r2, [r3, #16]
 8004276:	e021      	b.n	80042bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004278:	893b      	ldrh	r3, [r7, #8]
 800427a:	0a1b      	lsrs	r3, r3, #8
 800427c:	b29b      	uxth	r3, r3
 800427e:	b2da      	uxtb	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004288:	6a39      	ldr	r1, [r7, #32]
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f93e 	bl	800450c <I2C_WaitOnTXEFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00d      	beq.n	80042b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	2b04      	cmp	r3, #4
 800429c:	d107      	bne.n	80042ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e050      	b.n	8004354 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042b2:	893b      	ldrh	r3, [r7, #8]
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042be:	6a39      	ldr	r1, [r7, #32]
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f923 	bl	800450c <I2C_WaitOnTXEFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d107      	bne.n	80042e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e035      	b.n	8004354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	2200      	movs	r2, #0
 8004300:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 f82b 	bl	8004360 <I2C_WaitOnFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00d      	beq.n	800432c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431e:	d103      	bne.n	8004328 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004326:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e013      	b.n	8004354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800432c:	897b      	ldrh	r3, [r7, #10]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	6a3a      	ldr	r2, [r7, #32]
 8004340:	4906      	ldr	r1, [pc, #24]	; (800435c <I2C_RequestMemoryRead+0x1cc>)
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f863 	bl	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	00010002 	.word	0x00010002

08004360 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	4613      	mov	r3, r2
 800436e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004370:	e025      	b.n	80043be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004378:	d021      	beq.n	80043be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800437a:	f7fe ff37 	bl	80031ec <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d302      	bcc.n	8004390 <I2C_WaitOnFlagUntilTimeout+0x30>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d116      	bne.n	80043be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f043 0220 	orr.w	r2, r3, #32
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e023      	b.n	8004406 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	0c1b      	lsrs	r3, r3, #16
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d10d      	bne.n	80043e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	43da      	mvns	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4013      	ands	r3, r2
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	bf0c      	ite	eq
 80043da:	2301      	moveq	r3, #1
 80043dc:	2300      	movne	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	e00c      	b.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	43da      	mvns	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4013      	ands	r3, r2
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bf0c      	ite	eq
 80043f6:	2301      	moveq	r3, #1
 80043f8:	2300      	movne	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	429a      	cmp	r2, r3
 8004402:	d0b6      	beq.n	8004372 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800441c:	e051      	b.n	80044c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800442c:	d123      	bne.n	8004476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004446:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f043 0204 	orr.w	r2, r3, #4
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e046      	b.n	8004504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d021      	beq.n	80044c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447e:	f7fe feb5 	bl	80031ec <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d116      	bne.n	80044c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f043 0220 	orr.w	r2, r3, #32
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e020      	b.n	8004504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d10c      	bne.n	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	43da      	mvns	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4013      	ands	r3, r2
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bf14      	ite	ne
 80044de:	2301      	movne	r3, #1
 80044e0:	2300      	moveq	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	e00b      	b.n	80044fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	43da      	mvns	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf14      	ite	ne
 80044f8:	2301      	movne	r3, #1
 80044fa:	2300      	moveq	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d18d      	bne.n	800441e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004518:	e02d      	b.n	8004576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f8ce 	bl	80046bc <I2C_IsAcknowledgeFailed>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e02d      	b.n	8004586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004530:	d021      	beq.n	8004576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004532:	f7fe fe5b 	bl	80031ec <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	429a      	cmp	r2, r3
 8004540:	d302      	bcc.n	8004548 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d116      	bne.n	8004576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f043 0220 	orr.w	r2, r3, #32
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e007      	b.n	8004586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004580:	2b80      	cmp	r3, #128	; 0x80
 8004582:	d1ca      	bne.n	800451a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800459a:	e02d      	b.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f88d 	bl	80046bc <I2C_IsAcknowledgeFailed>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e02d      	b.n	8004608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b2:	d021      	beq.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b4:	f7fe fe1a 	bl	80031ec <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d302      	bcc.n	80045ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d116      	bne.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	f043 0220 	orr.w	r2, r3, #32
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e007      	b.n	8004608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b04      	cmp	r3, #4
 8004604:	d1ca      	bne.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800461c:	e042      	b.n	80046a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b10      	cmp	r3, #16
 800462a:	d119      	bne.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0210 	mvn.w	r2, #16
 8004634:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e029      	b.n	80046b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004660:	f7fe fdc4 	bl	80031ec <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	429a      	cmp	r2, r3
 800466e:	d302      	bcc.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d116      	bne.n	80046a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e007      	b.n	80046b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ae:	2b40      	cmp	r3, #64	; 0x40
 80046b0:	d1b5      	bne.n	800461e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d2:	d11b      	bne.n	800470c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	f043 0204 	orr.w	r2, r3, #4
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e264      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d075      	beq.n	8004826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800473a:	4ba3      	ldr	r3, [pc, #652]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b04      	cmp	r3, #4
 8004744:	d00c      	beq.n	8004760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004746:	4ba0      	ldr	r3, [pc, #640]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800474e:	2b08      	cmp	r3, #8
 8004750:	d112      	bne.n	8004778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004752:	4b9d      	ldr	r3, [pc, #628]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800475a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800475e:	d10b      	bne.n	8004778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004760:	4b99      	ldr	r3, [pc, #612]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d05b      	beq.n	8004824 <HAL_RCC_OscConfig+0x108>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d157      	bne.n	8004824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e23f      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004780:	d106      	bne.n	8004790 <HAL_RCC_OscConfig+0x74>
 8004782:	4b91      	ldr	r3, [pc, #580]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a90      	ldr	r2, [pc, #576]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e01d      	b.n	80047cc <HAL_RCC_OscConfig+0xb0>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004798:	d10c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x98>
 800479a:	4b8b      	ldr	r3, [pc, #556]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a8a      	ldr	r2, [pc, #552]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	4b88      	ldr	r3, [pc, #544]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a87      	ldr	r2, [pc, #540]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e00b      	b.n	80047cc <HAL_RCC_OscConfig+0xb0>
 80047b4:	4b84      	ldr	r3, [pc, #528]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a83      	ldr	r2, [pc, #524]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	4b81      	ldr	r3, [pc, #516]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a80      	ldr	r2, [pc, #512]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d013      	beq.n	80047fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fe fd0a 	bl	80031ec <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047dc:	f7fe fd06 	bl	80031ec <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	; 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e204      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ee:	4b76      	ldr	r3, [pc, #472]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0xc0>
 80047fa:	e014      	b.n	8004826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fc:	f7fe fcf6 	bl	80031ec <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004804:	f7fe fcf2 	bl	80031ec <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b64      	cmp	r3, #100	; 0x64
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e1f0      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004816:	4b6c      	ldr	r3, [pc, #432]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0xe8>
 8004822:	e000      	b.n	8004826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d063      	beq.n	80048fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004832:	4b65      	ldr	r3, [pc, #404]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 030c 	and.w	r3, r3, #12
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800483e:	4b62      	ldr	r3, [pc, #392]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004846:	2b08      	cmp	r3, #8
 8004848:	d11c      	bne.n	8004884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484a:	4b5f      	ldr	r3, [pc, #380]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d116      	bne.n	8004884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004856:	4b5c      	ldr	r3, [pc, #368]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_RCC_OscConfig+0x152>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d001      	beq.n	800486e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e1c4      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486e:	4b56      	ldr	r3, [pc, #344]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4952      	ldr	r1, [pc, #328]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004882:	e03a      	b.n	80048fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800488c:	4b4f      	ldr	r3, [pc, #316]	; (80049cc <HAL_RCC_OscConfig+0x2b0>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7fe fcab 	bl	80031ec <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800489a:	f7fe fca7 	bl	80031ec <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e1a5      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ac:	4b46      	ldr	r3, [pc, #280]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b8:	4b43      	ldr	r3, [pc, #268]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4940      	ldr	r1, [pc, #256]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]
 80048cc:	e015      	b.n	80048fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ce:	4b3f      	ldr	r3, [pc, #252]	; (80049cc <HAL_RCC_OscConfig+0x2b0>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fe fc8a 	bl	80031ec <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048dc:	f7fe fc86 	bl	80031ec <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e184      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ee:	4b36      	ldr	r3, [pc, #216]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d030      	beq.n	8004968 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d016      	beq.n	800493c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800490e:	4b30      	ldr	r3, [pc, #192]	; (80049d0 <HAL_RCC_OscConfig+0x2b4>)
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004914:	f7fe fc6a 	bl	80031ec <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800491c:	f7fe fc66 	bl	80031ec <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e164      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492e:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x200>
 800493a:	e015      	b.n	8004968 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800493c:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <HAL_RCC_OscConfig+0x2b4>)
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004942:	f7fe fc53 	bl	80031ec <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800494a:	f7fe fc4f 	bl	80031ec <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e14d      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800495c:	4b1a      	ldr	r3, [pc, #104]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800495e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f0      	bne.n	800494a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80a0 	beq.w	8004ab6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004976:	2300      	movs	r3, #0
 8004978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497a:	4b13      	ldr	r3, [pc, #76]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10f      	bne.n	80049a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004986:	2300      	movs	r3, #0
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	4a0e      	ldr	r2, [pc, #56]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004994:	6413      	str	r3, [r2, #64]	; 0x40
 8004996:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a2:	2301      	movs	r3, #1
 80049a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d121      	bne.n	80049f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049b2:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a07      	ldr	r2, [pc, #28]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 80049b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049be:	f7fe fc15 	bl	80031ec <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c4:	e011      	b.n	80049ea <HAL_RCC_OscConfig+0x2ce>
 80049c6:	bf00      	nop
 80049c8:	40023800 	.word	0x40023800
 80049cc:	42470000 	.word	0x42470000
 80049d0:	42470e80 	.word	0x42470e80
 80049d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d8:	f7fe fc08 	bl	80031ec <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e106      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ea:	4b85      	ldr	r3, [pc, #532]	; (8004c00 <HAL_RCC_OscConfig+0x4e4>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d106      	bne.n	8004a0c <HAL_RCC_OscConfig+0x2f0>
 80049fe:	4b81      	ldr	r3, [pc, #516]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	4a80      	ldr	r2, [pc, #512]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0a:	e01c      	b.n	8004a46 <HAL_RCC_OscConfig+0x32a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	d10c      	bne.n	8004a2e <HAL_RCC_OscConfig+0x312>
 8004a14:	4b7b      	ldr	r3, [pc, #492]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	4a7a      	ldr	r2, [pc, #488]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a1a:	f043 0304 	orr.w	r3, r3, #4
 8004a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a20:	4b78      	ldr	r3, [pc, #480]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	4a77      	ldr	r2, [pc, #476]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a26:	f043 0301 	orr.w	r3, r3, #1
 8004a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a2c:	e00b      	b.n	8004a46 <HAL_RCC_OscConfig+0x32a>
 8004a2e:	4b75      	ldr	r3, [pc, #468]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	4a74      	ldr	r2, [pc, #464]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3a:	4b72      	ldr	r3, [pc, #456]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	4a71      	ldr	r2, [pc, #452]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a40:	f023 0304 	bic.w	r3, r3, #4
 8004a44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d015      	beq.n	8004a7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4e:	f7fe fbcd 	bl	80031ec <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a54:	e00a      	b.n	8004a6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a56:	f7fe fbc9 	bl	80031ec <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e0c5      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a6c:	4b65      	ldr	r3, [pc, #404]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0ee      	beq.n	8004a56 <HAL_RCC_OscConfig+0x33a>
 8004a78:	e014      	b.n	8004aa4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a7a:	f7fe fbb7 	bl	80031ec <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a80:	e00a      	b.n	8004a98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a82:	f7fe fbb3 	bl	80031ec <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e0af      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a98:	4b5a      	ldr	r3, [pc, #360]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1ee      	bne.n	8004a82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d105      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aaa:	4b56      	ldr	r3, [pc, #344]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4a55      	ldr	r2, [pc, #340]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 809b 	beq.w	8004bf6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ac0:	4b50      	ldr	r3, [pc, #320]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 030c 	and.w	r3, r3, #12
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d05c      	beq.n	8004b86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d141      	bne.n	8004b58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad4:	4b4c      	ldr	r3, [pc, #304]	; (8004c08 <HAL_RCC_OscConfig+0x4ec>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ada:	f7fe fb87 	bl	80031ec <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae2:	f7fe fb83 	bl	80031ec <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e081      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af4:	4b43      	ldr	r3, [pc, #268]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f0      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	019b      	lsls	r3, r3, #6
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	085b      	lsrs	r3, r3, #1
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	041b      	lsls	r3, r3, #16
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	061b      	lsls	r3, r3, #24
 8004b24:	4937      	ldr	r1, [pc, #220]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b2a:	4b37      	ldr	r3, [pc, #220]	; (8004c08 <HAL_RCC_OscConfig+0x4ec>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fe fb5c 	bl	80031ec <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fe fb58 	bl	80031ec <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e056      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4a:	4b2e      	ldr	r3, [pc, #184]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0x41c>
 8004b56:	e04e      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b58:	4b2b      	ldr	r3, [pc, #172]	; (8004c08 <HAL_RCC_OscConfig+0x4ec>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fe fb45 	bl	80031ec <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b66:	f7fe fb41 	bl	80031ec <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e03f      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b78:	4b22      	ldr	r3, [pc, #136]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <HAL_RCC_OscConfig+0x44a>
 8004b84:	e037      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e032      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b92:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <HAL_RCC_OscConfig+0x4e8>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d028      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d121      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d11a      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bc8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d111      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd8:	085b      	lsrs	r3, r3, #1
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d107      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d001      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40007000 	.word	0x40007000
 8004c04:	40023800 	.word	0x40023800
 8004c08:	42470060 	.word	0x42470060

08004c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0cc      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c20:	4b68      	ldr	r3, [pc, #416]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d90c      	bls.n	8004c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2e:	4b65      	ldr	r3, [pc, #404]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b63      	ldr	r3, [pc, #396]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0b8      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d020      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c60:	4b59      	ldr	r3, [pc, #356]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4a58      	ldr	r2, [pc, #352]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c78:	4b53      	ldr	r3, [pc, #332]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a52      	ldr	r2, [pc, #328]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c84:	4b50      	ldr	r3, [pc, #320]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	494d      	ldr	r1, [pc, #308]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d044      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d107      	bne.n	8004cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004caa:	4b47      	ldr	r3, [pc, #284]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d119      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d003      	beq.n	8004cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cca:	4b3f      	ldr	r3, [pc, #252]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e06f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cda:	4b3b      	ldr	r3, [pc, #236]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e067      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cea:	4b37      	ldr	r3, [pc, #220]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f023 0203 	bic.w	r2, r3, #3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4934      	ldr	r1, [pc, #208]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cfc:	f7fe fa76 	bl	80031ec <HAL_GetTick>
 8004d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d02:	e00a      	b.n	8004d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d04:	f7fe fa72 	bl	80031ec <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e04f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1a:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 020c 	and.w	r2, r3, #12
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d1eb      	bne.n	8004d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d2c:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d20c      	bcs.n	8004d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3a:	4b22      	ldr	r3, [pc, #136]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e032      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d60:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4916      	ldr	r1, [pc, #88]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d7e:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	490e      	ldr	r1, [pc, #56]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d92:	f000 f821 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8004d96:	4602      	mov	r2, r0
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	490a      	ldr	r1, [pc, #40]	; (8004dcc <HAL_RCC_ClockConfig+0x1c0>)
 8004da4:	5ccb      	ldrb	r3, [r1, r3]
 8004da6:	fa22 f303 	lsr.w	r3, r2, r3
 8004daa:	4a09      	ldr	r2, [pc, #36]	; (8004dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe f9d6 	bl	8003164 <HAL_InitTick>

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40023c00 	.word	0x40023c00
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	080075a8 	.word	0x080075a8
 8004dd0:	20000000 	.word	0x20000000
 8004dd4:	20000004 	.word	0x20000004

08004dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	607b      	str	r3, [r7, #4]
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	2300      	movs	r3, #0
 8004dea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004df0:	4b67      	ldr	r3, [pc, #412]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 030c 	and.w	r3, r3, #12
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d00d      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x40>
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	f200 80bd 	bhi.w	8004f7c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_RCC_GetSysClockFreq+0x34>
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d003      	beq.n	8004e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e0a:	e0b7      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b61      	ldr	r3, [pc, #388]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e0e:	60bb      	str	r3, [r7, #8]
       break;
 8004e10:	e0b7      	b.n	8004f82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e12:	4b61      	ldr	r3, [pc, #388]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004e14:	60bb      	str	r3, [r7, #8]
      break;
 8004e16:	e0b4      	b.n	8004f82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e18:	4b5d      	ldr	r3, [pc, #372]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e22:	4b5b      	ldr	r3, [pc, #364]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d04d      	beq.n	8004eca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2e:	4b58      	ldr	r3, [pc, #352]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	099b      	lsrs	r3, r3, #6
 8004e34:	461a      	mov	r2, r3
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e3e:	f04f 0100 	mov.w	r1, #0
 8004e42:	ea02 0800 	and.w	r8, r2, r0
 8004e46:	ea03 0901 	and.w	r9, r3, r1
 8004e4a:	4640      	mov	r0, r8
 8004e4c:	4649      	mov	r1, r9
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	014b      	lsls	r3, r1, #5
 8004e58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e5c:	0142      	lsls	r2, r0, #5
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	ebb0 0008 	subs.w	r0, r0, r8
 8004e66:	eb61 0109 	sbc.w	r1, r1, r9
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	f04f 0300 	mov.w	r3, #0
 8004e72:	018b      	lsls	r3, r1, #6
 8004e74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e78:	0182      	lsls	r2, r0, #6
 8004e7a:	1a12      	subs	r2, r2, r0
 8004e7c:	eb63 0301 	sbc.w	r3, r3, r1
 8004e80:	f04f 0000 	mov.w	r0, #0
 8004e84:	f04f 0100 	mov.w	r1, #0
 8004e88:	00d9      	lsls	r1, r3, #3
 8004e8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e8e:	00d0      	lsls	r0, r2, #3
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	eb12 0208 	adds.w	r2, r2, r8
 8004e98:	eb43 0309 	adc.w	r3, r3, r9
 8004e9c:	f04f 0000 	mov.w	r0, #0
 8004ea0:	f04f 0100 	mov.w	r1, #0
 8004ea4:	0259      	lsls	r1, r3, #9
 8004ea6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004eaa:	0250      	lsls	r0, r2, #9
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	f7fb f9e0 	bl	8000280 <__aeabi_uldivmod>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	e04a      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eca:	4b31      	ldr	r3, [pc, #196]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	099b      	lsrs	r3, r3, #6
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004eda:	f04f 0100 	mov.w	r1, #0
 8004ede:	ea02 0400 	and.w	r4, r2, r0
 8004ee2:	ea03 0501 	and.w	r5, r3, r1
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	4629      	mov	r1, r5
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	014b      	lsls	r3, r1, #5
 8004ef4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ef8:	0142      	lsls	r2, r0, #5
 8004efa:	4610      	mov	r0, r2
 8004efc:	4619      	mov	r1, r3
 8004efe:	1b00      	subs	r0, r0, r4
 8004f00:	eb61 0105 	sbc.w	r1, r1, r5
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	018b      	lsls	r3, r1, #6
 8004f0e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f12:	0182      	lsls	r2, r0, #6
 8004f14:	1a12      	subs	r2, r2, r0
 8004f16:	eb63 0301 	sbc.w	r3, r3, r1
 8004f1a:	f04f 0000 	mov.w	r0, #0
 8004f1e:	f04f 0100 	mov.w	r1, #0
 8004f22:	00d9      	lsls	r1, r3, #3
 8004f24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f28:	00d0      	lsls	r0, r2, #3
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	1912      	adds	r2, r2, r4
 8004f30:	eb45 0303 	adc.w	r3, r5, r3
 8004f34:	f04f 0000 	mov.w	r0, #0
 8004f38:	f04f 0100 	mov.w	r1, #0
 8004f3c:	0299      	lsls	r1, r3, #10
 8004f3e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f42:	0290      	lsls	r0, r2, #10
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	f7fb f994 	bl	8000280 <__aeabi_uldivmod>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	0c1b      	lsrs	r3, r3, #16
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f78:	60bb      	str	r3, [r7, #8]
      break;
 8004f7a:	e002      	b.n	8004f82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f7e:	60bb      	str	r3, [r7, #8]
      break;
 8004f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f82:	68bb      	ldr	r3, [r7, #8]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f8e:	bf00      	nop
 8004f90:	40023800 	.word	0x40023800
 8004f94:	00f42400 	.word	0x00f42400
 8004f98:	007a1200 	.word	0x007a1200

08004f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa0:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20000000 	.word	0x20000000

08004fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fb8:	f7ff fff0 	bl	8004f9c <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	0a9b      	lsrs	r3, r3, #10
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4903      	ldr	r1, [pc, #12]	; (8004fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	080075b8 	.word	0x080075b8

08004fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fe0:	f7ff ffdc 	bl	8004f9c <HAL_RCC_GetHCLKFreq>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	0b5b      	lsrs	r3, r3, #13
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	4903      	ldr	r1, [pc, #12]	; (8005000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ff2:	5ccb      	ldrb	r3, [r1, r3]
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40023800 	.word	0x40023800
 8005000:	080075b8 	.word	0x080075b8

08005004 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e041      	b.n	800509a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fb ffa4 	bl	8000f78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f000 fa04 	bl	8005450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d109      	bne.n	80050c8 <HAL_TIM_PWM_Start+0x24>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	bf14      	ite	ne
 80050c0:	2301      	movne	r3, #1
 80050c2:	2300      	moveq	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	e022      	b.n	800510e <HAL_TIM_PWM_Start+0x6a>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d109      	bne.n	80050e2 <HAL_TIM_PWM_Start+0x3e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	bf14      	ite	ne
 80050da:	2301      	movne	r3, #1
 80050dc:	2300      	moveq	r3, #0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	e015      	b.n	800510e <HAL_TIM_PWM_Start+0x6a>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d109      	bne.n	80050fc <HAL_TIM_PWM_Start+0x58>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	bf14      	ite	ne
 80050f4:	2301      	movne	r3, #1
 80050f6:	2300      	moveq	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	e008      	b.n	800510e <HAL_TIM_PWM_Start+0x6a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	bf14      	ite	ne
 8005108:	2301      	movne	r3, #1
 800510a:	2300      	moveq	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e068      	b.n	80051e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d104      	bne.n	8005126 <HAL_TIM_PWM_Start+0x82>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005124:	e013      	b.n	800514e <HAL_TIM_PWM_Start+0xaa>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b04      	cmp	r3, #4
 800512a:	d104      	bne.n	8005136 <HAL_TIM_PWM_Start+0x92>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005134:	e00b      	b.n	800514e <HAL_TIM_PWM_Start+0xaa>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b08      	cmp	r3, #8
 800513a:	d104      	bne.n	8005146 <HAL_TIM_PWM_Start+0xa2>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005144:	e003      	b.n	800514e <HAL_TIM_PWM_Start+0xaa>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2201      	movs	r2, #1
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fb86 	bl	8005868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a23      	ldr	r2, [pc, #140]	; (80051f0 <HAL_TIM_PWM_Start+0x14c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d107      	bne.n	8005176 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005174:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1d      	ldr	r2, [pc, #116]	; (80051f0 <HAL_TIM_PWM_Start+0x14c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d018      	beq.n	80051b2 <HAL_TIM_PWM_Start+0x10e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005188:	d013      	beq.n	80051b2 <HAL_TIM_PWM_Start+0x10e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a19      	ldr	r2, [pc, #100]	; (80051f4 <HAL_TIM_PWM_Start+0x150>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00e      	beq.n	80051b2 <HAL_TIM_PWM_Start+0x10e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a17      	ldr	r2, [pc, #92]	; (80051f8 <HAL_TIM_PWM_Start+0x154>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d009      	beq.n	80051b2 <HAL_TIM_PWM_Start+0x10e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a16      	ldr	r2, [pc, #88]	; (80051fc <HAL_TIM_PWM_Start+0x158>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d004      	beq.n	80051b2 <HAL_TIM_PWM_Start+0x10e>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a14      	ldr	r2, [pc, #80]	; (8005200 <HAL_TIM_PWM_Start+0x15c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d111      	bne.n	80051d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b06      	cmp	r3, #6
 80051c2:	d010      	beq.n	80051e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d4:	e007      	b.n	80051e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40010000 	.word	0x40010000
 80051f4:	40000400 	.word	0x40000400
 80051f8:	40000800 	.word	0x40000800
 80051fc:	40000c00 	.word	0x40000c00
 8005200:	40014000 	.word	0x40014000

08005204 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2200      	movs	r2, #0
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fb26 	bl	8005868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a29      	ldr	r2, [pc, #164]	; (80052c8 <HAL_TIM_PWM_Stop+0xc4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d117      	bne.n	8005256 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6a1a      	ldr	r2, [r3, #32]
 800522c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005230:	4013      	ands	r3, r2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10f      	bne.n	8005256 <HAL_TIM_PWM_Stop+0x52>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6a1a      	ldr	r2, [r3, #32]
 800523c:	f240 4344 	movw	r3, #1092	; 0x444
 8005240:	4013      	ands	r3, r2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d107      	bne.n	8005256 <HAL_TIM_PWM_Stop+0x52>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005254:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6a1a      	ldr	r2, [r3, #32]
 800525c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10f      	bne.n	8005286 <HAL_TIM_PWM_Stop+0x82>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6a1a      	ldr	r2, [r3, #32]
 800526c:	f240 4344 	movw	r3, #1092	; 0x444
 8005270:	4013      	ands	r3, r2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d107      	bne.n	8005286 <HAL_TIM_PWM_Stop+0x82>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0201 	bic.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <HAL_TIM_PWM_Stop+0x92>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005294:	e013      	b.n	80052be <HAL_TIM_PWM_Stop+0xba>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b04      	cmp	r3, #4
 800529a:	d104      	bne.n	80052a6 <HAL_TIM_PWM_Stop+0xa2>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a4:	e00b      	b.n	80052be <HAL_TIM_PWM_Stop+0xba>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_PWM_Stop+0xb2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052b4:	e003      	b.n	80052be <HAL_TIM_PWM_Stop+0xba>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40010000 	.word	0x40010000

080052cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e0ae      	b.n	8005448 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b0c      	cmp	r3, #12
 80052f6:	f200 809f 	bhi.w	8005438 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80052fa:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	08005335 	.word	0x08005335
 8005304:	08005439 	.word	0x08005439
 8005308:	08005439 	.word	0x08005439
 800530c:	08005439 	.word	0x08005439
 8005310:	08005375 	.word	0x08005375
 8005314:	08005439 	.word	0x08005439
 8005318:	08005439 	.word	0x08005439
 800531c:	08005439 	.word	0x08005439
 8005320:	080053b7 	.word	0x080053b7
 8005324:	08005439 	.word	0x08005439
 8005328:	08005439 	.word	0x08005439
 800532c:	08005439 	.word	0x08005439
 8005330:	080053f7 	.word	0x080053f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	4618      	mov	r0, r3
 800533c:	f000 f908 	bl	8005550 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0208 	orr.w	r2, r2, #8
 800534e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0204 	bic.w	r2, r2, #4
 800535e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6999      	ldr	r1, [r3, #24]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	691a      	ldr	r2, [r3, #16]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	619a      	str	r2, [r3, #24]
      break;
 8005372:	e064      	b.n	800543e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	4618      	mov	r0, r3
 800537c:	f000 f94e 	bl	800561c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800538e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6999      	ldr	r1, [r3, #24]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	021a      	lsls	r2, r3, #8
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	619a      	str	r2, [r3, #24]
      break;
 80053b4:	e043      	b.n	800543e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 f999 	bl	80056f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0208 	orr.w	r2, r2, #8
 80053d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69da      	ldr	r2, [r3, #28]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0204 	bic.w	r2, r2, #4
 80053e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69d9      	ldr	r1, [r3, #28]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	61da      	str	r2, [r3, #28]
      break;
 80053f4:	e023      	b.n	800543e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68b9      	ldr	r1, [r7, #8]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f9e3 	bl	80057c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69da      	ldr	r2, [r3, #28]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69d9      	ldr	r1, [r3, #28]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	021a      	lsls	r2, r3, #8
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	61da      	str	r2, [r3, #28]
      break;
 8005436:	e002      	b.n	800543e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	75fb      	strb	r3, [r7, #23]
      break;
 800543c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005446:	7dfb      	ldrb	r3, [r7, #23]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a34      	ldr	r2, [pc, #208]	; (8005534 <TIM_Base_SetConfig+0xe4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00f      	beq.n	8005488 <TIM_Base_SetConfig+0x38>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546e:	d00b      	beq.n	8005488 <TIM_Base_SetConfig+0x38>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a31      	ldr	r2, [pc, #196]	; (8005538 <TIM_Base_SetConfig+0xe8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d007      	beq.n	8005488 <TIM_Base_SetConfig+0x38>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a30      	ldr	r2, [pc, #192]	; (800553c <TIM_Base_SetConfig+0xec>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d003      	beq.n	8005488 <TIM_Base_SetConfig+0x38>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a2f      	ldr	r2, [pc, #188]	; (8005540 <TIM_Base_SetConfig+0xf0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d108      	bne.n	800549a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a25      	ldr	r2, [pc, #148]	; (8005534 <TIM_Base_SetConfig+0xe4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d01b      	beq.n	80054da <TIM_Base_SetConfig+0x8a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a8:	d017      	beq.n	80054da <TIM_Base_SetConfig+0x8a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a22      	ldr	r2, [pc, #136]	; (8005538 <TIM_Base_SetConfig+0xe8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <TIM_Base_SetConfig+0x8a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a21      	ldr	r2, [pc, #132]	; (800553c <TIM_Base_SetConfig+0xec>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00f      	beq.n	80054da <TIM_Base_SetConfig+0x8a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a20      	ldr	r2, [pc, #128]	; (8005540 <TIM_Base_SetConfig+0xf0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00b      	beq.n	80054da <TIM_Base_SetConfig+0x8a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a1f      	ldr	r2, [pc, #124]	; (8005544 <TIM_Base_SetConfig+0xf4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d007      	beq.n	80054da <TIM_Base_SetConfig+0x8a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a1e      	ldr	r2, [pc, #120]	; (8005548 <TIM_Base_SetConfig+0xf8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d003      	beq.n	80054da <TIM_Base_SetConfig+0x8a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a1d      	ldr	r2, [pc, #116]	; (800554c <TIM_Base_SetConfig+0xfc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d108      	bne.n	80054ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a08      	ldr	r2, [pc, #32]	; (8005534 <TIM_Base_SetConfig+0xe4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d103      	bne.n	8005520 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	615a      	str	r2, [r3, #20]
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40010000 	.word	0x40010000
 8005538:	40000400 	.word	0x40000400
 800553c:	40000800 	.word	0x40000800
 8005540:	40000c00 	.word	0x40000c00
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800

08005550 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f023 0201 	bic.w	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f023 0302 	bic.w	r3, r3, #2
 8005598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a1c      	ldr	r2, [pc, #112]	; (8005618 <TIM_OC1_SetConfig+0xc8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d10c      	bne.n	80055c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f023 0308 	bic.w	r3, r3, #8
 80055b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f023 0304 	bic.w	r3, r3, #4
 80055c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a13      	ldr	r2, [pc, #76]	; (8005618 <TIM_OC1_SetConfig+0xc8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d111      	bne.n	80055f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	621a      	str	r2, [r3, #32]
}
 800560c:	bf00      	nop
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	40010000 	.word	0x40010000

0800561c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f023 0210 	bic.w	r2, r3, #16
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	021b      	lsls	r3, r3, #8
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f023 0320 	bic.w	r3, r3, #32
 8005666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a1e      	ldr	r2, [pc, #120]	; (80056f0 <TIM_OC2_SetConfig+0xd4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d10d      	bne.n	8005698 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005696:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a15      	ldr	r2, [pc, #84]	; (80056f0 <TIM_OC2_SetConfig+0xd4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d113      	bne.n	80056c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	621a      	str	r2, [r3, #32]
}
 80056e2:	bf00      	nop
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40010000 	.word	0x40010000

080056f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0303 	bic.w	r3, r3, #3
 800572a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800573c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	021b      	lsls	r3, r3, #8
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <TIM_OC3_SetConfig+0xd0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d10d      	bne.n	800576e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	021b      	lsls	r3, r3, #8
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800576c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a14      	ldr	r2, [pc, #80]	; (80057c4 <TIM_OC3_SetConfig+0xd0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d113      	bne.n	800579e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800577c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	621a      	str	r2, [r3, #32]
}
 80057b8:	bf00      	nop
 80057ba:	371c      	adds	r7, #28
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	40010000 	.word	0x40010000

080057c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	021b      	lsls	r3, r3, #8
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	031b      	lsls	r3, r3, #12
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a10      	ldr	r2, [pc, #64]	; (8005864 <TIM_OC4_SetConfig+0x9c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d109      	bne.n	800583c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800582e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	019b      	lsls	r3, r3, #6
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	621a      	str	r2, [r3, #32]
}
 8005856:	bf00      	nop
 8005858:	371c      	adds	r7, #28
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40010000 	.word	0x40010000

08005868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	2201      	movs	r2, #1
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a1a      	ldr	r2, [r3, #32]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	43db      	mvns	r3, r3
 800588a:	401a      	ands	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a1a      	ldr	r2, [r3, #32]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	fa01 f303 	lsl.w	r3, r1, r3
 80058a0:	431a      	orrs	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
	...

080058b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e050      	b.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1c      	ldr	r2, [pc, #112]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d018      	beq.n	8005942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005918:	d013      	beq.n	8005942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a18      	ldr	r2, [pc, #96]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00e      	beq.n	8005942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a16      	ldr	r2, [pc, #88]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d009      	beq.n	8005942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a15      	ldr	r2, [pc, #84]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d004      	beq.n	8005942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a13      	ldr	r2, [pc, #76]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d10c      	bne.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	4313      	orrs	r3, r2
 8005952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40010000 	.word	0x40010000
 8005980:	40000400 	.word	0x40000400
 8005984:	40000800 	.word	0x40000800
 8005988:	40000c00 	.word	0x40000c00
 800598c:	40014000 	.word	0x40014000

08005990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e03f      	b.n	8005a22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fb fb78 	bl	80010ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2224      	movs	r2, #36	; 0x24
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f9cb 	bl	8005d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695a      	ldr	r2, [r3, #20]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b08a      	sub	sp, #40	; 0x28
 8005a2e:	af02      	add	r7, sp, #8
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	603b      	str	r3, [r7, #0]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d17c      	bne.n	8005b44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_UART_Transmit+0x2c>
 8005a50:	88fb      	ldrh	r3, [r7, #6]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e075      	b.n	8005b46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_UART_Transmit+0x3e>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e06e      	b.n	8005b46 <HAL_UART_Transmit+0x11c>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2221      	movs	r2, #33	; 0x21
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a7e:	f7fd fbb5 	bl	80031ec <HAL_GetTick>
 8005a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	88fa      	ldrh	r2, [r7, #6]
 8005a88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	88fa      	ldrh	r2, [r7, #6]
 8005a8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a98:	d108      	bne.n	8005aac <HAL_UART_Transmit+0x82>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d104      	bne.n	8005aac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	e003      	b.n	8005ab4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005abc:	e02a      	b.n	8005b14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2180      	movs	r1, #128	; 0x80
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 f8e2 	bl	8005c92 <UART_WaitOnFlagUntilTimeout>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e036      	b.n	8005b46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10b      	bne.n	8005af6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	3302      	adds	r3, #2
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	e007      	b.n	8005b06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	3301      	adds	r3, #1
 8005b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1cf      	bne.n	8005abe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2200      	movs	r2, #0
 8005b26:	2140      	movs	r1, #64	; 0x40
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f8b2 	bl	8005c92 <UART_WaitOnFlagUntilTimeout>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e006      	b.n	8005b46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	e000      	b.n	8005b46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b44:	2302      	movs	r3, #2
  }
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3720      	adds	r7, #32
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b08a      	sub	sp, #40	; 0x28
 8005b52:	af02      	add	r7, sp, #8
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	603b      	str	r3, [r7, #0]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	f040 808c 	bne.w	8005c88 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_UART_Receive+0x2e>
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e084      	b.n	8005c8a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <HAL_UART_Receive+0x40>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e07d      	b.n	8005c8a <HAL_UART_Receive+0x13c>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2222      	movs	r2, #34	; 0x22
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005baa:	f7fd fb1f 	bl	80031ec <HAL_GetTick>
 8005bae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	88fa      	ldrh	r2, [r7, #6]
 8005bb4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	88fa      	ldrh	r2, [r7, #6]
 8005bba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc4:	d108      	bne.n	8005bd8 <HAL_UART_Receive+0x8a>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d104      	bne.n	8005bd8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	61bb      	str	r3, [r7, #24]
 8005bd6:	e003      	b.n	8005be0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005be8:	e043      	b.n	8005c72 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2120      	movs	r1, #32
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f84c 	bl	8005c92 <UART_WaitOnFlagUntilTimeout>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e042      	b.n	8005c8a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10c      	bne.n	8005c24 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	3302      	adds	r3, #2
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	e01f      	b.n	8005c64 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2c:	d007      	beq.n	8005c3e <HAL_UART_Receive+0xf0>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10a      	bne.n	8005c4c <HAL_UART_Receive+0xfe>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d106      	bne.n	8005c4c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	e008      	b.n	8005c5e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	3301      	adds	r3, #1
 8005c62:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1b6      	bne.n	8005bea <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	e000      	b.n	8005c8a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005c88:	2302      	movs	r3, #2
  }
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3720      	adds	r7, #32
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b090      	sub	sp, #64	; 0x40
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	603b      	str	r3, [r7, #0]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca2:	e050      	b.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005caa:	d04c      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cb2:	f7fd fa9b 	bl	80031ec <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d241      	bcs.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ce2:	637a      	str	r2, [r7, #52]	; 0x34
 8005ce4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ce8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e5      	bne.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3314      	adds	r3, #20
 8005cfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	613b      	str	r3, [r7, #16]
   return(result);
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3314      	adds	r3, #20
 8005d14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d16:	623a      	str	r2, [r7, #32]
 8005d18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	69f9      	ldr	r1, [r7, #28]
 8005d1c:	6a3a      	ldr	r2, [r7, #32]
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e5      	bne.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e00f      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	bf0c      	ite	eq
 8005d56:	2301      	moveq	r3, #1
 8005d58:	2300      	movne	r3, #0
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d09f      	beq.n	8005ca4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3740      	adds	r7, #64	; 0x40
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d74:	b09f      	sub	sp, #124	; 0x7c
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d86:	68d9      	ldr	r1, [r3, #12]
 8005d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	ea40 0301 	orr.w	r3, r0, r1
 8005d90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	431a      	orrs	r2, r3
 8005da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005db4:	f021 010c 	bic.w	r1, r1, #12
 8005db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dce:	6999      	ldr	r1, [r3, #24]
 8005dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	ea40 0301 	orr.w	r3, r0, r1
 8005dd8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4bc5      	ldr	r3, [pc, #788]	; (80060f4 <UART_SetConfig+0x384>)
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d004      	beq.n	8005dee <UART_SetConfig+0x7e>
 8005de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	4bc3      	ldr	r3, [pc, #780]	; (80060f8 <UART_SetConfig+0x388>)
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d103      	bne.n	8005df6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dee:	f7ff f8f5 	bl	8004fdc <HAL_RCC_GetPCLK2Freq>
 8005df2:	6778      	str	r0, [r7, #116]	; 0x74
 8005df4:	e002      	b.n	8005dfc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005df6:	f7ff f8dd 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8005dfa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e04:	f040 80b6 	bne.w	8005f74 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e0a:	461c      	mov	r4, r3
 8005e0c:	f04f 0500 	mov.w	r5, #0
 8005e10:	4622      	mov	r2, r4
 8005e12:	462b      	mov	r3, r5
 8005e14:	1891      	adds	r1, r2, r2
 8005e16:	6439      	str	r1, [r7, #64]	; 0x40
 8005e18:	415b      	adcs	r3, r3
 8005e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e20:	1912      	adds	r2, r2, r4
 8005e22:	eb45 0303 	adc.w	r3, r5, r3
 8005e26:	f04f 0000 	mov.w	r0, #0
 8005e2a:	f04f 0100 	mov.w	r1, #0
 8005e2e:	00d9      	lsls	r1, r3, #3
 8005e30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e34:	00d0      	lsls	r0, r2, #3
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	1911      	adds	r1, r2, r4
 8005e3c:	6639      	str	r1, [r7, #96]	; 0x60
 8005e3e:	416b      	adcs	r3, r5
 8005e40:	667b      	str	r3, [r7, #100]	; 0x64
 8005e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	461a      	mov	r2, r3
 8005e48:	f04f 0300 	mov.w	r3, #0
 8005e4c:	1891      	adds	r1, r2, r2
 8005e4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e50:	415b      	adcs	r3, r3
 8005e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e5c:	f7fa fa10 	bl	8000280 <__aeabi_uldivmod>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4ba5      	ldr	r3, [pc, #660]	; (80060fc <UART_SetConfig+0x38c>)
 8005e66:	fba3 2302 	umull	r2, r3, r3, r2
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	011e      	lsls	r6, r3, #4
 8005e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e70:	461c      	mov	r4, r3
 8005e72:	f04f 0500 	mov.w	r5, #0
 8005e76:	4622      	mov	r2, r4
 8005e78:	462b      	mov	r3, r5
 8005e7a:	1891      	adds	r1, r2, r2
 8005e7c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e7e:	415b      	adcs	r3, r3
 8005e80:	637b      	str	r3, [r7, #52]	; 0x34
 8005e82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e86:	1912      	adds	r2, r2, r4
 8005e88:	eb45 0303 	adc.w	r3, r5, r3
 8005e8c:	f04f 0000 	mov.w	r0, #0
 8005e90:	f04f 0100 	mov.w	r1, #0
 8005e94:	00d9      	lsls	r1, r3, #3
 8005e96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e9a:	00d0      	lsls	r0, r2, #3
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	1911      	adds	r1, r2, r4
 8005ea2:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ea4:	416b      	adcs	r3, r5
 8005ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	461a      	mov	r2, r3
 8005eae:	f04f 0300 	mov.w	r3, #0
 8005eb2:	1891      	adds	r1, r2, r2
 8005eb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8005eb6:	415b      	adcs	r3, r3
 8005eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ebe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005ec2:	f7fa f9dd 	bl	8000280 <__aeabi_uldivmod>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4b8c      	ldr	r3, [pc, #560]	; (80060fc <UART_SetConfig+0x38c>)
 8005ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	2164      	movs	r1, #100	; 0x64
 8005ed4:	fb01 f303 	mul.w	r3, r1, r3
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	3332      	adds	r3, #50	; 0x32
 8005ede:	4a87      	ldr	r2, [pc, #540]	; (80060fc <UART_SetConfig+0x38c>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005eec:	441e      	add	r6, r3
 8005eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f04f 0100 	mov.w	r1, #0
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	1894      	adds	r4, r2, r2
 8005efc:	623c      	str	r4, [r7, #32]
 8005efe:	415b      	adcs	r3, r3
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
 8005f02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f06:	1812      	adds	r2, r2, r0
 8005f08:	eb41 0303 	adc.w	r3, r1, r3
 8005f0c:	f04f 0400 	mov.w	r4, #0
 8005f10:	f04f 0500 	mov.w	r5, #0
 8005f14:	00dd      	lsls	r5, r3, #3
 8005f16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f1a:	00d4      	lsls	r4, r2, #3
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	462b      	mov	r3, r5
 8005f20:	1814      	adds	r4, r2, r0
 8005f22:	653c      	str	r4, [r7, #80]	; 0x50
 8005f24:	414b      	adcs	r3, r1
 8005f26:	657b      	str	r3, [r7, #84]	; 0x54
 8005f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	1891      	adds	r1, r2, r2
 8005f34:	61b9      	str	r1, [r7, #24]
 8005f36:	415b      	adcs	r3, r3
 8005f38:	61fb      	str	r3, [r7, #28]
 8005f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f42:	f7fa f99d 	bl	8000280 <__aeabi_uldivmod>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4b6c      	ldr	r3, [pc, #432]	; (80060fc <UART_SetConfig+0x38c>)
 8005f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	2164      	movs	r1, #100	; 0x64
 8005f54:	fb01 f303 	mul.w	r3, r1, r3
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	3332      	adds	r3, #50	; 0x32
 8005f5e:	4a67      	ldr	r2, [pc, #412]	; (80060fc <UART_SetConfig+0x38c>)
 8005f60:	fba2 2303 	umull	r2, r3, r2, r3
 8005f64:	095b      	lsrs	r3, r3, #5
 8005f66:	f003 0207 	and.w	r2, r3, #7
 8005f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4432      	add	r2, r6
 8005f70:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f72:	e0b9      	b.n	80060e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f76:	461c      	mov	r4, r3
 8005f78:	f04f 0500 	mov.w	r5, #0
 8005f7c:	4622      	mov	r2, r4
 8005f7e:	462b      	mov	r3, r5
 8005f80:	1891      	adds	r1, r2, r2
 8005f82:	6139      	str	r1, [r7, #16]
 8005f84:	415b      	adcs	r3, r3
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f8c:	1912      	adds	r2, r2, r4
 8005f8e:	eb45 0303 	adc.w	r3, r5, r3
 8005f92:	f04f 0000 	mov.w	r0, #0
 8005f96:	f04f 0100 	mov.w	r1, #0
 8005f9a:	00d9      	lsls	r1, r3, #3
 8005f9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fa0:	00d0      	lsls	r0, r2, #3
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	eb12 0804 	adds.w	r8, r2, r4
 8005faa:	eb43 0905 	adc.w	r9, r3, r5
 8005fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f04f 0100 	mov.w	r1, #0
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	008b      	lsls	r3, r1, #2
 8005fc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fc6:	0082      	lsls	r2, r0, #2
 8005fc8:	4640      	mov	r0, r8
 8005fca:	4649      	mov	r1, r9
 8005fcc:	f7fa f958 	bl	8000280 <__aeabi_uldivmod>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4b49      	ldr	r3, [pc, #292]	; (80060fc <UART_SetConfig+0x38c>)
 8005fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	011e      	lsls	r6, r3, #4
 8005fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f04f 0100 	mov.w	r1, #0
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	1894      	adds	r4, r2, r2
 8005fec:	60bc      	str	r4, [r7, #8]
 8005fee:	415b      	adcs	r3, r3
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ff6:	1812      	adds	r2, r2, r0
 8005ff8:	eb41 0303 	adc.w	r3, r1, r3
 8005ffc:	f04f 0400 	mov.w	r4, #0
 8006000:	f04f 0500 	mov.w	r5, #0
 8006004:	00dd      	lsls	r5, r3, #3
 8006006:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800600a:	00d4      	lsls	r4, r2, #3
 800600c:	4622      	mov	r2, r4
 800600e:	462b      	mov	r3, r5
 8006010:	1814      	adds	r4, r2, r0
 8006012:	64bc      	str	r4, [r7, #72]	; 0x48
 8006014:	414b      	adcs	r3, r1
 8006016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	4618      	mov	r0, r3
 800601e:	f04f 0100 	mov.w	r1, #0
 8006022:	f04f 0200 	mov.w	r2, #0
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	008b      	lsls	r3, r1, #2
 800602c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006030:	0082      	lsls	r2, r0, #2
 8006032:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006036:	f7fa f923 	bl	8000280 <__aeabi_uldivmod>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	4b2f      	ldr	r3, [pc, #188]	; (80060fc <UART_SetConfig+0x38c>)
 8006040:	fba3 1302 	umull	r1, r3, r3, r2
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	2164      	movs	r1, #100	; 0x64
 8006048:	fb01 f303 	mul.w	r3, r1, r3
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	3332      	adds	r3, #50	; 0x32
 8006052:	4a2a      	ldr	r2, [pc, #168]	; (80060fc <UART_SetConfig+0x38c>)
 8006054:	fba2 2303 	umull	r2, r3, r2, r3
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800605e:	441e      	add	r6, r3
 8006060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006062:	4618      	mov	r0, r3
 8006064:	f04f 0100 	mov.w	r1, #0
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	1894      	adds	r4, r2, r2
 800606e:	603c      	str	r4, [r7, #0]
 8006070:	415b      	adcs	r3, r3
 8006072:	607b      	str	r3, [r7, #4]
 8006074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006078:	1812      	adds	r2, r2, r0
 800607a:	eb41 0303 	adc.w	r3, r1, r3
 800607e:	f04f 0400 	mov.w	r4, #0
 8006082:	f04f 0500 	mov.w	r5, #0
 8006086:	00dd      	lsls	r5, r3, #3
 8006088:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800608c:	00d4      	lsls	r4, r2, #3
 800608e:	4622      	mov	r2, r4
 8006090:	462b      	mov	r3, r5
 8006092:	eb12 0a00 	adds.w	sl, r2, r0
 8006096:	eb43 0b01 	adc.w	fp, r3, r1
 800609a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	4618      	mov	r0, r3
 80060a0:	f04f 0100 	mov.w	r1, #0
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	f04f 0300 	mov.w	r3, #0
 80060ac:	008b      	lsls	r3, r1, #2
 80060ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060b2:	0082      	lsls	r2, r0, #2
 80060b4:	4650      	mov	r0, sl
 80060b6:	4659      	mov	r1, fp
 80060b8:	f7fa f8e2 	bl	8000280 <__aeabi_uldivmod>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4b0e      	ldr	r3, [pc, #56]	; (80060fc <UART_SetConfig+0x38c>)
 80060c2:	fba3 1302 	umull	r1, r3, r3, r2
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	2164      	movs	r1, #100	; 0x64
 80060ca:	fb01 f303 	mul.w	r3, r1, r3
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	011b      	lsls	r3, r3, #4
 80060d2:	3332      	adds	r3, #50	; 0x32
 80060d4:	4a09      	ldr	r2, [pc, #36]	; (80060fc <UART_SetConfig+0x38c>)
 80060d6:	fba2 2303 	umull	r2, r3, r2, r3
 80060da:	095b      	lsrs	r3, r3, #5
 80060dc:	f003 020f 	and.w	r2, r3, #15
 80060e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4432      	add	r2, r6
 80060e6:	609a      	str	r2, [r3, #8]
}
 80060e8:	bf00      	nop
 80060ea:	377c      	adds	r7, #124	; 0x7c
 80060ec:	46bd      	mov	sp, r7
 80060ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f2:	bf00      	nop
 80060f4:	40011000 	.word	0x40011000
 80060f8:	40011400 	.word	0x40011400
 80060fc:	51eb851f 	.word	0x51eb851f

08006100 <__errno>:
 8006100:	4b01      	ldr	r3, [pc, #4]	; (8006108 <__errno+0x8>)
 8006102:	6818      	ldr	r0, [r3, #0]
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	2000000c 	.word	0x2000000c

0800610c <__libc_init_array>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	4d0d      	ldr	r5, [pc, #52]	; (8006144 <__libc_init_array+0x38>)
 8006110:	4c0d      	ldr	r4, [pc, #52]	; (8006148 <__libc_init_array+0x3c>)
 8006112:	1b64      	subs	r4, r4, r5
 8006114:	10a4      	asrs	r4, r4, #2
 8006116:	2600      	movs	r6, #0
 8006118:	42a6      	cmp	r6, r4
 800611a:	d109      	bne.n	8006130 <__libc_init_array+0x24>
 800611c:	4d0b      	ldr	r5, [pc, #44]	; (800614c <__libc_init_array+0x40>)
 800611e:	4c0c      	ldr	r4, [pc, #48]	; (8006150 <__libc_init_array+0x44>)
 8006120:	f001 f9be 	bl	80074a0 <_init>
 8006124:	1b64      	subs	r4, r4, r5
 8006126:	10a4      	asrs	r4, r4, #2
 8006128:	2600      	movs	r6, #0
 800612a:	42a6      	cmp	r6, r4
 800612c:	d105      	bne.n	800613a <__libc_init_array+0x2e>
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	f855 3b04 	ldr.w	r3, [r5], #4
 8006134:	4798      	blx	r3
 8006136:	3601      	adds	r6, #1
 8006138:	e7ee      	b.n	8006118 <__libc_init_array+0xc>
 800613a:	f855 3b04 	ldr.w	r3, [r5], #4
 800613e:	4798      	blx	r3
 8006140:	3601      	adds	r6, #1
 8006142:	e7f2      	b.n	800612a <__libc_init_array+0x1e>
 8006144:	0801cd5c 	.word	0x0801cd5c
 8006148:	0801cd5c 	.word	0x0801cd5c
 800614c:	0801cd5c 	.word	0x0801cd5c
 8006150:	0801cd60 	.word	0x0801cd60

08006154 <memcpy>:
 8006154:	440a      	add	r2, r1
 8006156:	4291      	cmp	r1, r2
 8006158:	f100 33ff 	add.w	r3, r0, #4294967295
 800615c:	d100      	bne.n	8006160 <memcpy+0xc>
 800615e:	4770      	bx	lr
 8006160:	b510      	push	{r4, lr}
 8006162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800616a:	4291      	cmp	r1, r2
 800616c:	d1f9      	bne.n	8006162 <memcpy+0xe>
 800616e:	bd10      	pop	{r4, pc}

08006170 <memset>:
 8006170:	4402      	add	r2, r0
 8006172:	4603      	mov	r3, r0
 8006174:	4293      	cmp	r3, r2
 8006176:	d100      	bne.n	800617a <memset+0xa>
 8006178:	4770      	bx	lr
 800617a:	f803 1b01 	strb.w	r1, [r3], #1
 800617e:	e7f9      	b.n	8006174 <memset+0x4>

08006180 <iprintf>:
 8006180:	b40f      	push	{r0, r1, r2, r3}
 8006182:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <iprintf+0x2c>)
 8006184:	b513      	push	{r0, r1, r4, lr}
 8006186:	681c      	ldr	r4, [r3, #0]
 8006188:	b124      	cbz	r4, 8006194 <iprintf+0x14>
 800618a:	69a3      	ldr	r3, [r4, #24]
 800618c:	b913      	cbnz	r3, 8006194 <iprintf+0x14>
 800618e:	4620      	mov	r0, r4
 8006190:	f000 fa7e 	bl	8006690 <__sinit>
 8006194:	ab05      	add	r3, sp, #20
 8006196:	9a04      	ldr	r2, [sp, #16]
 8006198:	68a1      	ldr	r1, [r4, #8]
 800619a:	9301      	str	r3, [sp, #4]
 800619c:	4620      	mov	r0, r4
 800619e:	f000 fdab 	bl	8006cf8 <_vfiprintf_r>
 80061a2:	b002      	add	sp, #8
 80061a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a8:	b004      	add	sp, #16
 80061aa:	4770      	bx	lr
 80061ac:	2000000c 	.word	0x2000000c

080061b0 <_puts_r>:
 80061b0:	b570      	push	{r4, r5, r6, lr}
 80061b2:	460e      	mov	r6, r1
 80061b4:	4605      	mov	r5, r0
 80061b6:	b118      	cbz	r0, 80061c0 <_puts_r+0x10>
 80061b8:	6983      	ldr	r3, [r0, #24]
 80061ba:	b90b      	cbnz	r3, 80061c0 <_puts_r+0x10>
 80061bc:	f000 fa68 	bl	8006690 <__sinit>
 80061c0:	69ab      	ldr	r3, [r5, #24]
 80061c2:	68ac      	ldr	r4, [r5, #8]
 80061c4:	b913      	cbnz	r3, 80061cc <_puts_r+0x1c>
 80061c6:	4628      	mov	r0, r5
 80061c8:	f000 fa62 	bl	8006690 <__sinit>
 80061cc:	4b2c      	ldr	r3, [pc, #176]	; (8006280 <_puts_r+0xd0>)
 80061ce:	429c      	cmp	r4, r3
 80061d0:	d120      	bne.n	8006214 <_puts_r+0x64>
 80061d2:	686c      	ldr	r4, [r5, #4]
 80061d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061d6:	07db      	lsls	r3, r3, #31
 80061d8:	d405      	bmi.n	80061e6 <_puts_r+0x36>
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	0598      	lsls	r0, r3, #22
 80061de:	d402      	bmi.n	80061e6 <_puts_r+0x36>
 80061e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061e2:	f000 faf3 	bl	80067cc <__retarget_lock_acquire_recursive>
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	0719      	lsls	r1, r3, #28
 80061ea:	d51d      	bpl.n	8006228 <_puts_r+0x78>
 80061ec:	6923      	ldr	r3, [r4, #16]
 80061ee:	b1db      	cbz	r3, 8006228 <_puts_r+0x78>
 80061f0:	3e01      	subs	r6, #1
 80061f2:	68a3      	ldr	r3, [r4, #8]
 80061f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80061f8:	3b01      	subs	r3, #1
 80061fa:	60a3      	str	r3, [r4, #8]
 80061fc:	bb39      	cbnz	r1, 800624e <_puts_r+0x9e>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	da38      	bge.n	8006274 <_puts_r+0xc4>
 8006202:	4622      	mov	r2, r4
 8006204:	210a      	movs	r1, #10
 8006206:	4628      	mov	r0, r5
 8006208:	f000 f868 	bl	80062dc <__swbuf_r>
 800620c:	3001      	adds	r0, #1
 800620e:	d011      	beq.n	8006234 <_puts_r+0x84>
 8006210:	250a      	movs	r5, #10
 8006212:	e011      	b.n	8006238 <_puts_r+0x88>
 8006214:	4b1b      	ldr	r3, [pc, #108]	; (8006284 <_puts_r+0xd4>)
 8006216:	429c      	cmp	r4, r3
 8006218:	d101      	bne.n	800621e <_puts_r+0x6e>
 800621a:	68ac      	ldr	r4, [r5, #8]
 800621c:	e7da      	b.n	80061d4 <_puts_r+0x24>
 800621e:	4b1a      	ldr	r3, [pc, #104]	; (8006288 <_puts_r+0xd8>)
 8006220:	429c      	cmp	r4, r3
 8006222:	bf08      	it	eq
 8006224:	68ec      	ldreq	r4, [r5, #12]
 8006226:	e7d5      	b.n	80061d4 <_puts_r+0x24>
 8006228:	4621      	mov	r1, r4
 800622a:	4628      	mov	r0, r5
 800622c:	f000 f8a8 	bl	8006380 <__swsetup_r>
 8006230:	2800      	cmp	r0, #0
 8006232:	d0dd      	beq.n	80061f0 <_puts_r+0x40>
 8006234:	f04f 35ff 	mov.w	r5, #4294967295
 8006238:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800623a:	07da      	lsls	r2, r3, #31
 800623c:	d405      	bmi.n	800624a <_puts_r+0x9a>
 800623e:	89a3      	ldrh	r3, [r4, #12]
 8006240:	059b      	lsls	r3, r3, #22
 8006242:	d402      	bmi.n	800624a <_puts_r+0x9a>
 8006244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006246:	f000 fac2 	bl	80067ce <__retarget_lock_release_recursive>
 800624a:	4628      	mov	r0, r5
 800624c:	bd70      	pop	{r4, r5, r6, pc}
 800624e:	2b00      	cmp	r3, #0
 8006250:	da04      	bge.n	800625c <_puts_r+0xac>
 8006252:	69a2      	ldr	r2, [r4, #24]
 8006254:	429a      	cmp	r2, r3
 8006256:	dc06      	bgt.n	8006266 <_puts_r+0xb6>
 8006258:	290a      	cmp	r1, #10
 800625a:	d004      	beq.n	8006266 <_puts_r+0xb6>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	6022      	str	r2, [r4, #0]
 8006262:	7019      	strb	r1, [r3, #0]
 8006264:	e7c5      	b.n	80061f2 <_puts_r+0x42>
 8006266:	4622      	mov	r2, r4
 8006268:	4628      	mov	r0, r5
 800626a:	f000 f837 	bl	80062dc <__swbuf_r>
 800626e:	3001      	adds	r0, #1
 8006270:	d1bf      	bne.n	80061f2 <_puts_r+0x42>
 8006272:	e7df      	b.n	8006234 <_puts_r+0x84>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	250a      	movs	r5, #10
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	6022      	str	r2, [r4, #0]
 800627c:	701d      	strb	r5, [r3, #0]
 800627e:	e7db      	b.n	8006238 <_puts_r+0x88>
 8006280:	0801cce0 	.word	0x0801cce0
 8006284:	0801cd00 	.word	0x0801cd00
 8006288:	0801ccc0 	.word	0x0801ccc0

0800628c <puts>:
 800628c:	4b02      	ldr	r3, [pc, #8]	; (8006298 <puts+0xc>)
 800628e:	4601      	mov	r1, r0
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	f7ff bf8d 	b.w	80061b0 <_puts_r>
 8006296:	bf00      	nop
 8006298:	2000000c 	.word	0x2000000c

0800629c <siprintf>:
 800629c:	b40e      	push	{r1, r2, r3}
 800629e:	b500      	push	{lr}
 80062a0:	b09c      	sub	sp, #112	; 0x70
 80062a2:	ab1d      	add	r3, sp, #116	; 0x74
 80062a4:	9002      	str	r0, [sp, #8]
 80062a6:	9006      	str	r0, [sp, #24]
 80062a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062ac:	4809      	ldr	r0, [pc, #36]	; (80062d4 <siprintf+0x38>)
 80062ae:	9107      	str	r1, [sp, #28]
 80062b0:	9104      	str	r1, [sp, #16]
 80062b2:	4909      	ldr	r1, [pc, #36]	; (80062d8 <siprintf+0x3c>)
 80062b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80062b8:	9105      	str	r1, [sp, #20]
 80062ba:	6800      	ldr	r0, [r0, #0]
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	a902      	add	r1, sp, #8
 80062c0:	f000 fbf0 	bl	8006aa4 <_svfiprintf_r>
 80062c4:	9b02      	ldr	r3, [sp, #8]
 80062c6:	2200      	movs	r2, #0
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	b01c      	add	sp, #112	; 0x70
 80062cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80062d0:	b003      	add	sp, #12
 80062d2:	4770      	bx	lr
 80062d4:	2000000c 	.word	0x2000000c
 80062d8:	ffff0208 	.word	0xffff0208

080062dc <__swbuf_r>:
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	460e      	mov	r6, r1
 80062e0:	4614      	mov	r4, r2
 80062e2:	4605      	mov	r5, r0
 80062e4:	b118      	cbz	r0, 80062ee <__swbuf_r+0x12>
 80062e6:	6983      	ldr	r3, [r0, #24]
 80062e8:	b90b      	cbnz	r3, 80062ee <__swbuf_r+0x12>
 80062ea:	f000 f9d1 	bl	8006690 <__sinit>
 80062ee:	4b21      	ldr	r3, [pc, #132]	; (8006374 <__swbuf_r+0x98>)
 80062f0:	429c      	cmp	r4, r3
 80062f2:	d12b      	bne.n	800634c <__swbuf_r+0x70>
 80062f4:	686c      	ldr	r4, [r5, #4]
 80062f6:	69a3      	ldr	r3, [r4, #24]
 80062f8:	60a3      	str	r3, [r4, #8]
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	071a      	lsls	r2, r3, #28
 80062fe:	d52f      	bpl.n	8006360 <__swbuf_r+0x84>
 8006300:	6923      	ldr	r3, [r4, #16]
 8006302:	b36b      	cbz	r3, 8006360 <__swbuf_r+0x84>
 8006304:	6923      	ldr	r3, [r4, #16]
 8006306:	6820      	ldr	r0, [r4, #0]
 8006308:	1ac0      	subs	r0, r0, r3
 800630a:	6963      	ldr	r3, [r4, #20]
 800630c:	b2f6      	uxtb	r6, r6
 800630e:	4283      	cmp	r3, r0
 8006310:	4637      	mov	r7, r6
 8006312:	dc04      	bgt.n	800631e <__swbuf_r+0x42>
 8006314:	4621      	mov	r1, r4
 8006316:	4628      	mov	r0, r5
 8006318:	f000 f926 	bl	8006568 <_fflush_r>
 800631c:	bb30      	cbnz	r0, 800636c <__swbuf_r+0x90>
 800631e:	68a3      	ldr	r3, [r4, #8]
 8006320:	3b01      	subs	r3, #1
 8006322:	60a3      	str	r3, [r4, #8]
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	6022      	str	r2, [r4, #0]
 800632a:	701e      	strb	r6, [r3, #0]
 800632c:	6963      	ldr	r3, [r4, #20]
 800632e:	3001      	adds	r0, #1
 8006330:	4283      	cmp	r3, r0
 8006332:	d004      	beq.n	800633e <__swbuf_r+0x62>
 8006334:	89a3      	ldrh	r3, [r4, #12]
 8006336:	07db      	lsls	r3, r3, #31
 8006338:	d506      	bpl.n	8006348 <__swbuf_r+0x6c>
 800633a:	2e0a      	cmp	r6, #10
 800633c:	d104      	bne.n	8006348 <__swbuf_r+0x6c>
 800633e:	4621      	mov	r1, r4
 8006340:	4628      	mov	r0, r5
 8006342:	f000 f911 	bl	8006568 <_fflush_r>
 8006346:	b988      	cbnz	r0, 800636c <__swbuf_r+0x90>
 8006348:	4638      	mov	r0, r7
 800634a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800634c:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <__swbuf_r+0x9c>)
 800634e:	429c      	cmp	r4, r3
 8006350:	d101      	bne.n	8006356 <__swbuf_r+0x7a>
 8006352:	68ac      	ldr	r4, [r5, #8]
 8006354:	e7cf      	b.n	80062f6 <__swbuf_r+0x1a>
 8006356:	4b09      	ldr	r3, [pc, #36]	; (800637c <__swbuf_r+0xa0>)
 8006358:	429c      	cmp	r4, r3
 800635a:	bf08      	it	eq
 800635c:	68ec      	ldreq	r4, [r5, #12]
 800635e:	e7ca      	b.n	80062f6 <__swbuf_r+0x1a>
 8006360:	4621      	mov	r1, r4
 8006362:	4628      	mov	r0, r5
 8006364:	f000 f80c 	bl	8006380 <__swsetup_r>
 8006368:	2800      	cmp	r0, #0
 800636a:	d0cb      	beq.n	8006304 <__swbuf_r+0x28>
 800636c:	f04f 37ff 	mov.w	r7, #4294967295
 8006370:	e7ea      	b.n	8006348 <__swbuf_r+0x6c>
 8006372:	bf00      	nop
 8006374:	0801cce0 	.word	0x0801cce0
 8006378:	0801cd00 	.word	0x0801cd00
 800637c:	0801ccc0 	.word	0x0801ccc0

08006380 <__swsetup_r>:
 8006380:	4b32      	ldr	r3, [pc, #200]	; (800644c <__swsetup_r+0xcc>)
 8006382:	b570      	push	{r4, r5, r6, lr}
 8006384:	681d      	ldr	r5, [r3, #0]
 8006386:	4606      	mov	r6, r0
 8006388:	460c      	mov	r4, r1
 800638a:	b125      	cbz	r5, 8006396 <__swsetup_r+0x16>
 800638c:	69ab      	ldr	r3, [r5, #24]
 800638e:	b913      	cbnz	r3, 8006396 <__swsetup_r+0x16>
 8006390:	4628      	mov	r0, r5
 8006392:	f000 f97d 	bl	8006690 <__sinit>
 8006396:	4b2e      	ldr	r3, [pc, #184]	; (8006450 <__swsetup_r+0xd0>)
 8006398:	429c      	cmp	r4, r3
 800639a:	d10f      	bne.n	80063bc <__swsetup_r+0x3c>
 800639c:	686c      	ldr	r4, [r5, #4]
 800639e:	89a3      	ldrh	r3, [r4, #12]
 80063a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063a4:	0719      	lsls	r1, r3, #28
 80063a6:	d42c      	bmi.n	8006402 <__swsetup_r+0x82>
 80063a8:	06dd      	lsls	r5, r3, #27
 80063aa:	d411      	bmi.n	80063d0 <__swsetup_r+0x50>
 80063ac:	2309      	movs	r3, #9
 80063ae:	6033      	str	r3, [r6, #0]
 80063b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063b4:	81a3      	strh	r3, [r4, #12]
 80063b6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ba:	e03e      	b.n	800643a <__swsetup_r+0xba>
 80063bc:	4b25      	ldr	r3, [pc, #148]	; (8006454 <__swsetup_r+0xd4>)
 80063be:	429c      	cmp	r4, r3
 80063c0:	d101      	bne.n	80063c6 <__swsetup_r+0x46>
 80063c2:	68ac      	ldr	r4, [r5, #8]
 80063c4:	e7eb      	b.n	800639e <__swsetup_r+0x1e>
 80063c6:	4b24      	ldr	r3, [pc, #144]	; (8006458 <__swsetup_r+0xd8>)
 80063c8:	429c      	cmp	r4, r3
 80063ca:	bf08      	it	eq
 80063cc:	68ec      	ldreq	r4, [r5, #12]
 80063ce:	e7e6      	b.n	800639e <__swsetup_r+0x1e>
 80063d0:	0758      	lsls	r0, r3, #29
 80063d2:	d512      	bpl.n	80063fa <__swsetup_r+0x7a>
 80063d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063d6:	b141      	cbz	r1, 80063ea <__swsetup_r+0x6a>
 80063d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063dc:	4299      	cmp	r1, r3
 80063de:	d002      	beq.n	80063e6 <__swsetup_r+0x66>
 80063e0:	4630      	mov	r0, r6
 80063e2:	f000 fa59 	bl	8006898 <_free_r>
 80063e6:	2300      	movs	r3, #0
 80063e8:	6363      	str	r3, [r4, #52]	; 0x34
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063f0:	81a3      	strh	r3, [r4, #12]
 80063f2:	2300      	movs	r3, #0
 80063f4:	6063      	str	r3, [r4, #4]
 80063f6:	6923      	ldr	r3, [r4, #16]
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	89a3      	ldrh	r3, [r4, #12]
 80063fc:	f043 0308 	orr.w	r3, r3, #8
 8006400:	81a3      	strh	r3, [r4, #12]
 8006402:	6923      	ldr	r3, [r4, #16]
 8006404:	b94b      	cbnz	r3, 800641a <__swsetup_r+0x9a>
 8006406:	89a3      	ldrh	r3, [r4, #12]
 8006408:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800640c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006410:	d003      	beq.n	800641a <__swsetup_r+0x9a>
 8006412:	4621      	mov	r1, r4
 8006414:	4630      	mov	r0, r6
 8006416:	f000 f9ff 	bl	8006818 <__smakebuf_r>
 800641a:	89a0      	ldrh	r0, [r4, #12]
 800641c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006420:	f010 0301 	ands.w	r3, r0, #1
 8006424:	d00a      	beq.n	800643c <__swsetup_r+0xbc>
 8006426:	2300      	movs	r3, #0
 8006428:	60a3      	str	r3, [r4, #8]
 800642a:	6963      	ldr	r3, [r4, #20]
 800642c:	425b      	negs	r3, r3
 800642e:	61a3      	str	r3, [r4, #24]
 8006430:	6923      	ldr	r3, [r4, #16]
 8006432:	b943      	cbnz	r3, 8006446 <__swsetup_r+0xc6>
 8006434:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006438:	d1ba      	bne.n	80063b0 <__swsetup_r+0x30>
 800643a:	bd70      	pop	{r4, r5, r6, pc}
 800643c:	0781      	lsls	r1, r0, #30
 800643e:	bf58      	it	pl
 8006440:	6963      	ldrpl	r3, [r4, #20]
 8006442:	60a3      	str	r3, [r4, #8]
 8006444:	e7f4      	b.n	8006430 <__swsetup_r+0xb0>
 8006446:	2000      	movs	r0, #0
 8006448:	e7f7      	b.n	800643a <__swsetup_r+0xba>
 800644a:	bf00      	nop
 800644c:	2000000c 	.word	0x2000000c
 8006450:	0801cce0 	.word	0x0801cce0
 8006454:	0801cd00 	.word	0x0801cd00
 8006458:	0801ccc0 	.word	0x0801ccc0

0800645c <__sflush_r>:
 800645c:	898a      	ldrh	r2, [r1, #12]
 800645e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006462:	4605      	mov	r5, r0
 8006464:	0710      	lsls	r0, r2, #28
 8006466:	460c      	mov	r4, r1
 8006468:	d458      	bmi.n	800651c <__sflush_r+0xc0>
 800646a:	684b      	ldr	r3, [r1, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	dc05      	bgt.n	800647c <__sflush_r+0x20>
 8006470:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	dc02      	bgt.n	800647c <__sflush_r+0x20>
 8006476:	2000      	movs	r0, #0
 8006478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800647c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800647e:	2e00      	cmp	r6, #0
 8006480:	d0f9      	beq.n	8006476 <__sflush_r+0x1a>
 8006482:	2300      	movs	r3, #0
 8006484:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006488:	682f      	ldr	r7, [r5, #0]
 800648a:	602b      	str	r3, [r5, #0]
 800648c:	d032      	beq.n	80064f4 <__sflush_r+0x98>
 800648e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006490:	89a3      	ldrh	r3, [r4, #12]
 8006492:	075a      	lsls	r2, r3, #29
 8006494:	d505      	bpl.n	80064a2 <__sflush_r+0x46>
 8006496:	6863      	ldr	r3, [r4, #4]
 8006498:	1ac0      	subs	r0, r0, r3
 800649a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800649c:	b10b      	cbz	r3, 80064a2 <__sflush_r+0x46>
 800649e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064a0:	1ac0      	subs	r0, r0, r3
 80064a2:	2300      	movs	r3, #0
 80064a4:	4602      	mov	r2, r0
 80064a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064a8:	6a21      	ldr	r1, [r4, #32]
 80064aa:	4628      	mov	r0, r5
 80064ac:	47b0      	blx	r6
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	d106      	bne.n	80064c2 <__sflush_r+0x66>
 80064b4:	6829      	ldr	r1, [r5, #0]
 80064b6:	291d      	cmp	r1, #29
 80064b8:	d82c      	bhi.n	8006514 <__sflush_r+0xb8>
 80064ba:	4a2a      	ldr	r2, [pc, #168]	; (8006564 <__sflush_r+0x108>)
 80064bc:	40ca      	lsrs	r2, r1
 80064be:	07d6      	lsls	r6, r2, #31
 80064c0:	d528      	bpl.n	8006514 <__sflush_r+0xb8>
 80064c2:	2200      	movs	r2, #0
 80064c4:	6062      	str	r2, [r4, #4]
 80064c6:	04d9      	lsls	r1, r3, #19
 80064c8:	6922      	ldr	r2, [r4, #16]
 80064ca:	6022      	str	r2, [r4, #0]
 80064cc:	d504      	bpl.n	80064d8 <__sflush_r+0x7c>
 80064ce:	1c42      	adds	r2, r0, #1
 80064d0:	d101      	bne.n	80064d6 <__sflush_r+0x7a>
 80064d2:	682b      	ldr	r3, [r5, #0]
 80064d4:	b903      	cbnz	r3, 80064d8 <__sflush_r+0x7c>
 80064d6:	6560      	str	r0, [r4, #84]	; 0x54
 80064d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064da:	602f      	str	r7, [r5, #0]
 80064dc:	2900      	cmp	r1, #0
 80064de:	d0ca      	beq.n	8006476 <__sflush_r+0x1a>
 80064e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064e4:	4299      	cmp	r1, r3
 80064e6:	d002      	beq.n	80064ee <__sflush_r+0x92>
 80064e8:	4628      	mov	r0, r5
 80064ea:	f000 f9d5 	bl	8006898 <_free_r>
 80064ee:	2000      	movs	r0, #0
 80064f0:	6360      	str	r0, [r4, #52]	; 0x34
 80064f2:	e7c1      	b.n	8006478 <__sflush_r+0x1c>
 80064f4:	6a21      	ldr	r1, [r4, #32]
 80064f6:	2301      	movs	r3, #1
 80064f8:	4628      	mov	r0, r5
 80064fa:	47b0      	blx	r6
 80064fc:	1c41      	adds	r1, r0, #1
 80064fe:	d1c7      	bne.n	8006490 <__sflush_r+0x34>
 8006500:	682b      	ldr	r3, [r5, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0c4      	beq.n	8006490 <__sflush_r+0x34>
 8006506:	2b1d      	cmp	r3, #29
 8006508:	d001      	beq.n	800650e <__sflush_r+0xb2>
 800650a:	2b16      	cmp	r3, #22
 800650c:	d101      	bne.n	8006512 <__sflush_r+0xb6>
 800650e:	602f      	str	r7, [r5, #0]
 8006510:	e7b1      	b.n	8006476 <__sflush_r+0x1a>
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006518:	81a3      	strh	r3, [r4, #12]
 800651a:	e7ad      	b.n	8006478 <__sflush_r+0x1c>
 800651c:	690f      	ldr	r7, [r1, #16]
 800651e:	2f00      	cmp	r7, #0
 8006520:	d0a9      	beq.n	8006476 <__sflush_r+0x1a>
 8006522:	0793      	lsls	r3, r2, #30
 8006524:	680e      	ldr	r6, [r1, #0]
 8006526:	bf08      	it	eq
 8006528:	694b      	ldreq	r3, [r1, #20]
 800652a:	600f      	str	r7, [r1, #0]
 800652c:	bf18      	it	ne
 800652e:	2300      	movne	r3, #0
 8006530:	eba6 0807 	sub.w	r8, r6, r7
 8006534:	608b      	str	r3, [r1, #8]
 8006536:	f1b8 0f00 	cmp.w	r8, #0
 800653a:	dd9c      	ble.n	8006476 <__sflush_r+0x1a>
 800653c:	6a21      	ldr	r1, [r4, #32]
 800653e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006540:	4643      	mov	r3, r8
 8006542:	463a      	mov	r2, r7
 8006544:	4628      	mov	r0, r5
 8006546:	47b0      	blx	r6
 8006548:	2800      	cmp	r0, #0
 800654a:	dc06      	bgt.n	800655a <__sflush_r+0xfe>
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006552:	81a3      	strh	r3, [r4, #12]
 8006554:	f04f 30ff 	mov.w	r0, #4294967295
 8006558:	e78e      	b.n	8006478 <__sflush_r+0x1c>
 800655a:	4407      	add	r7, r0
 800655c:	eba8 0800 	sub.w	r8, r8, r0
 8006560:	e7e9      	b.n	8006536 <__sflush_r+0xda>
 8006562:	bf00      	nop
 8006564:	20400001 	.word	0x20400001

08006568 <_fflush_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	690b      	ldr	r3, [r1, #16]
 800656c:	4605      	mov	r5, r0
 800656e:	460c      	mov	r4, r1
 8006570:	b913      	cbnz	r3, 8006578 <_fflush_r+0x10>
 8006572:	2500      	movs	r5, #0
 8006574:	4628      	mov	r0, r5
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	b118      	cbz	r0, 8006582 <_fflush_r+0x1a>
 800657a:	6983      	ldr	r3, [r0, #24]
 800657c:	b90b      	cbnz	r3, 8006582 <_fflush_r+0x1a>
 800657e:	f000 f887 	bl	8006690 <__sinit>
 8006582:	4b14      	ldr	r3, [pc, #80]	; (80065d4 <_fflush_r+0x6c>)
 8006584:	429c      	cmp	r4, r3
 8006586:	d11b      	bne.n	80065c0 <_fflush_r+0x58>
 8006588:	686c      	ldr	r4, [r5, #4]
 800658a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0ef      	beq.n	8006572 <_fflush_r+0xa>
 8006592:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006594:	07d0      	lsls	r0, r2, #31
 8006596:	d404      	bmi.n	80065a2 <_fflush_r+0x3a>
 8006598:	0599      	lsls	r1, r3, #22
 800659a:	d402      	bmi.n	80065a2 <_fflush_r+0x3a>
 800659c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800659e:	f000 f915 	bl	80067cc <__retarget_lock_acquire_recursive>
 80065a2:	4628      	mov	r0, r5
 80065a4:	4621      	mov	r1, r4
 80065a6:	f7ff ff59 	bl	800645c <__sflush_r>
 80065aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065ac:	07da      	lsls	r2, r3, #31
 80065ae:	4605      	mov	r5, r0
 80065b0:	d4e0      	bmi.n	8006574 <_fflush_r+0xc>
 80065b2:	89a3      	ldrh	r3, [r4, #12]
 80065b4:	059b      	lsls	r3, r3, #22
 80065b6:	d4dd      	bmi.n	8006574 <_fflush_r+0xc>
 80065b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ba:	f000 f908 	bl	80067ce <__retarget_lock_release_recursive>
 80065be:	e7d9      	b.n	8006574 <_fflush_r+0xc>
 80065c0:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <_fflush_r+0x70>)
 80065c2:	429c      	cmp	r4, r3
 80065c4:	d101      	bne.n	80065ca <_fflush_r+0x62>
 80065c6:	68ac      	ldr	r4, [r5, #8]
 80065c8:	e7df      	b.n	800658a <_fflush_r+0x22>
 80065ca:	4b04      	ldr	r3, [pc, #16]	; (80065dc <_fflush_r+0x74>)
 80065cc:	429c      	cmp	r4, r3
 80065ce:	bf08      	it	eq
 80065d0:	68ec      	ldreq	r4, [r5, #12]
 80065d2:	e7da      	b.n	800658a <_fflush_r+0x22>
 80065d4:	0801cce0 	.word	0x0801cce0
 80065d8:	0801cd00 	.word	0x0801cd00
 80065dc:	0801ccc0 	.word	0x0801ccc0

080065e0 <std>:
 80065e0:	2300      	movs	r3, #0
 80065e2:	b510      	push	{r4, lr}
 80065e4:	4604      	mov	r4, r0
 80065e6:	e9c0 3300 	strd	r3, r3, [r0]
 80065ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065ee:	6083      	str	r3, [r0, #8]
 80065f0:	8181      	strh	r1, [r0, #12]
 80065f2:	6643      	str	r3, [r0, #100]	; 0x64
 80065f4:	81c2      	strh	r2, [r0, #14]
 80065f6:	6183      	str	r3, [r0, #24]
 80065f8:	4619      	mov	r1, r3
 80065fa:	2208      	movs	r2, #8
 80065fc:	305c      	adds	r0, #92	; 0x5c
 80065fe:	f7ff fdb7 	bl	8006170 <memset>
 8006602:	4b05      	ldr	r3, [pc, #20]	; (8006618 <std+0x38>)
 8006604:	6263      	str	r3, [r4, #36]	; 0x24
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <std+0x3c>)
 8006608:	62a3      	str	r3, [r4, #40]	; 0x28
 800660a:	4b05      	ldr	r3, [pc, #20]	; (8006620 <std+0x40>)
 800660c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800660e:	4b05      	ldr	r3, [pc, #20]	; (8006624 <std+0x44>)
 8006610:	6224      	str	r4, [r4, #32]
 8006612:	6323      	str	r3, [r4, #48]	; 0x30
 8006614:	bd10      	pop	{r4, pc}
 8006616:	bf00      	nop
 8006618:	080072a1 	.word	0x080072a1
 800661c:	080072c3 	.word	0x080072c3
 8006620:	080072fb 	.word	0x080072fb
 8006624:	0800731f 	.word	0x0800731f

08006628 <_cleanup_r>:
 8006628:	4901      	ldr	r1, [pc, #4]	; (8006630 <_cleanup_r+0x8>)
 800662a:	f000 b8af 	b.w	800678c <_fwalk_reent>
 800662e:	bf00      	nop
 8006630:	08006569 	.word	0x08006569

08006634 <__sfmoreglue>:
 8006634:	b570      	push	{r4, r5, r6, lr}
 8006636:	1e4a      	subs	r2, r1, #1
 8006638:	2568      	movs	r5, #104	; 0x68
 800663a:	4355      	muls	r5, r2
 800663c:	460e      	mov	r6, r1
 800663e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006642:	f000 f979 	bl	8006938 <_malloc_r>
 8006646:	4604      	mov	r4, r0
 8006648:	b140      	cbz	r0, 800665c <__sfmoreglue+0x28>
 800664a:	2100      	movs	r1, #0
 800664c:	e9c0 1600 	strd	r1, r6, [r0]
 8006650:	300c      	adds	r0, #12
 8006652:	60a0      	str	r0, [r4, #8]
 8006654:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006658:	f7ff fd8a 	bl	8006170 <memset>
 800665c:	4620      	mov	r0, r4
 800665e:	bd70      	pop	{r4, r5, r6, pc}

08006660 <__sfp_lock_acquire>:
 8006660:	4801      	ldr	r0, [pc, #4]	; (8006668 <__sfp_lock_acquire+0x8>)
 8006662:	f000 b8b3 	b.w	80067cc <__retarget_lock_acquire_recursive>
 8006666:	bf00      	nop
 8006668:	20000214 	.word	0x20000214

0800666c <__sfp_lock_release>:
 800666c:	4801      	ldr	r0, [pc, #4]	; (8006674 <__sfp_lock_release+0x8>)
 800666e:	f000 b8ae 	b.w	80067ce <__retarget_lock_release_recursive>
 8006672:	bf00      	nop
 8006674:	20000214 	.word	0x20000214

08006678 <__sinit_lock_acquire>:
 8006678:	4801      	ldr	r0, [pc, #4]	; (8006680 <__sinit_lock_acquire+0x8>)
 800667a:	f000 b8a7 	b.w	80067cc <__retarget_lock_acquire_recursive>
 800667e:	bf00      	nop
 8006680:	2000020f 	.word	0x2000020f

08006684 <__sinit_lock_release>:
 8006684:	4801      	ldr	r0, [pc, #4]	; (800668c <__sinit_lock_release+0x8>)
 8006686:	f000 b8a2 	b.w	80067ce <__retarget_lock_release_recursive>
 800668a:	bf00      	nop
 800668c:	2000020f 	.word	0x2000020f

08006690 <__sinit>:
 8006690:	b510      	push	{r4, lr}
 8006692:	4604      	mov	r4, r0
 8006694:	f7ff fff0 	bl	8006678 <__sinit_lock_acquire>
 8006698:	69a3      	ldr	r3, [r4, #24]
 800669a:	b11b      	cbz	r3, 80066a4 <__sinit+0x14>
 800669c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a0:	f7ff bff0 	b.w	8006684 <__sinit_lock_release>
 80066a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066a8:	6523      	str	r3, [r4, #80]	; 0x50
 80066aa:	4b13      	ldr	r3, [pc, #76]	; (80066f8 <__sinit+0x68>)
 80066ac:	4a13      	ldr	r2, [pc, #76]	; (80066fc <__sinit+0x6c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80066b2:	42a3      	cmp	r3, r4
 80066b4:	bf04      	itt	eq
 80066b6:	2301      	moveq	r3, #1
 80066b8:	61a3      	streq	r3, [r4, #24]
 80066ba:	4620      	mov	r0, r4
 80066bc:	f000 f820 	bl	8006700 <__sfp>
 80066c0:	6060      	str	r0, [r4, #4]
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 f81c 	bl	8006700 <__sfp>
 80066c8:	60a0      	str	r0, [r4, #8]
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 f818 	bl	8006700 <__sfp>
 80066d0:	2200      	movs	r2, #0
 80066d2:	60e0      	str	r0, [r4, #12]
 80066d4:	2104      	movs	r1, #4
 80066d6:	6860      	ldr	r0, [r4, #4]
 80066d8:	f7ff ff82 	bl	80065e0 <std>
 80066dc:	68a0      	ldr	r0, [r4, #8]
 80066de:	2201      	movs	r2, #1
 80066e0:	2109      	movs	r1, #9
 80066e2:	f7ff ff7d 	bl	80065e0 <std>
 80066e6:	68e0      	ldr	r0, [r4, #12]
 80066e8:	2202      	movs	r2, #2
 80066ea:	2112      	movs	r1, #18
 80066ec:	f7ff ff78 	bl	80065e0 <std>
 80066f0:	2301      	movs	r3, #1
 80066f2:	61a3      	str	r3, [r4, #24]
 80066f4:	e7d2      	b.n	800669c <__sinit+0xc>
 80066f6:	bf00      	nop
 80066f8:	0801ccbc 	.word	0x0801ccbc
 80066fc:	08006629 	.word	0x08006629

08006700 <__sfp>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	4607      	mov	r7, r0
 8006704:	f7ff ffac 	bl	8006660 <__sfp_lock_acquire>
 8006708:	4b1e      	ldr	r3, [pc, #120]	; (8006784 <__sfp+0x84>)
 800670a:	681e      	ldr	r6, [r3, #0]
 800670c:	69b3      	ldr	r3, [r6, #24]
 800670e:	b913      	cbnz	r3, 8006716 <__sfp+0x16>
 8006710:	4630      	mov	r0, r6
 8006712:	f7ff ffbd 	bl	8006690 <__sinit>
 8006716:	3648      	adds	r6, #72	; 0x48
 8006718:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800671c:	3b01      	subs	r3, #1
 800671e:	d503      	bpl.n	8006728 <__sfp+0x28>
 8006720:	6833      	ldr	r3, [r6, #0]
 8006722:	b30b      	cbz	r3, 8006768 <__sfp+0x68>
 8006724:	6836      	ldr	r6, [r6, #0]
 8006726:	e7f7      	b.n	8006718 <__sfp+0x18>
 8006728:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800672c:	b9d5      	cbnz	r5, 8006764 <__sfp+0x64>
 800672e:	4b16      	ldr	r3, [pc, #88]	; (8006788 <__sfp+0x88>)
 8006730:	60e3      	str	r3, [r4, #12]
 8006732:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006736:	6665      	str	r5, [r4, #100]	; 0x64
 8006738:	f000 f847 	bl	80067ca <__retarget_lock_init_recursive>
 800673c:	f7ff ff96 	bl	800666c <__sfp_lock_release>
 8006740:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006744:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006748:	6025      	str	r5, [r4, #0]
 800674a:	61a5      	str	r5, [r4, #24]
 800674c:	2208      	movs	r2, #8
 800674e:	4629      	mov	r1, r5
 8006750:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006754:	f7ff fd0c 	bl	8006170 <memset>
 8006758:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800675c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006760:	4620      	mov	r0, r4
 8006762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006764:	3468      	adds	r4, #104	; 0x68
 8006766:	e7d9      	b.n	800671c <__sfp+0x1c>
 8006768:	2104      	movs	r1, #4
 800676a:	4638      	mov	r0, r7
 800676c:	f7ff ff62 	bl	8006634 <__sfmoreglue>
 8006770:	4604      	mov	r4, r0
 8006772:	6030      	str	r0, [r6, #0]
 8006774:	2800      	cmp	r0, #0
 8006776:	d1d5      	bne.n	8006724 <__sfp+0x24>
 8006778:	f7ff ff78 	bl	800666c <__sfp_lock_release>
 800677c:	230c      	movs	r3, #12
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	e7ee      	b.n	8006760 <__sfp+0x60>
 8006782:	bf00      	nop
 8006784:	0801ccbc 	.word	0x0801ccbc
 8006788:	ffff0001 	.word	0xffff0001

0800678c <_fwalk_reent>:
 800678c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006790:	4606      	mov	r6, r0
 8006792:	4688      	mov	r8, r1
 8006794:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006798:	2700      	movs	r7, #0
 800679a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800679e:	f1b9 0901 	subs.w	r9, r9, #1
 80067a2:	d505      	bpl.n	80067b0 <_fwalk_reent+0x24>
 80067a4:	6824      	ldr	r4, [r4, #0]
 80067a6:	2c00      	cmp	r4, #0
 80067a8:	d1f7      	bne.n	800679a <_fwalk_reent+0xe>
 80067aa:	4638      	mov	r0, r7
 80067ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067b0:	89ab      	ldrh	r3, [r5, #12]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d907      	bls.n	80067c6 <_fwalk_reent+0x3a>
 80067b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067ba:	3301      	adds	r3, #1
 80067bc:	d003      	beq.n	80067c6 <_fwalk_reent+0x3a>
 80067be:	4629      	mov	r1, r5
 80067c0:	4630      	mov	r0, r6
 80067c2:	47c0      	blx	r8
 80067c4:	4307      	orrs	r7, r0
 80067c6:	3568      	adds	r5, #104	; 0x68
 80067c8:	e7e9      	b.n	800679e <_fwalk_reent+0x12>

080067ca <__retarget_lock_init_recursive>:
 80067ca:	4770      	bx	lr

080067cc <__retarget_lock_acquire_recursive>:
 80067cc:	4770      	bx	lr

080067ce <__retarget_lock_release_recursive>:
 80067ce:	4770      	bx	lr

080067d0 <__swhatbuf_r>:
 80067d0:	b570      	push	{r4, r5, r6, lr}
 80067d2:	460e      	mov	r6, r1
 80067d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d8:	2900      	cmp	r1, #0
 80067da:	b096      	sub	sp, #88	; 0x58
 80067dc:	4614      	mov	r4, r2
 80067de:	461d      	mov	r5, r3
 80067e0:	da07      	bge.n	80067f2 <__swhatbuf_r+0x22>
 80067e2:	2300      	movs	r3, #0
 80067e4:	602b      	str	r3, [r5, #0]
 80067e6:	89b3      	ldrh	r3, [r6, #12]
 80067e8:	061a      	lsls	r2, r3, #24
 80067ea:	d410      	bmi.n	800680e <__swhatbuf_r+0x3e>
 80067ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067f0:	e00e      	b.n	8006810 <__swhatbuf_r+0x40>
 80067f2:	466a      	mov	r2, sp
 80067f4:	f000 fdba 	bl	800736c <_fstat_r>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	dbf2      	blt.n	80067e2 <__swhatbuf_r+0x12>
 80067fc:	9a01      	ldr	r2, [sp, #4]
 80067fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006802:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006806:	425a      	negs	r2, r3
 8006808:	415a      	adcs	r2, r3
 800680a:	602a      	str	r2, [r5, #0]
 800680c:	e7ee      	b.n	80067ec <__swhatbuf_r+0x1c>
 800680e:	2340      	movs	r3, #64	; 0x40
 8006810:	2000      	movs	r0, #0
 8006812:	6023      	str	r3, [r4, #0]
 8006814:	b016      	add	sp, #88	; 0x58
 8006816:	bd70      	pop	{r4, r5, r6, pc}

08006818 <__smakebuf_r>:
 8006818:	898b      	ldrh	r3, [r1, #12]
 800681a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800681c:	079d      	lsls	r5, r3, #30
 800681e:	4606      	mov	r6, r0
 8006820:	460c      	mov	r4, r1
 8006822:	d507      	bpl.n	8006834 <__smakebuf_r+0x1c>
 8006824:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	6123      	str	r3, [r4, #16]
 800682c:	2301      	movs	r3, #1
 800682e:	6163      	str	r3, [r4, #20]
 8006830:	b002      	add	sp, #8
 8006832:	bd70      	pop	{r4, r5, r6, pc}
 8006834:	ab01      	add	r3, sp, #4
 8006836:	466a      	mov	r2, sp
 8006838:	f7ff ffca 	bl	80067d0 <__swhatbuf_r>
 800683c:	9900      	ldr	r1, [sp, #0]
 800683e:	4605      	mov	r5, r0
 8006840:	4630      	mov	r0, r6
 8006842:	f000 f879 	bl	8006938 <_malloc_r>
 8006846:	b948      	cbnz	r0, 800685c <__smakebuf_r+0x44>
 8006848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800684c:	059a      	lsls	r2, r3, #22
 800684e:	d4ef      	bmi.n	8006830 <__smakebuf_r+0x18>
 8006850:	f023 0303 	bic.w	r3, r3, #3
 8006854:	f043 0302 	orr.w	r3, r3, #2
 8006858:	81a3      	strh	r3, [r4, #12]
 800685a:	e7e3      	b.n	8006824 <__smakebuf_r+0xc>
 800685c:	4b0d      	ldr	r3, [pc, #52]	; (8006894 <__smakebuf_r+0x7c>)
 800685e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006860:	89a3      	ldrh	r3, [r4, #12]
 8006862:	6020      	str	r0, [r4, #0]
 8006864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006868:	81a3      	strh	r3, [r4, #12]
 800686a:	9b00      	ldr	r3, [sp, #0]
 800686c:	6163      	str	r3, [r4, #20]
 800686e:	9b01      	ldr	r3, [sp, #4]
 8006870:	6120      	str	r0, [r4, #16]
 8006872:	b15b      	cbz	r3, 800688c <__smakebuf_r+0x74>
 8006874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006878:	4630      	mov	r0, r6
 800687a:	f000 fd89 	bl	8007390 <_isatty_r>
 800687e:	b128      	cbz	r0, 800688c <__smakebuf_r+0x74>
 8006880:	89a3      	ldrh	r3, [r4, #12]
 8006882:	f023 0303 	bic.w	r3, r3, #3
 8006886:	f043 0301 	orr.w	r3, r3, #1
 800688a:	81a3      	strh	r3, [r4, #12]
 800688c:	89a0      	ldrh	r0, [r4, #12]
 800688e:	4305      	orrs	r5, r0
 8006890:	81a5      	strh	r5, [r4, #12]
 8006892:	e7cd      	b.n	8006830 <__smakebuf_r+0x18>
 8006894:	08006629 	.word	0x08006629

08006898 <_free_r>:
 8006898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800689a:	2900      	cmp	r1, #0
 800689c:	d048      	beq.n	8006930 <_free_r+0x98>
 800689e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068a2:	9001      	str	r0, [sp, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f1a1 0404 	sub.w	r4, r1, #4
 80068aa:	bfb8      	it	lt
 80068ac:	18e4      	addlt	r4, r4, r3
 80068ae:	f000 fdab 	bl	8007408 <__malloc_lock>
 80068b2:	4a20      	ldr	r2, [pc, #128]	; (8006934 <_free_r+0x9c>)
 80068b4:	9801      	ldr	r0, [sp, #4]
 80068b6:	6813      	ldr	r3, [r2, #0]
 80068b8:	4615      	mov	r5, r2
 80068ba:	b933      	cbnz	r3, 80068ca <_free_r+0x32>
 80068bc:	6063      	str	r3, [r4, #4]
 80068be:	6014      	str	r4, [r2, #0]
 80068c0:	b003      	add	sp, #12
 80068c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068c6:	f000 bda5 	b.w	8007414 <__malloc_unlock>
 80068ca:	42a3      	cmp	r3, r4
 80068cc:	d90b      	bls.n	80068e6 <_free_r+0x4e>
 80068ce:	6821      	ldr	r1, [r4, #0]
 80068d0:	1862      	adds	r2, r4, r1
 80068d2:	4293      	cmp	r3, r2
 80068d4:	bf04      	itt	eq
 80068d6:	681a      	ldreq	r2, [r3, #0]
 80068d8:	685b      	ldreq	r3, [r3, #4]
 80068da:	6063      	str	r3, [r4, #4]
 80068dc:	bf04      	itt	eq
 80068de:	1852      	addeq	r2, r2, r1
 80068e0:	6022      	streq	r2, [r4, #0]
 80068e2:	602c      	str	r4, [r5, #0]
 80068e4:	e7ec      	b.n	80068c0 <_free_r+0x28>
 80068e6:	461a      	mov	r2, r3
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	b10b      	cbz	r3, 80068f0 <_free_r+0x58>
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	d9fa      	bls.n	80068e6 <_free_r+0x4e>
 80068f0:	6811      	ldr	r1, [r2, #0]
 80068f2:	1855      	adds	r5, r2, r1
 80068f4:	42a5      	cmp	r5, r4
 80068f6:	d10b      	bne.n	8006910 <_free_r+0x78>
 80068f8:	6824      	ldr	r4, [r4, #0]
 80068fa:	4421      	add	r1, r4
 80068fc:	1854      	adds	r4, r2, r1
 80068fe:	42a3      	cmp	r3, r4
 8006900:	6011      	str	r1, [r2, #0]
 8006902:	d1dd      	bne.n	80068c0 <_free_r+0x28>
 8006904:	681c      	ldr	r4, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	6053      	str	r3, [r2, #4]
 800690a:	4421      	add	r1, r4
 800690c:	6011      	str	r1, [r2, #0]
 800690e:	e7d7      	b.n	80068c0 <_free_r+0x28>
 8006910:	d902      	bls.n	8006918 <_free_r+0x80>
 8006912:	230c      	movs	r3, #12
 8006914:	6003      	str	r3, [r0, #0]
 8006916:	e7d3      	b.n	80068c0 <_free_r+0x28>
 8006918:	6825      	ldr	r5, [r4, #0]
 800691a:	1961      	adds	r1, r4, r5
 800691c:	428b      	cmp	r3, r1
 800691e:	bf04      	itt	eq
 8006920:	6819      	ldreq	r1, [r3, #0]
 8006922:	685b      	ldreq	r3, [r3, #4]
 8006924:	6063      	str	r3, [r4, #4]
 8006926:	bf04      	itt	eq
 8006928:	1949      	addeq	r1, r1, r5
 800692a:	6021      	streq	r1, [r4, #0]
 800692c:	6054      	str	r4, [r2, #4]
 800692e:	e7c7      	b.n	80068c0 <_free_r+0x28>
 8006930:	b003      	add	sp, #12
 8006932:	bd30      	pop	{r4, r5, pc}
 8006934:	20000094 	.word	0x20000094

08006938 <_malloc_r>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	1ccd      	adds	r5, r1, #3
 800693c:	f025 0503 	bic.w	r5, r5, #3
 8006940:	3508      	adds	r5, #8
 8006942:	2d0c      	cmp	r5, #12
 8006944:	bf38      	it	cc
 8006946:	250c      	movcc	r5, #12
 8006948:	2d00      	cmp	r5, #0
 800694a:	4606      	mov	r6, r0
 800694c:	db01      	blt.n	8006952 <_malloc_r+0x1a>
 800694e:	42a9      	cmp	r1, r5
 8006950:	d903      	bls.n	800695a <_malloc_r+0x22>
 8006952:	230c      	movs	r3, #12
 8006954:	6033      	str	r3, [r6, #0]
 8006956:	2000      	movs	r0, #0
 8006958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800695a:	f000 fd55 	bl	8007408 <__malloc_lock>
 800695e:	4921      	ldr	r1, [pc, #132]	; (80069e4 <_malloc_r+0xac>)
 8006960:	680a      	ldr	r2, [r1, #0]
 8006962:	4614      	mov	r4, r2
 8006964:	b99c      	cbnz	r4, 800698e <_malloc_r+0x56>
 8006966:	4f20      	ldr	r7, [pc, #128]	; (80069e8 <_malloc_r+0xb0>)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	b923      	cbnz	r3, 8006976 <_malloc_r+0x3e>
 800696c:	4621      	mov	r1, r4
 800696e:	4630      	mov	r0, r6
 8006970:	f000 fc86 	bl	8007280 <_sbrk_r>
 8006974:	6038      	str	r0, [r7, #0]
 8006976:	4629      	mov	r1, r5
 8006978:	4630      	mov	r0, r6
 800697a:	f000 fc81 	bl	8007280 <_sbrk_r>
 800697e:	1c43      	adds	r3, r0, #1
 8006980:	d123      	bne.n	80069ca <_malloc_r+0x92>
 8006982:	230c      	movs	r3, #12
 8006984:	6033      	str	r3, [r6, #0]
 8006986:	4630      	mov	r0, r6
 8006988:	f000 fd44 	bl	8007414 <__malloc_unlock>
 800698c:	e7e3      	b.n	8006956 <_malloc_r+0x1e>
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	1b5b      	subs	r3, r3, r5
 8006992:	d417      	bmi.n	80069c4 <_malloc_r+0x8c>
 8006994:	2b0b      	cmp	r3, #11
 8006996:	d903      	bls.n	80069a0 <_malloc_r+0x68>
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	441c      	add	r4, r3
 800699c:	6025      	str	r5, [r4, #0]
 800699e:	e004      	b.n	80069aa <_malloc_r+0x72>
 80069a0:	6863      	ldr	r3, [r4, #4]
 80069a2:	42a2      	cmp	r2, r4
 80069a4:	bf0c      	ite	eq
 80069a6:	600b      	streq	r3, [r1, #0]
 80069a8:	6053      	strne	r3, [r2, #4]
 80069aa:	4630      	mov	r0, r6
 80069ac:	f000 fd32 	bl	8007414 <__malloc_unlock>
 80069b0:	f104 000b 	add.w	r0, r4, #11
 80069b4:	1d23      	adds	r3, r4, #4
 80069b6:	f020 0007 	bic.w	r0, r0, #7
 80069ba:	1ac2      	subs	r2, r0, r3
 80069bc:	d0cc      	beq.n	8006958 <_malloc_r+0x20>
 80069be:	1a1b      	subs	r3, r3, r0
 80069c0:	50a3      	str	r3, [r4, r2]
 80069c2:	e7c9      	b.n	8006958 <_malloc_r+0x20>
 80069c4:	4622      	mov	r2, r4
 80069c6:	6864      	ldr	r4, [r4, #4]
 80069c8:	e7cc      	b.n	8006964 <_malloc_r+0x2c>
 80069ca:	1cc4      	adds	r4, r0, #3
 80069cc:	f024 0403 	bic.w	r4, r4, #3
 80069d0:	42a0      	cmp	r0, r4
 80069d2:	d0e3      	beq.n	800699c <_malloc_r+0x64>
 80069d4:	1a21      	subs	r1, r4, r0
 80069d6:	4630      	mov	r0, r6
 80069d8:	f000 fc52 	bl	8007280 <_sbrk_r>
 80069dc:	3001      	adds	r0, #1
 80069de:	d1dd      	bne.n	800699c <_malloc_r+0x64>
 80069e0:	e7cf      	b.n	8006982 <_malloc_r+0x4a>
 80069e2:	bf00      	nop
 80069e4:	20000094 	.word	0x20000094
 80069e8:	20000098 	.word	0x20000098

080069ec <__ssputs_r>:
 80069ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f0:	688e      	ldr	r6, [r1, #8]
 80069f2:	429e      	cmp	r6, r3
 80069f4:	4682      	mov	sl, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	4690      	mov	r8, r2
 80069fa:	461f      	mov	r7, r3
 80069fc:	d838      	bhi.n	8006a70 <__ssputs_r+0x84>
 80069fe:	898a      	ldrh	r2, [r1, #12]
 8006a00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a04:	d032      	beq.n	8006a6c <__ssputs_r+0x80>
 8006a06:	6825      	ldr	r5, [r4, #0]
 8006a08:	6909      	ldr	r1, [r1, #16]
 8006a0a:	eba5 0901 	sub.w	r9, r5, r1
 8006a0e:	6965      	ldr	r5, [r4, #20]
 8006a10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a18:	3301      	adds	r3, #1
 8006a1a:	444b      	add	r3, r9
 8006a1c:	106d      	asrs	r5, r5, #1
 8006a1e:	429d      	cmp	r5, r3
 8006a20:	bf38      	it	cc
 8006a22:	461d      	movcc	r5, r3
 8006a24:	0553      	lsls	r3, r2, #21
 8006a26:	d531      	bpl.n	8006a8c <__ssputs_r+0xa0>
 8006a28:	4629      	mov	r1, r5
 8006a2a:	f7ff ff85 	bl	8006938 <_malloc_r>
 8006a2e:	4606      	mov	r6, r0
 8006a30:	b950      	cbnz	r0, 8006a48 <__ssputs_r+0x5c>
 8006a32:	230c      	movs	r3, #12
 8006a34:	f8ca 3000 	str.w	r3, [sl]
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3e:	81a3      	strh	r3, [r4, #12]
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295
 8006a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a48:	6921      	ldr	r1, [r4, #16]
 8006a4a:	464a      	mov	r2, r9
 8006a4c:	f7ff fb82 	bl	8006154 <memcpy>
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5a:	81a3      	strh	r3, [r4, #12]
 8006a5c:	6126      	str	r6, [r4, #16]
 8006a5e:	6165      	str	r5, [r4, #20]
 8006a60:	444e      	add	r6, r9
 8006a62:	eba5 0509 	sub.w	r5, r5, r9
 8006a66:	6026      	str	r6, [r4, #0]
 8006a68:	60a5      	str	r5, [r4, #8]
 8006a6a:	463e      	mov	r6, r7
 8006a6c:	42be      	cmp	r6, r7
 8006a6e:	d900      	bls.n	8006a72 <__ssputs_r+0x86>
 8006a70:	463e      	mov	r6, r7
 8006a72:	4632      	mov	r2, r6
 8006a74:	6820      	ldr	r0, [r4, #0]
 8006a76:	4641      	mov	r1, r8
 8006a78:	f000 fcac 	bl	80073d4 <memmove>
 8006a7c:	68a3      	ldr	r3, [r4, #8]
 8006a7e:	6822      	ldr	r2, [r4, #0]
 8006a80:	1b9b      	subs	r3, r3, r6
 8006a82:	4432      	add	r2, r6
 8006a84:	60a3      	str	r3, [r4, #8]
 8006a86:	6022      	str	r2, [r4, #0]
 8006a88:	2000      	movs	r0, #0
 8006a8a:	e7db      	b.n	8006a44 <__ssputs_r+0x58>
 8006a8c:	462a      	mov	r2, r5
 8006a8e:	f000 fcc7 	bl	8007420 <_realloc_r>
 8006a92:	4606      	mov	r6, r0
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d1e1      	bne.n	8006a5c <__ssputs_r+0x70>
 8006a98:	6921      	ldr	r1, [r4, #16]
 8006a9a:	4650      	mov	r0, sl
 8006a9c:	f7ff fefc 	bl	8006898 <_free_r>
 8006aa0:	e7c7      	b.n	8006a32 <__ssputs_r+0x46>
	...

08006aa4 <_svfiprintf_r>:
 8006aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa8:	4698      	mov	r8, r3
 8006aaa:	898b      	ldrh	r3, [r1, #12]
 8006aac:	061b      	lsls	r3, r3, #24
 8006aae:	b09d      	sub	sp, #116	; 0x74
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	460d      	mov	r5, r1
 8006ab4:	4614      	mov	r4, r2
 8006ab6:	d50e      	bpl.n	8006ad6 <_svfiprintf_r+0x32>
 8006ab8:	690b      	ldr	r3, [r1, #16]
 8006aba:	b963      	cbnz	r3, 8006ad6 <_svfiprintf_r+0x32>
 8006abc:	2140      	movs	r1, #64	; 0x40
 8006abe:	f7ff ff3b 	bl	8006938 <_malloc_r>
 8006ac2:	6028      	str	r0, [r5, #0]
 8006ac4:	6128      	str	r0, [r5, #16]
 8006ac6:	b920      	cbnz	r0, 8006ad2 <_svfiprintf_r+0x2e>
 8006ac8:	230c      	movs	r3, #12
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad0:	e0d1      	b.n	8006c76 <_svfiprintf_r+0x1d2>
 8006ad2:	2340      	movs	r3, #64	; 0x40
 8006ad4:	616b      	str	r3, [r5, #20]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8006ada:	2320      	movs	r3, #32
 8006adc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ae0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ae4:	2330      	movs	r3, #48	; 0x30
 8006ae6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c90 <_svfiprintf_r+0x1ec>
 8006aea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aee:	f04f 0901 	mov.w	r9, #1
 8006af2:	4623      	mov	r3, r4
 8006af4:	469a      	mov	sl, r3
 8006af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006afa:	b10a      	cbz	r2, 8006b00 <_svfiprintf_r+0x5c>
 8006afc:	2a25      	cmp	r2, #37	; 0x25
 8006afe:	d1f9      	bne.n	8006af4 <_svfiprintf_r+0x50>
 8006b00:	ebba 0b04 	subs.w	fp, sl, r4
 8006b04:	d00b      	beq.n	8006b1e <_svfiprintf_r+0x7a>
 8006b06:	465b      	mov	r3, fp
 8006b08:	4622      	mov	r2, r4
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	f7ff ff6d 	bl	80069ec <__ssputs_r>
 8006b12:	3001      	adds	r0, #1
 8006b14:	f000 80aa 	beq.w	8006c6c <_svfiprintf_r+0x1c8>
 8006b18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b1a:	445a      	add	r2, fp
 8006b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 80a2 	beq.w	8006c6c <_svfiprintf_r+0x1c8>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b32:	f10a 0a01 	add.w	sl, sl, #1
 8006b36:	9304      	str	r3, [sp, #16]
 8006b38:	9307      	str	r3, [sp, #28]
 8006b3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b3e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b40:	4654      	mov	r4, sl
 8006b42:	2205      	movs	r2, #5
 8006b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b48:	4851      	ldr	r0, [pc, #324]	; (8006c90 <_svfiprintf_r+0x1ec>)
 8006b4a:	f7f9 fb49 	bl	80001e0 <memchr>
 8006b4e:	9a04      	ldr	r2, [sp, #16]
 8006b50:	b9d8      	cbnz	r0, 8006b8a <_svfiprintf_r+0xe6>
 8006b52:	06d0      	lsls	r0, r2, #27
 8006b54:	bf44      	itt	mi
 8006b56:	2320      	movmi	r3, #32
 8006b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b5c:	0711      	lsls	r1, r2, #28
 8006b5e:	bf44      	itt	mi
 8006b60:	232b      	movmi	r3, #43	; 0x2b
 8006b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b66:	f89a 3000 	ldrb.w	r3, [sl]
 8006b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b6c:	d015      	beq.n	8006b9a <_svfiprintf_r+0xf6>
 8006b6e:	9a07      	ldr	r2, [sp, #28]
 8006b70:	4654      	mov	r4, sl
 8006b72:	2000      	movs	r0, #0
 8006b74:	f04f 0c0a 	mov.w	ip, #10
 8006b78:	4621      	mov	r1, r4
 8006b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b7e:	3b30      	subs	r3, #48	; 0x30
 8006b80:	2b09      	cmp	r3, #9
 8006b82:	d94e      	bls.n	8006c22 <_svfiprintf_r+0x17e>
 8006b84:	b1b0      	cbz	r0, 8006bb4 <_svfiprintf_r+0x110>
 8006b86:	9207      	str	r2, [sp, #28]
 8006b88:	e014      	b.n	8006bb4 <_svfiprintf_r+0x110>
 8006b8a:	eba0 0308 	sub.w	r3, r0, r8
 8006b8e:	fa09 f303 	lsl.w	r3, r9, r3
 8006b92:	4313      	orrs	r3, r2
 8006b94:	9304      	str	r3, [sp, #16]
 8006b96:	46a2      	mov	sl, r4
 8006b98:	e7d2      	b.n	8006b40 <_svfiprintf_r+0x9c>
 8006b9a:	9b03      	ldr	r3, [sp, #12]
 8006b9c:	1d19      	adds	r1, r3, #4
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	9103      	str	r1, [sp, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bfbb      	ittet	lt
 8006ba6:	425b      	neglt	r3, r3
 8006ba8:	f042 0202 	orrlt.w	r2, r2, #2
 8006bac:	9307      	strge	r3, [sp, #28]
 8006bae:	9307      	strlt	r3, [sp, #28]
 8006bb0:	bfb8      	it	lt
 8006bb2:	9204      	strlt	r2, [sp, #16]
 8006bb4:	7823      	ldrb	r3, [r4, #0]
 8006bb6:	2b2e      	cmp	r3, #46	; 0x2e
 8006bb8:	d10c      	bne.n	8006bd4 <_svfiprintf_r+0x130>
 8006bba:	7863      	ldrb	r3, [r4, #1]
 8006bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8006bbe:	d135      	bne.n	8006c2c <_svfiprintf_r+0x188>
 8006bc0:	9b03      	ldr	r3, [sp, #12]
 8006bc2:	1d1a      	adds	r2, r3, #4
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	9203      	str	r2, [sp, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bfb8      	it	lt
 8006bcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bd0:	3402      	adds	r4, #2
 8006bd2:	9305      	str	r3, [sp, #20]
 8006bd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ca0 <_svfiprintf_r+0x1fc>
 8006bd8:	7821      	ldrb	r1, [r4, #0]
 8006bda:	2203      	movs	r2, #3
 8006bdc:	4650      	mov	r0, sl
 8006bde:	f7f9 faff 	bl	80001e0 <memchr>
 8006be2:	b140      	cbz	r0, 8006bf6 <_svfiprintf_r+0x152>
 8006be4:	2340      	movs	r3, #64	; 0x40
 8006be6:	eba0 000a 	sub.w	r0, r0, sl
 8006bea:	fa03 f000 	lsl.w	r0, r3, r0
 8006bee:	9b04      	ldr	r3, [sp, #16]
 8006bf0:	4303      	orrs	r3, r0
 8006bf2:	3401      	adds	r4, #1
 8006bf4:	9304      	str	r3, [sp, #16]
 8006bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bfa:	4826      	ldr	r0, [pc, #152]	; (8006c94 <_svfiprintf_r+0x1f0>)
 8006bfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c00:	2206      	movs	r2, #6
 8006c02:	f7f9 faed 	bl	80001e0 <memchr>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d038      	beq.n	8006c7c <_svfiprintf_r+0x1d8>
 8006c0a:	4b23      	ldr	r3, [pc, #140]	; (8006c98 <_svfiprintf_r+0x1f4>)
 8006c0c:	bb1b      	cbnz	r3, 8006c56 <_svfiprintf_r+0x1b2>
 8006c0e:	9b03      	ldr	r3, [sp, #12]
 8006c10:	3307      	adds	r3, #7
 8006c12:	f023 0307 	bic.w	r3, r3, #7
 8006c16:	3308      	adds	r3, #8
 8006c18:	9303      	str	r3, [sp, #12]
 8006c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c1c:	4433      	add	r3, r6
 8006c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c20:	e767      	b.n	8006af2 <_svfiprintf_r+0x4e>
 8006c22:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c26:	460c      	mov	r4, r1
 8006c28:	2001      	movs	r0, #1
 8006c2a:	e7a5      	b.n	8006b78 <_svfiprintf_r+0xd4>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	3401      	adds	r4, #1
 8006c30:	9305      	str	r3, [sp, #20]
 8006c32:	4619      	mov	r1, r3
 8006c34:	f04f 0c0a 	mov.w	ip, #10
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c3e:	3a30      	subs	r2, #48	; 0x30
 8006c40:	2a09      	cmp	r2, #9
 8006c42:	d903      	bls.n	8006c4c <_svfiprintf_r+0x1a8>
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0c5      	beq.n	8006bd4 <_svfiprintf_r+0x130>
 8006c48:	9105      	str	r1, [sp, #20]
 8006c4a:	e7c3      	b.n	8006bd4 <_svfiprintf_r+0x130>
 8006c4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c50:	4604      	mov	r4, r0
 8006c52:	2301      	movs	r3, #1
 8006c54:	e7f0      	b.n	8006c38 <_svfiprintf_r+0x194>
 8006c56:	ab03      	add	r3, sp, #12
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	462a      	mov	r2, r5
 8006c5c:	4b0f      	ldr	r3, [pc, #60]	; (8006c9c <_svfiprintf_r+0x1f8>)
 8006c5e:	a904      	add	r1, sp, #16
 8006c60:	4638      	mov	r0, r7
 8006c62:	f3af 8000 	nop.w
 8006c66:	1c42      	adds	r2, r0, #1
 8006c68:	4606      	mov	r6, r0
 8006c6a:	d1d6      	bne.n	8006c1a <_svfiprintf_r+0x176>
 8006c6c:	89ab      	ldrh	r3, [r5, #12]
 8006c6e:	065b      	lsls	r3, r3, #25
 8006c70:	f53f af2c 	bmi.w	8006acc <_svfiprintf_r+0x28>
 8006c74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c76:	b01d      	add	sp, #116	; 0x74
 8006c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7c:	ab03      	add	r3, sp, #12
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	462a      	mov	r2, r5
 8006c82:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <_svfiprintf_r+0x1f8>)
 8006c84:	a904      	add	r1, sp, #16
 8006c86:	4638      	mov	r0, r7
 8006c88:	f000 f9d4 	bl	8007034 <_printf_i>
 8006c8c:	e7eb      	b.n	8006c66 <_svfiprintf_r+0x1c2>
 8006c8e:	bf00      	nop
 8006c90:	0801cd20 	.word	0x0801cd20
 8006c94:	0801cd2a 	.word	0x0801cd2a
 8006c98:	00000000 	.word	0x00000000
 8006c9c:	080069ed 	.word	0x080069ed
 8006ca0:	0801cd26 	.word	0x0801cd26

08006ca4 <__sfputc_r>:
 8006ca4:	6893      	ldr	r3, [r2, #8]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	b410      	push	{r4}
 8006cac:	6093      	str	r3, [r2, #8]
 8006cae:	da08      	bge.n	8006cc2 <__sfputc_r+0x1e>
 8006cb0:	6994      	ldr	r4, [r2, #24]
 8006cb2:	42a3      	cmp	r3, r4
 8006cb4:	db01      	blt.n	8006cba <__sfputc_r+0x16>
 8006cb6:	290a      	cmp	r1, #10
 8006cb8:	d103      	bne.n	8006cc2 <__sfputc_r+0x1e>
 8006cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cbe:	f7ff bb0d 	b.w	80062dc <__swbuf_r>
 8006cc2:	6813      	ldr	r3, [r2, #0]
 8006cc4:	1c58      	adds	r0, r3, #1
 8006cc6:	6010      	str	r0, [r2, #0]
 8006cc8:	7019      	strb	r1, [r3, #0]
 8006cca:	4608      	mov	r0, r1
 8006ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <__sfputs_r>:
 8006cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	460f      	mov	r7, r1
 8006cd8:	4614      	mov	r4, r2
 8006cda:	18d5      	adds	r5, r2, r3
 8006cdc:	42ac      	cmp	r4, r5
 8006cde:	d101      	bne.n	8006ce4 <__sfputs_r+0x12>
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	e007      	b.n	8006cf4 <__sfputs_r+0x22>
 8006ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce8:	463a      	mov	r2, r7
 8006cea:	4630      	mov	r0, r6
 8006cec:	f7ff ffda 	bl	8006ca4 <__sfputc_r>
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	d1f3      	bne.n	8006cdc <__sfputs_r+0xa>
 8006cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cf8 <_vfiprintf_r>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	460d      	mov	r5, r1
 8006cfe:	b09d      	sub	sp, #116	; 0x74
 8006d00:	4614      	mov	r4, r2
 8006d02:	4698      	mov	r8, r3
 8006d04:	4606      	mov	r6, r0
 8006d06:	b118      	cbz	r0, 8006d10 <_vfiprintf_r+0x18>
 8006d08:	6983      	ldr	r3, [r0, #24]
 8006d0a:	b90b      	cbnz	r3, 8006d10 <_vfiprintf_r+0x18>
 8006d0c:	f7ff fcc0 	bl	8006690 <__sinit>
 8006d10:	4b89      	ldr	r3, [pc, #548]	; (8006f38 <_vfiprintf_r+0x240>)
 8006d12:	429d      	cmp	r5, r3
 8006d14:	d11b      	bne.n	8006d4e <_vfiprintf_r+0x56>
 8006d16:	6875      	ldr	r5, [r6, #4]
 8006d18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d1a:	07d9      	lsls	r1, r3, #31
 8006d1c:	d405      	bmi.n	8006d2a <_vfiprintf_r+0x32>
 8006d1e:	89ab      	ldrh	r3, [r5, #12]
 8006d20:	059a      	lsls	r2, r3, #22
 8006d22:	d402      	bmi.n	8006d2a <_vfiprintf_r+0x32>
 8006d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d26:	f7ff fd51 	bl	80067cc <__retarget_lock_acquire_recursive>
 8006d2a:	89ab      	ldrh	r3, [r5, #12]
 8006d2c:	071b      	lsls	r3, r3, #28
 8006d2e:	d501      	bpl.n	8006d34 <_vfiprintf_r+0x3c>
 8006d30:	692b      	ldr	r3, [r5, #16]
 8006d32:	b9eb      	cbnz	r3, 8006d70 <_vfiprintf_r+0x78>
 8006d34:	4629      	mov	r1, r5
 8006d36:	4630      	mov	r0, r6
 8006d38:	f7ff fb22 	bl	8006380 <__swsetup_r>
 8006d3c:	b1c0      	cbz	r0, 8006d70 <_vfiprintf_r+0x78>
 8006d3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d40:	07dc      	lsls	r4, r3, #31
 8006d42:	d50e      	bpl.n	8006d62 <_vfiprintf_r+0x6a>
 8006d44:	f04f 30ff 	mov.w	r0, #4294967295
 8006d48:	b01d      	add	sp, #116	; 0x74
 8006d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4e:	4b7b      	ldr	r3, [pc, #492]	; (8006f3c <_vfiprintf_r+0x244>)
 8006d50:	429d      	cmp	r5, r3
 8006d52:	d101      	bne.n	8006d58 <_vfiprintf_r+0x60>
 8006d54:	68b5      	ldr	r5, [r6, #8]
 8006d56:	e7df      	b.n	8006d18 <_vfiprintf_r+0x20>
 8006d58:	4b79      	ldr	r3, [pc, #484]	; (8006f40 <_vfiprintf_r+0x248>)
 8006d5a:	429d      	cmp	r5, r3
 8006d5c:	bf08      	it	eq
 8006d5e:	68f5      	ldreq	r5, [r6, #12]
 8006d60:	e7da      	b.n	8006d18 <_vfiprintf_r+0x20>
 8006d62:	89ab      	ldrh	r3, [r5, #12]
 8006d64:	0598      	lsls	r0, r3, #22
 8006d66:	d4ed      	bmi.n	8006d44 <_vfiprintf_r+0x4c>
 8006d68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d6a:	f7ff fd30 	bl	80067ce <__retarget_lock_release_recursive>
 8006d6e:	e7e9      	b.n	8006d44 <_vfiprintf_r+0x4c>
 8006d70:	2300      	movs	r3, #0
 8006d72:	9309      	str	r3, [sp, #36]	; 0x24
 8006d74:	2320      	movs	r3, #32
 8006d76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d7e:	2330      	movs	r3, #48	; 0x30
 8006d80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f44 <_vfiprintf_r+0x24c>
 8006d84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d88:	f04f 0901 	mov.w	r9, #1
 8006d8c:	4623      	mov	r3, r4
 8006d8e:	469a      	mov	sl, r3
 8006d90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d94:	b10a      	cbz	r2, 8006d9a <_vfiprintf_r+0xa2>
 8006d96:	2a25      	cmp	r2, #37	; 0x25
 8006d98:	d1f9      	bne.n	8006d8e <_vfiprintf_r+0x96>
 8006d9a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d9e:	d00b      	beq.n	8006db8 <_vfiprintf_r+0xc0>
 8006da0:	465b      	mov	r3, fp
 8006da2:	4622      	mov	r2, r4
 8006da4:	4629      	mov	r1, r5
 8006da6:	4630      	mov	r0, r6
 8006da8:	f7ff ff93 	bl	8006cd2 <__sfputs_r>
 8006dac:	3001      	adds	r0, #1
 8006dae:	f000 80aa 	beq.w	8006f06 <_vfiprintf_r+0x20e>
 8006db2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006db4:	445a      	add	r2, fp
 8006db6:	9209      	str	r2, [sp, #36]	; 0x24
 8006db8:	f89a 3000 	ldrb.w	r3, [sl]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 80a2 	beq.w	8006f06 <_vfiprintf_r+0x20e>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dcc:	f10a 0a01 	add.w	sl, sl, #1
 8006dd0:	9304      	str	r3, [sp, #16]
 8006dd2:	9307      	str	r3, [sp, #28]
 8006dd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dd8:	931a      	str	r3, [sp, #104]	; 0x68
 8006dda:	4654      	mov	r4, sl
 8006ddc:	2205      	movs	r2, #5
 8006dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de2:	4858      	ldr	r0, [pc, #352]	; (8006f44 <_vfiprintf_r+0x24c>)
 8006de4:	f7f9 f9fc 	bl	80001e0 <memchr>
 8006de8:	9a04      	ldr	r2, [sp, #16]
 8006dea:	b9d8      	cbnz	r0, 8006e24 <_vfiprintf_r+0x12c>
 8006dec:	06d1      	lsls	r1, r2, #27
 8006dee:	bf44      	itt	mi
 8006df0:	2320      	movmi	r3, #32
 8006df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006df6:	0713      	lsls	r3, r2, #28
 8006df8:	bf44      	itt	mi
 8006dfa:	232b      	movmi	r3, #43	; 0x2b
 8006dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e00:	f89a 3000 	ldrb.w	r3, [sl]
 8006e04:	2b2a      	cmp	r3, #42	; 0x2a
 8006e06:	d015      	beq.n	8006e34 <_vfiprintf_r+0x13c>
 8006e08:	9a07      	ldr	r2, [sp, #28]
 8006e0a:	4654      	mov	r4, sl
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	f04f 0c0a 	mov.w	ip, #10
 8006e12:	4621      	mov	r1, r4
 8006e14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e18:	3b30      	subs	r3, #48	; 0x30
 8006e1a:	2b09      	cmp	r3, #9
 8006e1c:	d94e      	bls.n	8006ebc <_vfiprintf_r+0x1c4>
 8006e1e:	b1b0      	cbz	r0, 8006e4e <_vfiprintf_r+0x156>
 8006e20:	9207      	str	r2, [sp, #28]
 8006e22:	e014      	b.n	8006e4e <_vfiprintf_r+0x156>
 8006e24:	eba0 0308 	sub.w	r3, r0, r8
 8006e28:	fa09 f303 	lsl.w	r3, r9, r3
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	9304      	str	r3, [sp, #16]
 8006e30:	46a2      	mov	sl, r4
 8006e32:	e7d2      	b.n	8006dda <_vfiprintf_r+0xe2>
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	1d19      	adds	r1, r3, #4
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	9103      	str	r1, [sp, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bfbb      	ittet	lt
 8006e40:	425b      	neglt	r3, r3
 8006e42:	f042 0202 	orrlt.w	r2, r2, #2
 8006e46:	9307      	strge	r3, [sp, #28]
 8006e48:	9307      	strlt	r3, [sp, #28]
 8006e4a:	bfb8      	it	lt
 8006e4c:	9204      	strlt	r2, [sp, #16]
 8006e4e:	7823      	ldrb	r3, [r4, #0]
 8006e50:	2b2e      	cmp	r3, #46	; 0x2e
 8006e52:	d10c      	bne.n	8006e6e <_vfiprintf_r+0x176>
 8006e54:	7863      	ldrb	r3, [r4, #1]
 8006e56:	2b2a      	cmp	r3, #42	; 0x2a
 8006e58:	d135      	bne.n	8006ec6 <_vfiprintf_r+0x1ce>
 8006e5a:	9b03      	ldr	r3, [sp, #12]
 8006e5c:	1d1a      	adds	r2, r3, #4
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	9203      	str	r2, [sp, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	bfb8      	it	lt
 8006e66:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e6a:	3402      	adds	r4, #2
 8006e6c:	9305      	str	r3, [sp, #20]
 8006e6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f54 <_vfiprintf_r+0x25c>
 8006e72:	7821      	ldrb	r1, [r4, #0]
 8006e74:	2203      	movs	r2, #3
 8006e76:	4650      	mov	r0, sl
 8006e78:	f7f9 f9b2 	bl	80001e0 <memchr>
 8006e7c:	b140      	cbz	r0, 8006e90 <_vfiprintf_r+0x198>
 8006e7e:	2340      	movs	r3, #64	; 0x40
 8006e80:	eba0 000a 	sub.w	r0, r0, sl
 8006e84:	fa03 f000 	lsl.w	r0, r3, r0
 8006e88:	9b04      	ldr	r3, [sp, #16]
 8006e8a:	4303      	orrs	r3, r0
 8006e8c:	3401      	adds	r4, #1
 8006e8e:	9304      	str	r3, [sp, #16]
 8006e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e94:	482c      	ldr	r0, [pc, #176]	; (8006f48 <_vfiprintf_r+0x250>)
 8006e96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e9a:	2206      	movs	r2, #6
 8006e9c:	f7f9 f9a0 	bl	80001e0 <memchr>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d03f      	beq.n	8006f24 <_vfiprintf_r+0x22c>
 8006ea4:	4b29      	ldr	r3, [pc, #164]	; (8006f4c <_vfiprintf_r+0x254>)
 8006ea6:	bb1b      	cbnz	r3, 8006ef0 <_vfiprintf_r+0x1f8>
 8006ea8:	9b03      	ldr	r3, [sp, #12]
 8006eaa:	3307      	adds	r3, #7
 8006eac:	f023 0307 	bic.w	r3, r3, #7
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	9303      	str	r3, [sp, #12]
 8006eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb6:	443b      	add	r3, r7
 8006eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eba:	e767      	b.n	8006d8c <_vfiprintf_r+0x94>
 8006ebc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	2001      	movs	r0, #1
 8006ec4:	e7a5      	b.n	8006e12 <_vfiprintf_r+0x11a>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	3401      	adds	r4, #1
 8006eca:	9305      	str	r3, [sp, #20]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	f04f 0c0a 	mov.w	ip, #10
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ed8:	3a30      	subs	r2, #48	; 0x30
 8006eda:	2a09      	cmp	r2, #9
 8006edc:	d903      	bls.n	8006ee6 <_vfiprintf_r+0x1ee>
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d0c5      	beq.n	8006e6e <_vfiprintf_r+0x176>
 8006ee2:	9105      	str	r1, [sp, #20]
 8006ee4:	e7c3      	b.n	8006e6e <_vfiprintf_r+0x176>
 8006ee6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eea:	4604      	mov	r4, r0
 8006eec:	2301      	movs	r3, #1
 8006eee:	e7f0      	b.n	8006ed2 <_vfiprintf_r+0x1da>
 8006ef0:	ab03      	add	r3, sp, #12
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	462a      	mov	r2, r5
 8006ef6:	4b16      	ldr	r3, [pc, #88]	; (8006f50 <_vfiprintf_r+0x258>)
 8006ef8:	a904      	add	r1, sp, #16
 8006efa:	4630      	mov	r0, r6
 8006efc:	f3af 8000 	nop.w
 8006f00:	4607      	mov	r7, r0
 8006f02:	1c78      	adds	r0, r7, #1
 8006f04:	d1d6      	bne.n	8006eb4 <_vfiprintf_r+0x1bc>
 8006f06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f08:	07d9      	lsls	r1, r3, #31
 8006f0a:	d405      	bmi.n	8006f18 <_vfiprintf_r+0x220>
 8006f0c:	89ab      	ldrh	r3, [r5, #12]
 8006f0e:	059a      	lsls	r2, r3, #22
 8006f10:	d402      	bmi.n	8006f18 <_vfiprintf_r+0x220>
 8006f12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f14:	f7ff fc5b 	bl	80067ce <__retarget_lock_release_recursive>
 8006f18:	89ab      	ldrh	r3, [r5, #12]
 8006f1a:	065b      	lsls	r3, r3, #25
 8006f1c:	f53f af12 	bmi.w	8006d44 <_vfiprintf_r+0x4c>
 8006f20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f22:	e711      	b.n	8006d48 <_vfiprintf_r+0x50>
 8006f24:	ab03      	add	r3, sp, #12
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	462a      	mov	r2, r5
 8006f2a:	4b09      	ldr	r3, [pc, #36]	; (8006f50 <_vfiprintf_r+0x258>)
 8006f2c:	a904      	add	r1, sp, #16
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f000 f880 	bl	8007034 <_printf_i>
 8006f34:	e7e4      	b.n	8006f00 <_vfiprintf_r+0x208>
 8006f36:	bf00      	nop
 8006f38:	0801cce0 	.word	0x0801cce0
 8006f3c:	0801cd00 	.word	0x0801cd00
 8006f40:	0801ccc0 	.word	0x0801ccc0
 8006f44:	0801cd20 	.word	0x0801cd20
 8006f48:	0801cd2a 	.word	0x0801cd2a
 8006f4c:	00000000 	.word	0x00000000
 8006f50:	08006cd3 	.word	0x08006cd3
 8006f54:	0801cd26 	.word	0x0801cd26

08006f58 <_printf_common>:
 8006f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f5c:	4616      	mov	r6, r2
 8006f5e:	4699      	mov	r9, r3
 8006f60:	688a      	ldr	r2, [r1, #8]
 8006f62:	690b      	ldr	r3, [r1, #16]
 8006f64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	bfb8      	it	lt
 8006f6c:	4613      	movlt	r3, r2
 8006f6e:	6033      	str	r3, [r6, #0]
 8006f70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f74:	4607      	mov	r7, r0
 8006f76:	460c      	mov	r4, r1
 8006f78:	b10a      	cbz	r2, 8006f7e <_printf_common+0x26>
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	6033      	str	r3, [r6, #0]
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	0699      	lsls	r1, r3, #26
 8006f82:	bf42      	ittt	mi
 8006f84:	6833      	ldrmi	r3, [r6, #0]
 8006f86:	3302      	addmi	r3, #2
 8006f88:	6033      	strmi	r3, [r6, #0]
 8006f8a:	6825      	ldr	r5, [r4, #0]
 8006f8c:	f015 0506 	ands.w	r5, r5, #6
 8006f90:	d106      	bne.n	8006fa0 <_printf_common+0x48>
 8006f92:	f104 0a19 	add.w	sl, r4, #25
 8006f96:	68e3      	ldr	r3, [r4, #12]
 8006f98:	6832      	ldr	r2, [r6, #0]
 8006f9a:	1a9b      	subs	r3, r3, r2
 8006f9c:	42ab      	cmp	r3, r5
 8006f9e:	dc26      	bgt.n	8006fee <_printf_common+0x96>
 8006fa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fa4:	1e13      	subs	r3, r2, #0
 8006fa6:	6822      	ldr	r2, [r4, #0]
 8006fa8:	bf18      	it	ne
 8006faa:	2301      	movne	r3, #1
 8006fac:	0692      	lsls	r2, r2, #26
 8006fae:	d42b      	bmi.n	8007008 <_printf_common+0xb0>
 8006fb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	47c0      	blx	r8
 8006fba:	3001      	adds	r0, #1
 8006fbc:	d01e      	beq.n	8006ffc <_printf_common+0xa4>
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	68e5      	ldr	r5, [r4, #12]
 8006fc2:	6832      	ldr	r2, [r6, #0]
 8006fc4:	f003 0306 	and.w	r3, r3, #6
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	bf08      	it	eq
 8006fcc:	1aad      	subeq	r5, r5, r2
 8006fce:	68a3      	ldr	r3, [r4, #8]
 8006fd0:	6922      	ldr	r2, [r4, #16]
 8006fd2:	bf0c      	ite	eq
 8006fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fd8:	2500      	movne	r5, #0
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	bfc4      	itt	gt
 8006fde:	1a9b      	subgt	r3, r3, r2
 8006fe0:	18ed      	addgt	r5, r5, r3
 8006fe2:	2600      	movs	r6, #0
 8006fe4:	341a      	adds	r4, #26
 8006fe6:	42b5      	cmp	r5, r6
 8006fe8:	d11a      	bne.n	8007020 <_printf_common+0xc8>
 8006fea:	2000      	movs	r0, #0
 8006fec:	e008      	b.n	8007000 <_printf_common+0xa8>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	4652      	mov	r2, sl
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	47c0      	blx	r8
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	d103      	bne.n	8007004 <_printf_common+0xac>
 8006ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8007000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007004:	3501      	adds	r5, #1
 8007006:	e7c6      	b.n	8006f96 <_printf_common+0x3e>
 8007008:	18e1      	adds	r1, r4, r3
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	2030      	movs	r0, #48	; 0x30
 800700e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007012:	4422      	add	r2, r4
 8007014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800701c:	3302      	adds	r3, #2
 800701e:	e7c7      	b.n	8006fb0 <_printf_common+0x58>
 8007020:	2301      	movs	r3, #1
 8007022:	4622      	mov	r2, r4
 8007024:	4649      	mov	r1, r9
 8007026:	4638      	mov	r0, r7
 8007028:	47c0      	blx	r8
 800702a:	3001      	adds	r0, #1
 800702c:	d0e6      	beq.n	8006ffc <_printf_common+0xa4>
 800702e:	3601      	adds	r6, #1
 8007030:	e7d9      	b.n	8006fe6 <_printf_common+0x8e>
	...

08007034 <_printf_i>:
 8007034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007038:	460c      	mov	r4, r1
 800703a:	4691      	mov	r9, r2
 800703c:	7e27      	ldrb	r7, [r4, #24]
 800703e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007040:	2f78      	cmp	r7, #120	; 0x78
 8007042:	4680      	mov	r8, r0
 8007044:	469a      	mov	sl, r3
 8007046:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800704a:	d807      	bhi.n	800705c <_printf_i+0x28>
 800704c:	2f62      	cmp	r7, #98	; 0x62
 800704e:	d80a      	bhi.n	8007066 <_printf_i+0x32>
 8007050:	2f00      	cmp	r7, #0
 8007052:	f000 80d8 	beq.w	8007206 <_printf_i+0x1d2>
 8007056:	2f58      	cmp	r7, #88	; 0x58
 8007058:	f000 80a3 	beq.w	80071a2 <_printf_i+0x16e>
 800705c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007064:	e03a      	b.n	80070dc <_printf_i+0xa8>
 8007066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800706a:	2b15      	cmp	r3, #21
 800706c:	d8f6      	bhi.n	800705c <_printf_i+0x28>
 800706e:	a001      	add	r0, pc, #4	; (adr r0, 8007074 <_printf_i+0x40>)
 8007070:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007074:	080070cd 	.word	0x080070cd
 8007078:	080070e1 	.word	0x080070e1
 800707c:	0800705d 	.word	0x0800705d
 8007080:	0800705d 	.word	0x0800705d
 8007084:	0800705d 	.word	0x0800705d
 8007088:	0800705d 	.word	0x0800705d
 800708c:	080070e1 	.word	0x080070e1
 8007090:	0800705d 	.word	0x0800705d
 8007094:	0800705d 	.word	0x0800705d
 8007098:	0800705d 	.word	0x0800705d
 800709c:	0800705d 	.word	0x0800705d
 80070a0:	080071ed 	.word	0x080071ed
 80070a4:	08007111 	.word	0x08007111
 80070a8:	080071cf 	.word	0x080071cf
 80070ac:	0800705d 	.word	0x0800705d
 80070b0:	0800705d 	.word	0x0800705d
 80070b4:	0800720f 	.word	0x0800720f
 80070b8:	0800705d 	.word	0x0800705d
 80070bc:	08007111 	.word	0x08007111
 80070c0:	0800705d 	.word	0x0800705d
 80070c4:	0800705d 	.word	0x0800705d
 80070c8:	080071d7 	.word	0x080071d7
 80070cc:	680b      	ldr	r3, [r1, #0]
 80070ce:	1d1a      	adds	r2, r3, #4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	600a      	str	r2, [r1, #0]
 80070d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070dc:	2301      	movs	r3, #1
 80070de:	e0a3      	b.n	8007228 <_printf_i+0x1f4>
 80070e0:	6825      	ldr	r5, [r4, #0]
 80070e2:	6808      	ldr	r0, [r1, #0]
 80070e4:	062e      	lsls	r6, r5, #24
 80070e6:	f100 0304 	add.w	r3, r0, #4
 80070ea:	d50a      	bpl.n	8007102 <_printf_i+0xce>
 80070ec:	6805      	ldr	r5, [r0, #0]
 80070ee:	600b      	str	r3, [r1, #0]
 80070f0:	2d00      	cmp	r5, #0
 80070f2:	da03      	bge.n	80070fc <_printf_i+0xc8>
 80070f4:	232d      	movs	r3, #45	; 0x2d
 80070f6:	426d      	negs	r5, r5
 80070f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070fc:	485e      	ldr	r0, [pc, #376]	; (8007278 <_printf_i+0x244>)
 80070fe:	230a      	movs	r3, #10
 8007100:	e019      	b.n	8007136 <_printf_i+0x102>
 8007102:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007106:	6805      	ldr	r5, [r0, #0]
 8007108:	600b      	str	r3, [r1, #0]
 800710a:	bf18      	it	ne
 800710c:	b22d      	sxthne	r5, r5
 800710e:	e7ef      	b.n	80070f0 <_printf_i+0xbc>
 8007110:	680b      	ldr	r3, [r1, #0]
 8007112:	6825      	ldr	r5, [r4, #0]
 8007114:	1d18      	adds	r0, r3, #4
 8007116:	6008      	str	r0, [r1, #0]
 8007118:	0628      	lsls	r0, r5, #24
 800711a:	d501      	bpl.n	8007120 <_printf_i+0xec>
 800711c:	681d      	ldr	r5, [r3, #0]
 800711e:	e002      	b.n	8007126 <_printf_i+0xf2>
 8007120:	0669      	lsls	r1, r5, #25
 8007122:	d5fb      	bpl.n	800711c <_printf_i+0xe8>
 8007124:	881d      	ldrh	r5, [r3, #0]
 8007126:	4854      	ldr	r0, [pc, #336]	; (8007278 <_printf_i+0x244>)
 8007128:	2f6f      	cmp	r7, #111	; 0x6f
 800712a:	bf0c      	ite	eq
 800712c:	2308      	moveq	r3, #8
 800712e:	230a      	movne	r3, #10
 8007130:	2100      	movs	r1, #0
 8007132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007136:	6866      	ldr	r6, [r4, #4]
 8007138:	60a6      	str	r6, [r4, #8]
 800713a:	2e00      	cmp	r6, #0
 800713c:	bfa2      	ittt	ge
 800713e:	6821      	ldrge	r1, [r4, #0]
 8007140:	f021 0104 	bicge.w	r1, r1, #4
 8007144:	6021      	strge	r1, [r4, #0]
 8007146:	b90d      	cbnz	r5, 800714c <_printf_i+0x118>
 8007148:	2e00      	cmp	r6, #0
 800714a:	d04d      	beq.n	80071e8 <_printf_i+0x1b4>
 800714c:	4616      	mov	r6, r2
 800714e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007152:	fb03 5711 	mls	r7, r3, r1, r5
 8007156:	5dc7      	ldrb	r7, [r0, r7]
 8007158:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800715c:	462f      	mov	r7, r5
 800715e:	42bb      	cmp	r3, r7
 8007160:	460d      	mov	r5, r1
 8007162:	d9f4      	bls.n	800714e <_printf_i+0x11a>
 8007164:	2b08      	cmp	r3, #8
 8007166:	d10b      	bne.n	8007180 <_printf_i+0x14c>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	07df      	lsls	r7, r3, #31
 800716c:	d508      	bpl.n	8007180 <_printf_i+0x14c>
 800716e:	6923      	ldr	r3, [r4, #16]
 8007170:	6861      	ldr	r1, [r4, #4]
 8007172:	4299      	cmp	r1, r3
 8007174:	bfde      	ittt	le
 8007176:	2330      	movle	r3, #48	; 0x30
 8007178:	f806 3c01 	strble.w	r3, [r6, #-1]
 800717c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007180:	1b92      	subs	r2, r2, r6
 8007182:	6122      	str	r2, [r4, #16]
 8007184:	f8cd a000 	str.w	sl, [sp]
 8007188:	464b      	mov	r3, r9
 800718a:	aa03      	add	r2, sp, #12
 800718c:	4621      	mov	r1, r4
 800718e:	4640      	mov	r0, r8
 8007190:	f7ff fee2 	bl	8006f58 <_printf_common>
 8007194:	3001      	adds	r0, #1
 8007196:	d14c      	bne.n	8007232 <_printf_i+0x1fe>
 8007198:	f04f 30ff 	mov.w	r0, #4294967295
 800719c:	b004      	add	sp, #16
 800719e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a2:	4835      	ldr	r0, [pc, #212]	; (8007278 <_printf_i+0x244>)
 80071a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	680e      	ldr	r6, [r1, #0]
 80071ac:	061f      	lsls	r7, r3, #24
 80071ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80071b2:	600e      	str	r6, [r1, #0]
 80071b4:	d514      	bpl.n	80071e0 <_printf_i+0x1ac>
 80071b6:	07d9      	lsls	r1, r3, #31
 80071b8:	bf44      	itt	mi
 80071ba:	f043 0320 	orrmi.w	r3, r3, #32
 80071be:	6023      	strmi	r3, [r4, #0]
 80071c0:	b91d      	cbnz	r5, 80071ca <_printf_i+0x196>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	f023 0320 	bic.w	r3, r3, #32
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	2310      	movs	r3, #16
 80071cc:	e7b0      	b.n	8007130 <_printf_i+0xfc>
 80071ce:	6823      	ldr	r3, [r4, #0]
 80071d0:	f043 0320 	orr.w	r3, r3, #32
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	2378      	movs	r3, #120	; 0x78
 80071d8:	4828      	ldr	r0, [pc, #160]	; (800727c <_printf_i+0x248>)
 80071da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071de:	e7e3      	b.n	80071a8 <_printf_i+0x174>
 80071e0:	065e      	lsls	r6, r3, #25
 80071e2:	bf48      	it	mi
 80071e4:	b2ad      	uxthmi	r5, r5
 80071e6:	e7e6      	b.n	80071b6 <_printf_i+0x182>
 80071e8:	4616      	mov	r6, r2
 80071ea:	e7bb      	b.n	8007164 <_printf_i+0x130>
 80071ec:	680b      	ldr	r3, [r1, #0]
 80071ee:	6826      	ldr	r6, [r4, #0]
 80071f0:	6960      	ldr	r0, [r4, #20]
 80071f2:	1d1d      	adds	r5, r3, #4
 80071f4:	600d      	str	r5, [r1, #0]
 80071f6:	0635      	lsls	r5, r6, #24
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	d501      	bpl.n	8007200 <_printf_i+0x1cc>
 80071fc:	6018      	str	r0, [r3, #0]
 80071fe:	e002      	b.n	8007206 <_printf_i+0x1d2>
 8007200:	0671      	lsls	r1, r6, #25
 8007202:	d5fb      	bpl.n	80071fc <_printf_i+0x1c8>
 8007204:	8018      	strh	r0, [r3, #0]
 8007206:	2300      	movs	r3, #0
 8007208:	6123      	str	r3, [r4, #16]
 800720a:	4616      	mov	r6, r2
 800720c:	e7ba      	b.n	8007184 <_printf_i+0x150>
 800720e:	680b      	ldr	r3, [r1, #0]
 8007210:	1d1a      	adds	r2, r3, #4
 8007212:	600a      	str	r2, [r1, #0]
 8007214:	681e      	ldr	r6, [r3, #0]
 8007216:	6862      	ldr	r2, [r4, #4]
 8007218:	2100      	movs	r1, #0
 800721a:	4630      	mov	r0, r6
 800721c:	f7f8 ffe0 	bl	80001e0 <memchr>
 8007220:	b108      	cbz	r0, 8007226 <_printf_i+0x1f2>
 8007222:	1b80      	subs	r0, r0, r6
 8007224:	6060      	str	r0, [r4, #4]
 8007226:	6863      	ldr	r3, [r4, #4]
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	2300      	movs	r3, #0
 800722c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007230:	e7a8      	b.n	8007184 <_printf_i+0x150>
 8007232:	6923      	ldr	r3, [r4, #16]
 8007234:	4632      	mov	r2, r6
 8007236:	4649      	mov	r1, r9
 8007238:	4640      	mov	r0, r8
 800723a:	47d0      	blx	sl
 800723c:	3001      	adds	r0, #1
 800723e:	d0ab      	beq.n	8007198 <_printf_i+0x164>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	079b      	lsls	r3, r3, #30
 8007244:	d413      	bmi.n	800726e <_printf_i+0x23a>
 8007246:	68e0      	ldr	r0, [r4, #12]
 8007248:	9b03      	ldr	r3, [sp, #12]
 800724a:	4298      	cmp	r0, r3
 800724c:	bfb8      	it	lt
 800724e:	4618      	movlt	r0, r3
 8007250:	e7a4      	b.n	800719c <_printf_i+0x168>
 8007252:	2301      	movs	r3, #1
 8007254:	4632      	mov	r2, r6
 8007256:	4649      	mov	r1, r9
 8007258:	4640      	mov	r0, r8
 800725a:	47d0      	blx	sl
 800725c:	3001      	adds	r0, #1
 800725e:	d09b      	beq.n	8007198 <_printf_i+0x164>
 8007260:	3501      	adds	r5, #1
 8007262:	68e3      	ldr	r3, [r4, #12]
 8007264:	9903      	ldr	r1, [sp, #12]
 8007266:	1a5b      	subs	r3, r3, r1
 8007268:	42ab      	cmp	r3, r5
 800726a:	dcf2      	bgt.n	8007252 <_printf_i+0x21e>
 800726c:	e7eb      	b.n	8007246 <_printf_i+0x212>
 800726e:	2500      	movs	r5, #0
 8007270:	f104 0619 	add.w	r6, r4, #25
 8007274:	e7f5      	b.n	8007262 <_printf_i+0x22e>
 8007276:	bf00      	nop
 8007278:	0801cd31 	.word	0x0801cd31
 800727c:	0801cd42 	.word	0x0801cd42

08007280 <_sbrk_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4d06      	ldr	r5, [pc, #24]	; (800729c <_sbrk_r+0x1c>)
 8007284:	2300      	movs	r3, #0
 8007286:	4604      	mov	r4, r0
 8007288:	4608      	mov	r0, r1
 800728a:	602b      	str	r3, [r5, #0]
 800728c:	f7fa f95e 	bl	800154c <_sbrk>
 8007290:	1c43      	adds	r3, r0, #1
 8007292:	d102      	bne.n	800729a <_sbrk_r+0x1a>
 8007294:	682b      	ldr	r3, [r5, #0]
 8007296:	b103      	cbz	r3, 800729a <_sbrk_r+0x1a>
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	bd38      	pop	{r3, r4, r5, pc}
 800729c:	20000218 	.word	0x20000218

080072a0 <__sread>:
 80072a0:	b510      	push	{r4, lr}
 80072a2:	460c      	mov	r4, r1
 80072a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072a8:	f000 f8e0 	bl	800746c <_read_r>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	bfab      	itete	ge
 80072b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072b2:	89a3      	ldrhlt	r3, [r4, #12]
 80072b4:	181b      	addge	r3, r3, r0
 80072b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072ba:	bfac      	ite	ge
 80072bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80072be:	81a3      	strhlt	r3, [r4, #12]
 80072c0:	bd10      	pop	{r4, pc}

080072c2 <__swrite>:
 80072c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c6:	461f      	mov	r7, r3
 80072c8:	898b      	ldrh	r3, [r1, #12]
 80072ca:	05db      	lsls	r3, r3, #23
 80072cc:	4605      	mov	r5, r0
 80072ce:	460c      	mov	r4, r1
 80072d0:	4616      	mov	r6, r2
 80072d2:	d505      	bpl.n	80072e0 <__swrite+0x1e>
 80072d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d8:	2302      	movs	r3, #2
 80072da:	2200      	movs	r2, #0
 80072dc:	f000 f868 	bl	80073b0 <_lseek_r>
 80072e0:	89a3      	ldrh	r3, [r4, #12]
 80072e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072ea:	81a3      	strh	r3, [r4, #12]
 80072ec:	4632      	mov	r2, r6
 80072ee:	463b      	mov	r3, r7
 80072f0:	4628      	mov	r0, r5
 80072f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072f6:	f000 b817 	b.w	8007328 <_write_r>

080072fa <__sseek>:
 80072fa:	b510      	push	{r4, lr}
 80072fc:	460c      	mov	r4, r1
 80072fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007302:	f000 f855 	bl	80073b0 <_lseek_r>
 8007306:	1c43      	adds	r3, r0, #1
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	bf15      	itete	ne
 800730c:	6560      	strne	r0, [r4, #84]	; 0x54
 800730e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007316:	81a3      	strheq	r3, [r4, #12]
 8007318:	bf18      	it	ne
 800731a:	81a3      	strhne	r3, [r4, #12]
 800731c:	bd10      	pop	{r4, pc}

0800731e <__sclose>:
 800731e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007322:	f000 b813 	b.w	800734c <_close_r>
	...

08007328 <_write_r>:
 8007328:	b538      	push	{r3, r4, r5, lr}
 800732a:	4d07      	ldr	r5, [pc, #28]	; (8007348 <_write_r+0x20>)
 800732c:	4604      	mov	r4, r0
 800732e:	4608      	mov	r0, r1
 8007330:	4611      	mov	r1, r2
 8007332:	2200      	movs	r2, #0
 8007334:	602a      	str	r2, [r5, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	f7fa f8b7 	bl	80014aa <_write>
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d102      	bne.n	8007346 <_write_r+0x1e>
 8007340:	682b      	ldr	r3, [r5, #0]
 8007342:	b103      	cbz	r3, 8007346 <_write_r+0x1e>
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	bd38      	pop	{r3, r4, r5, pc}
 8007348:	20000218 	.word	0x20000218

0800734c <_close_r>:
 800734c:	b538      	push	{r3, r4, r5, lr}
 800734e:	4d06      	ldr	r5, [pc, #24]	; (8007368 <_close_r+0x1c>)
 8007350:	2300      	movs	r3, #0
 8007352:	4604      	mov	r4, r0
 8007354:	4608      	mov	r0, r1
 8007356:	602b      	str	r3, [r5, #0]
 8007358:	f7fa f8c3 	bl	80014e2 <_close>
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	d102      	bne.n	8007366 <_close_r+0x1a>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	b103      	cbz	r3, 8007366 <_close_r+0x1a>
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	bd38      	pop	{r3, r4, r5, pc}
 8007368:	20000218 	.word	0x20000218

0800736c <_fstat_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4d07      	ldr	r5, [pc, #28]	; (800738c <_fstat_r+0x20>)
 8007370:	2300      	movs	r3, #0
 8007372:	4604      	mov	r4, r0
 8007374:	4608      	mov	r0, r1
 8007376:	4611      	mov	r1, r2
 8007378:	602b      	str	r3, [r5, #0]
 800737a:	f7fa f8be 	bl	80014fa <_fstat>
 800737e:	1c43      	adds	r3, r0, #1
 8007380:	d102      	bne.n	8007388 <_fstat_r+0x1c>
 8007382:	682b      	ldr	r3, [r5, #0]
 8007384:	b103      	cbz	r3, 8007388 <_fstat_r+0x1c>
 8007386:	6023      	str	r3, [r4, #0]
 8007388:	bd38      	pop	{r3, r4, r5, pc}
 800738a:	bf00      	nop
 800738c:	20000218 	.word	0x20000218

08007390 <_isatty_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4d06      	ldr	r5, [pc, #24]	; (80073ac <_isatty_r+0x1c>)
 8007394:	2300      	movs	r3, #0
 8007396:	4604      	mov	r4, r0
 8007398:	4608      	mov	r0, r1
 800739a:	602b      	str	r3, [r5, #0]
 800739c:	f7fa f8bd 	bl	800151a <_isatty>
 80073a0:	1c43      	adds	r3, r0, #1
 80073a2:	d102      	bne.n	80073aa <_isatty_r+0x1a>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	b103      	cbz	r3, 80073aa <_isatty_r+0x1a>
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	bd38      	pop	{r3, r4, r5, pc}
 80073ac:	20000218 	.word	0x20000218

080073b0 <_lseek_r>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	4d07      	ldr	r5, [pc, #28]	; (80073d0 <_lseek_r+0x20>)
 80073b4:	4604      	mov	r4, r0
 80073b6:	4608      	mov	r0, r1
 80073b8:	4611      	mov	r1, r2
 80073ba:	2200      	movs	r2, #0
 80073bc:	602a      	str	r2, [r5, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	f7fa f8b6 	bl	8001530 <_lseek>
 80073c4:	1c43      	adds	r3, r0, #1
 80073c6:	d102      	bne.n	80073ce <_lseek_r+0x1e>
 80073c8:	682b      	ldr	r3, [r5, #0]
 80073ca:	b103      	cbz	r3, 80073ce <_lseek_r+0x1e>
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	bd38      	pop	{r3, r4, r5, pc}
 80073d0:	20000218 	.word	0x20000218

080073d4 <memmove>:
 80073d4:	4288      	cmp	r0, r1
 80073d6:	b510      	push	{r4, lr}
 80073d8:	eb01 0402 	add.w	r4, r1, r2
 80073dc:	d902      	bls.n	80073e4 <memmove+0x10>
 80073de:	4284      	cmp	r4, r0
 80073e0:	4623      	mov	r3, r4
 80073e2:	d807      	bhi.n	80073f4 <memmove+0x20>
 80073e4:	1e43      	subs	r3, r0, #1
 80073e6:	42a1      	cmp	r1, r4
 80073e8:	d008      	beq.n	80073fc <memmove+0x28>
 80073ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073f2:	e7f8      	b.n	80073e6 <memmove+0x12>
 80073f4:	4402      	add	r2, r0
 80073f6:	4601      	mov	r1, r0
 80073f8:	428a      	cmp	r2, r1
 80073fa:	d100      	bne.n	80073fe <memmove+0x2a>
 80073fc:	bd10      	pop	{r4, pc}
 80073fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007406:	e7f7      	b.n	80073f8 <memmove+0x24>

08007408 <__malloc_lock>:
 8007408:	4801      	ldr	r0, [pc, #4]	; (8007410 <__malloc_lock+0x8>)
 800740a:	f7ff b9df 	b.w	80067cc <__retarget_lock_acquire_recursive>
 800740e:	bf00      	nop
 8007410:	20000210 	.word	0x20000210

08007414 <__malloc_unlock>:
 8007414:	4801      	ldr	r0, [pc, #4]	; (800741c <__malloc_unlock+0x8>)
 8007416:	f7ff b9da 	b.w	80067ce <__retarget_lock_release_recursive>
 800741a:	bf00      	nop
 800741c:	20000210 	.word	0x20000210

08007420 <_realloc_r>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	4607      	mov	r7, r0
 8007424:	4614      	mov	r4, r2
 8007426:	460e      	mov	r6, r1
 8007428:	b921      	cbnz	r1, 8007434 <_realloc_r+0x14>
 800742a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800742e:	4611      	mov	r1, r2
 8007430:	f7ff ba82 	b.w	8006938 <_malloc_r>
 8007434:	b922      	cbnz	r2, 8007440 <_realloc_r+0x20>
 8007436:	f7ff fa2f 	bl	8006898 <_free_r>
 800743a:	4625      	mov	r5, r4
 800743c:	4628      	mov	r0, r5
 800743e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007440:	f000 f826 	bl	8007490 <_malloc_usable_size_r>
 8007444:	42a0      	cmp	r0, r4
 8007446:	d20f      	bcs.n	8007468 <_realloc_r+0x48>
 8007448:	4621      	mov	r1, r4
 800744a:	4638      	mov	r0, r7
 800744c:	f7ff fa74 	bl	8006938 <_malloc_r>
 8007450:	4605      	mov	r5, r0
 8007452:	2800      	cmp	r0, #0
 8007454:	d0f2      	beq.n	800743c <_realloc_r+0x1c>
 8007456:	4631      	mov	r1, r6
 8007458:	4622      	mov	r2, r4
 800745a:	f7fe fe7b 	bl	8006154 <memcpy>
 800745e:	4631      	mov	r1, r6
 8007460:	4638      	mov	r0, r7
 8007462:	f7ff fa19 	bl	8006898 <_free_r>
 8007466:	e7e9      	b.n	800743c <_realloc_r+0x1c>
 8007468:	4635      	mov	r5, r6
 800746a:	e7e7      	b.n	800743c <_realloc_r+0x1c>

0800746c <_read_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4d07      	ldr	r5, [pc, #28]	; (800748c <_read_r+0x20>)
 8007470:	4604      	mov	r4, r0
 8007472:	4608      	mov	r0, r1
 8007474:	4611      	mov	r1, r2
 8007476:	2200      	movs	r2, #0
 8007478:	602a      	str	r2, [r5, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	f7f9 fff8 	bl	8001470 <_read>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <_read_r+0x1e>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	b103      	cbz	r3, 800748a <_read_r+0x1e>
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	20000218 	.word	0x20000218

08007490 <_malloc_usable_size_r>:
 8007490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007494:	1f18      	subs	r0, r3, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	bfbc      	itt	lt
 800749a:	580b      	ldrlt	r3, [r1, r0]
 800749c:	18c0      	addlt	r0, r0, r3
 800749e:	4770      	bx	lr

080074a0 <_init>:
 80074a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a2:	bf00      	nop
 80074a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a6:	bc08      	pop	{r3}
 80074a8:	469e      	mov	lr, r3
 80074aa:	4770      	bx	lr

080074ac <_fini>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	bf00      	nop
 80074b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b2:	bc08      	pop	{r3}
 80074b4:	469e      	mov	lr, r3
 80074b6:	4770      	bx	lr
